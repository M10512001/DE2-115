// Qsys_system_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 15.1 185

`timescale 1 ps / 1 ps
module Qsys_system_mm_interconnect_0 (
		input  wire        altpll_c0_clk,                                            //                                          altpll_c0.clk
		input  wire        clk_0_clk_clk,                                            //                                          clk_0_clk.clk
		input  wire        altpll_inclk_interface_reset_reset_bridge_in_reset_reset, // altpll_inclk_interface_reset_reset_bridge_in_reset.reset
		input  wire        pixel_buffer_dma_reset_reset_bridge_in_reset_reset,       //       pixel_buffer_dma_reset_reset_bridge_in_reset.reset
		input  wire [28:0] nios2_gen2_data_master_address,                           //                             nios2_gen2_data_master.address
		output wire        nios2_gen2_data_master_waitrequest,                       //                                                   .waitrequest
		input  wire [3:0]  nios2_gen2_data_master_byteenable,                        //                                                   .byteenable
		input  wire        nios2_gen2_data_master_read,                              //                                                   .read
		output wire [31:0] nios2_gen2_data_master_readdata,                          //                                                   .readdata
		output wire        nios2_gen2_data_master_readdatavalid,                     //                                                   .readdatavalid
		input  wire        nios2_gen2_data_master_write,                             //                                                   .write
		input  wire [31:0] nios2_gen2_data_master_writedata,                         //                                                   .writedata
		input  wire        nios2_gen2_data_master_debugaccess,                       //                                                   .debugaccess
		input  wire [28:0] nios2_gen2_instruction_master_address,                    //                      nios2_gen2_instruction_master.address
		output wire        nios2_gen2_instruction_master_waitrequest,                //                                                   .waitrequest
		input  wire        nios2_gen2_instruction_master_read,                       //                                                   .read
		output wire [31:0] nios2_gen2_instruction_master_readdata,                   //                                                   .readdata
		output wire        nios2_gen2_instruction_master_readdatavalid,              //                                                   .readdatavalid
		input  wire [31:0] pixel_buffer_dma_avalon_pixel_dma_master_address,         //           pixel_buffer_dma_avalon_pixel_dma_master.address
		output wire        pixel_buffer_dma_avalon_pixel_dma_master_waitrequest,     //                                                   .waitrequest
		input  wire        pixel_buffer_dma_avalon_pixel_dma_master_read,            //                                                   .read
		output wire [31:0] pixel_buffer_dma_avalon_pixel_dma_master_readdata,        //                                                   .readdata
		output wire        pixel_buffer_dma_avalon_pixel_dma_master_readdatavalid,   //                                                   .readdatavalid
		input  wire        pixel_buffer_dma_avalon_pixel_dma_master_lock,            //                                                   .lock
		output wire [1:0]  altpll_pll_slave_address,                                 //                                   altpll_pll_slave.address
		output wire        altpll_pll_slave_write,                                   //                                                   .write
		output wire        altpll_pll_slave_read,                                    //                                                   .read
		input  wire [31:0] altpll_pll_slave_readdata,                                //                                                   .readdata
		output wire [31:0] altpll_pll_slave_writedata,                               //                                                   .writedata
		output wire [1:0]  chaos_code_done_s1_address,                               //                                 chaos_code_done_s1.address
		output wire        chaos_code_done_s1_write,                                 //                                                   .write
		input  wire [31:0] chaos_code_done_s1_readdata,                              //                                                   .readdata
		output wire [31:0] chaos_code_done_s1_writedata,                             //                                                   .writedata
		output wire        chaos_code_done_s1_chipselect,                            //                                                   .chipselect
		output wire [1:0]  chaos_code_reset_s1_address,                              //                                chaos_code_reset_s1.address
		output wire        chaos_code_reset_s1_write,                                //                                                   .write
		input  wire [31:0] chaos_code_reset_s1_readdata,                             //                                                   .readdata
		output wire [31:0] chaos_code_reset_s1_writedata,                            //                                                   .writedata
		output wire        chaos_code_reset_s1_chipselect,                           //                                                   .chipselect
		output wire [1:0]  chaos_code_shift_s1_address,                              //                                chaos_code_shift_s1.address
		output wire        chaos_code_shift_s1_write,                                //                                                   .write
		input  wire [31:0] chaos_code_shift_s1_readdata,                             //                                                   .readdata
		output wire [31:0] chaos_code_shift_s1_writedata,                            //                                                   .writedata
		output wire        chaos_code_shift_s1_chipselect,                           //                                                   .chipselect
		output wire [1:0]  chaos_code_step_s1_address,                               //                                 chaos_code_step_s1.address
		output wire        chaos_code_step_s1_write,                                 //                                                   .write
		input  wire [31:0] chaos_code_step_s1_readdata,                              //                                                   .readdata
		output wire [31:0] chaos_code_step_s1_writedata,                             //                                                   .writedata
		output wire        chaos_code_step_s1_chipselect,                            //                                                   .chipselect
		output wire [1:0]  chaos_code_w_s1_address,                                  //                                    chaos_code_w_s1.address
		output wire        chaos_code_w_s1_write,                                    //                                                   .write
		input  wire [31:0] chaos_code_w_s1_readdata,                                 //                                                   .readdata
		output wire [31:0] chaos_code_w_s1_writedata,                                //                                                   .writedata
		output wire        chaos_code_w_s1_chipselect,                               //                                                   .chipselect
		output wire [1:0]  chaos_code_x_s1_address,                                  //                                    chaos_code_x_s1.address
		output wire        chaos_code_x_s1_write,                                    //                                                   .write
		input  wire [31:0] chaos_code_x_s1_readdata,                                 //                                                   .readdata
		output wire [31:0] chaos_code_x_s1_writedata,                                //                                                   .writedata
		output wire        chaos_code_x_s1_chipselect,                               //                                                   .chipselect
		output wire [1:0]  chaos_code_y_s1_address,                                  //                                    chaos_code_y_s1.address
		output wire        chaos_code_y_s1_write,                                    //                                                   .write
		input  wire [31:0] chaos_code_y_s1_readdata,                                 //                                                   .readdata
		output wire [31:0] chaos_code_y_s1_writedata,                                //                                                   .writedata
		output wire        chaos_code_y_s1_chipselect,                               //                                                   .chipselect
		output wire [1:0]  chaos_code_z_s1_address,                                  //                                    chaos_code_z_s1.address
		output wire        chaos_code_z_s1_write,                                    //                                                   .write
		input  wire [31:0] chaos_code_z_s1_readdata,                                 //                                                   .readdata
		output wire [31:0] chaos_code_z_s1_writedata,                                //                                                   .writedata
		output wire        chaos_code_z_s1_chipselect,                               //                                                   .chipselect
		output wire [0:0]  jtag_uart_avalon_jtag_slave_address,                      //                        jtag_uart_avalon_jtag_slave.address
		output wire        jtag_uart_avalon_jtag_slave_write,                        //                                                   .write
		output wire        jtag_uart_avalon_jtag_slave_read,                         //                                                   .read
		input  wire [31:0] jtag_uart_avalon_jtag_slave_readdata,                     //                                                   .readdata
		output wire [31:0] jtag_uart_avalon_jtag_slave_writedata,                    //                                                   .writedata
		input  wire        jtag_uart_avalon_jtag_slave_waitrequest,                  //                                                   .waitrequest
		output wire        jtag_uart_avalon_jtag_slave_chipselect,                   //                                                   .chipselect
		output wire [8:0]  nios2_gen2_debug_mem_slave_address,                       //                         nios2_gen2_debug_mem_slave.address
		output wire        nios2_gen2_debug_mem_slave_write,                         //                                                   .write
		output wire        nios2_gen2_debug_mem_slave_read,                          //                                                   .read
		input  wire [31:0] nios2_gen2_debug_mem_slave_readdata,                      //                                                   .readdata
		output wire [31:0] nios2_gen2_debug_mem_slave_writedata,                     //                                                   .writedata
		output wire [3:0]  nios2_gen2_debug_mem_slave_byteenable,                    //                                                   .byteenable
		input  wire        nios2_gen2_debug_mem_slave_waitrequest,                   //                                                   .waitrequest
		output wire        nios2_gen2_debug_mem_slave_debugaccess,                   //                                                   .debugaccess
		output wire [1:0]  pio_key_s1_address,                                       //                                         pio_key_s1.address
		output wire        pio_key_s1_write,                                         //                                                   .write
		input  wire [31:0] pio_key_s1_readdata,                                      //                                                   .readdata
		output wire [31:0] pio_key_s1_writedata,                                     //                                                   .writedata
		output wire        pio_key_s1_chipselect,                                    //                                                   .chipselect
		output wire [1:0]  pio_led_s1_address,                                       //                                         pio_led_s1.address
		output wire        pio_led_s1_write,                                         //                                                   .write
		input  wire [31:0] pio_led_s1_readdata,                                      //                                                   .readdata
		output wire [31:0] pio_led_s1_writedata,                                     //                                                   .writedata
		output wire        pio_led_s1_chipselect,                                    //                                                   .chipselect
		output wire [1:0]  pio_wifi_reset_s1_address,                                //                                  pio_wifi_reset_s1.address
		output wire        pio_wifi_reset_s1_write,                                  //                                                   .write
		input  wire [31:0] pio_wifi_reset_s1_readdata,                               //                                                   .readdata
		output wire [31:0] pio_wifi_reset_s1_writedata,                              //                                                   .writedata
		output wire        pio_wifi_reset_s1_chipselect,                             //                                                   .chipselect
		output wire [19:0] pixel_buffer_avalon_sram_slave_address,                   //                     pixel_buffer_avalon_sram_slave.address
		output wire        pixel_buffer_avalon_sram_slave_write,                     //                                                   .write
		output wire        pixel_buffer_avalon_sram_slave_read,                      //                                                   .read
		input  wire [15:0] pixel_buffer_avalon_sram_slave_readdata,                  //                                                   .readdata
		output wire [15:0] pixel_buffer_avalon_sram_slave_writedata,                 //                                                   .writedata
		output wire [1:0]  pixel_buffer_avalon_sram_slave_byteenable,                //                                                   .byteenable
		input  wire        pixel_buffer_avalon_sram_slave_readdatavalid,             //                                                   .readdatavalid
		output wire [1:0]  pixel_buffer_dma_avalon_control_slave_address,            //              pixel_buffer_dma_avalon_control_slave.address
		output wire        pixel_buffer_dma_avalon_control_slave_write,              //                                                   .write
		output wire        pixel_buffer_dma_avalon_control_slave_read,               //                                                   .read
		input  wire [31:0] pixel_buffer_dma_avalon_control_slave_readdata,           //                                                   .readdata
		output wire [31:0] pixel_buffer_dma_avalon_control_slave_writedata,          //                                                   .writedata
		output wire [3:0]  pixel_buffer_dma_avalon_control_slave_byteenable,         //                                                   .byteenable
		output wire [7:0]  sd_card_avalon_sdcard_slave_address,                      //                        sd_card_avalon_sdcard_slave.address
		output wire        sd_card_avalon_sdcard_slave_write,                        //                                                   .write
		output wire        sd_card_avalon_sdcard_slave_read,                         //                                                   .read
		input  wire [31:0] sd_card_avalon_sdcard_slave_readdata,                     //                                                   .readdata
		output wire [31:0] sd_card_avalon_sdcard_slave_writedata,                    //                                                   .writedata
		output wire [3:0]  sd_card_avalon_sdcard_slave_byteenable,                   //                                                   .byteenable
		input  wire        sd_card_avalon_sdcard_slave_waitrequest,                  //                                                   .waitrequest
		output wire        sd_card_avalon_sdcard_slave_chipselect,                   //                                                   .chipselect
		output wire [24:0] sdram_s1_address,                                         //                                           sdram_s1.address
		output wire        sdram_s1_write,                                           //                                                   .write
		output wire        sdram_s1_read,                                            //                                                   .read
		input  wire [31:0] sdram_s1_readdata,                                        //                                                   .readdata
		output wire [31:0] sdram_s1_writedata,                                       //                                                   .writedata
		output wire [3:0]  sdram_s1_byteenable,                                      //                                                   .byteenable
		input  wire        sdram_s1_readdatavalid,                                   //                                                   .readdatavalid
		input  wire        sdram_s1_waitrequest,                                     //                                                   .waitrequest
		output wire        sdram_s1_chipselect,                                      //                                                   .chipselect
		output wire [0:0]  sysid_control_slave_address,                              //                                sysid_control_slave.address
		input  wire [31:0] sysid_control_slave_readdata,                             //                                                   .readdata
		output wire [2:0]  timer_s1_address,                                         //                                           timer_s1.address
		output wire        timer_s1_write,                                           //                                                   .write
		input  wire [15:0] timer_s1_readdata,                                        //                                                   .readdata
		output wire [15:0] timer_s1_writedata,                                       //                                                   .writedata
		output wire        timer_s1_chipselect,                                      //                                                   .chipselect
		output wire [2:0]  wifi_uart_s1_address,                                     //                                       wifi_uart_s1.address
		output wire        wifi_uart_s1_write,                                       //                                                   .write
		output wire        wifi_uart_s1_read,                                        //                                                   .read
		input  wire [15:0] wifi_uart_s1_readdata,                                    //                                                   .readdata
		output wire [15:0] wifi_uart_s1_writedata,                                   //                                                   .writedata
		output wire        wifi_uart_s1_begintransfer,                               //                                                   .begintransfer
		output wire        wifi_uart_s1_chipselect                                   //                                                   .chipselect
	);

	wire          pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_waitrequest;   // pixel_buffer_dma_avalon_pixel_dma_master_agent:av_waitrequest -> pixel_buffer_dma_avalon_pixel_dma_master_translator:uav_waitrequest
	wire   [31:0] pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_readdata;      // pixel_buffer_dma_avalon_pixel_dma_master_agent:av_readdata -> pixel_buffer_dma_avalon_pixel_dma_master_translator:uav_readdata
	wire          pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_debugaccess;   // pixel_buffer_dma_avalon_pixel_dma_master_translator:uav_debugaccess -> pixel_buffer_dma_avalon_pixel_dma_master_agent:av_debugaccess
	wire   [31:0] pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_address;       // pixel_buffer_dma_avalon_pixel_dma_master_translator:uav_address -> pixel_buffer_dma_avalon_pixel_dma_master_agent:av_address
	wire          pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_read;          // pixel_buffer_dma_avalon_pixel_dma_master_translator:uav_read -> pixel_buffer_dma_avalon_pixel_dma_master_agent:av_read
	wire    [3:0] pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_byteenable;    // pixel_buffer_dma_avalon_pixel_dma_master_translator:uav_byteenable -> pixel_buffer_dma_avalon_pixel_dma_master_agent:av_byteenable
	wire          pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_readdatavalid; // pixel_buffer_dma_avalon_pixel_dma_master_agent:av_readdatavalid -> pixel_buffer_dma_avalon_pixel_dma_master_translator:uav_readdatavalid
	wire          pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_lock;          // pixel_buffer_dma_avalon_pixel_dma_master_translator:uav_lock -> pixel_buffer_dma_avalon_pixel_dma_master_agent:av_lock
	wire          pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_write;         // pixel_buffer_dma_avalon_pixel_dma_master_translator:uav_write -> pixel_buffer_dma_avalon_pixel_dma_master_agent:av_write
	wire   [31:0] pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_writedata;     // pixel_buffer_dma_avalon_pixel_dma_master_translator:uav_writedata -> pixel_buffer_dma_avalon_pixel_dma_master_agent:av_writedata
	wire    [2:0] pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_burstcount;    // pixel_buffer_dma_avalon_pixel_dma_master_translator:uav_burstcount -> pixel_buffer_dma_avalon_pixel_dma_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                                           // rsp_mux:src_valid -> pixel_buffer_dma_avalon_pixel_dma_master_agent:rp_valid
	wire  [111:0] rsp_mux_src_data;                                                                            // rsp_mux:src_data -> pixel_buffer_dma_avalon_pixel_dma_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                                           // pixel_buffer_dma_avalon_pixel_dma_master_agent:rp_ready -> rsp_mux:src_ready
	wire   [20:0] rsp_mux_src_channel;                                                                         // rsp_mux:src_channel -> pixel_buffer_dma_avalon_pixel_dma_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                                   // rsp_mux:src_startofpacket -> pixel_buffer_dma_avalon_pixel_dma_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                                     // rsp_mux:src_endofpacket -> pixel_buffer_dma_avalon_pixel_dma_master_agent:rp_endofpacket
	wire          nios2_gen2_data_master_translator_avalon_universal_master_0_waitrequest;                     // nios2_gen2_data_master_agent:av_waitrequest -> nios2_gen2_data_master_translator:uav_waitrequest
	wire   [31:0] nios2_gen2_data_master_translator_avalon_universal_master_0_readdata;                        // nios2_gen2_data_master_agent:av_readdata -> nios2_gen2_data_master_translator:uav_readdata
	wire          nios2_gen2_data_master_translator_avalon_universal_master_0_debugaccess;                     // nios2_gen2_data_master_translator:uav_debugaccess -> nios2_gen2_data_master_agent:av_debugaccess
	wire   [31:0] nios2_gen2_data_master_translator_avalon_universal_master_0_address;                         // nios2_gen2_data_master_translator:uav_address -> nios2_gen2_data_master_agent:av_address
	wire          nios2_gen2_data_master_translator_avalon_universal_master_0_read;                            // nios2_gen2_data_master_translator:uav_read -> nios2_gen2_data_master_agent:av_read
	wire    [3:0] nios2_gen2_data_master_translator_avalon_universal_master_0_byteenable;                      // nios2_gen2_data_master_translator:uav_byteenable -> nios2_gen2_data_master_agent:av_byteenable
	wire          nios2_gen2_data_master_translator_avalon_universal_master_0_readdatavalid;                   // nios2_gen2_data_master_agent:av_readdatavalid -> nios2_gen2_data_master_translator:uav_readdatavalid
	wire          nios2_gen2_data_master_translator_avalon_universal_master_0_lock;                            // nios2_gen2_data_master_translator:uav_lock -> nios2_gen2_data_master_agent:av_lock
	wire          nios2_gen2_data_master_translator_avalon_universal_master_0_write;                           // nios2_gen2_data_master_translator:uav_write -> nios2_gen2_data_master_agent:av_write
	wire   [31:0] nios2_gen2_data_master_translator_avalon_universal_master_0_writedata;                       // nios2_gen2_data_master_translator:uav_writedata -> nios2_gen2_data_master_agent:av_writedata
	wire    [2:0] nios2_gen2_data_master_translator_avalon_universal_master_0_burstcount;                      // nios2_gen2_data_master_translator:uav_burstcount -> nios2_gen2_data_master_agent:av_burstcount
	wire          nios2_gen2_instruction_master_translator_avalon_universal_master_0_waitrequest;              // nios2_gen2_instruction_master_agent:av_waitrequest -> nios2_gen2_instruction_master_translator:uav_waitrequest
	wire   [31:0] nios2_gen2_instruction_master_translator_avalon_universal_master_0_readdata;                 // nios2_gen2_instruction_master_agent:av_readdata -> nios2_gen2_instruction_master_translator:uav_readdata
	wire          nios2_gen2_instruction_master_translator_avalon_universal_master_0_debugaccess;              // nios2_gen2_instruction_master_translator:uav_debugaccess -> nios2_gen2_instruction_master_agent:av_debugaccess
	wire   [31:0] nios2_gen2_instruction_master_translator_avalon_universal_master_0_address;                  // nios2_gen2_instruction_master_translator:uav_address -> nios2_gen2_instruction_master_agent:av_address
	wire          nios2_gen2_instruction_master_translator_avalon_universal_master_0_read;                     // nios2_gen2_instruction_master_translator:uav_read -> nios2_gen2_instruction_master_agent:av_read
	wire    [3:0] nios2_gen2_instruction_master_translator_avalon_universal_master_0_byteenable;               // nios2_gen2_instruction_master_translator:uav_byteenable -> nios2_gen2_instruction_master_agent:av_byteenable
	wire          nios2_gen2_instruction_master_translator_avalon_universal_master_0_readdatavalid;            // nios2_gen2_instruction_master_agent:av_readdatavalid -> nios2_gen2_instruction_master_translator:uav_readdatavalid
	wire          nios2_gen2_instruction_master_translator_avalon_universal_master_0_lock;                     // nios2_gen2_instruction_master_translator:uav_lock -> nios2_gen2_instruction_master_agent:av_lock
	wire          nios2_gen2_instruction_master_translator_avalon_universal_master_0_write;                    // nios2_gen2_instruction_master_translator:uav_write -> nios2_gen2_instruction_master_agent:av_write
	wire   [31:0] nios2_gen2_instruction_master_translator_avalon_universal_master_0_writedata;                // nios2_gen2_instruction_master_translator:uav_writedata -> nios2_gen2_instruction_master_agent:av_writedata
	wire    [2:0] nios2_gen2_instruction_master_translator_avalon_universal_master_0_burstcount;               // nios2_gen2_instruction_master_translator:uav_burstcount -> nios2_gen2_instruction_master_agent:av_burstcount
	wire   [15:0] pixel_buffer_avalon_sram_slave_agent_m0_readdata;                                            // pixel_buffer_avalon_sram_slave_translator:uav_readdata -> pixel_buffer_avalon_sram_slave_agent:m0_readdata
	wire          pixel_buffer_avalon_sram_slave_agent_m0_waitrequest;                                         // pixel_buffer_avalon_sram_slave_translator:uav_waitrequest -> pixel_buffer_avalon_sram_slave_agent:m0_waitrequest
	wire          pixel_buffer_avalon_sram_slave_agent_m0_debugaccess;                                         // pixel_buffer_avalon_sram_slave_agent:m0_debugaccess -> pixel_buffer_avalon_sram_slave_translator:uav_debugaccess
	wire   [31:0] pixel_buffer_avalon_sram_slave_agent_m0_address;                                             // pixel_buffer_avalon_sram_slave_agent:m0_address -> pixel_buffer_avalon_sram_slave_translator:uav_address
	wire    [1:0] pixel_buffer_avalon_sram_slave_agent_m0_byteenable;                                          // pixel_buffer_avalon_sram_slave_agent:m0_byteenable -> pixel_buffer_avalon_sram_slave_translator:uav_byteenable
	wire          pixel_buffer_avalon_sram_slave_agent_m0_read;                                                // pixel_buffer_avalon_sram_slave_agent:m0_read -> pixel_buffer_avalon_sram_slave_translator:uav_read
	wire          pixel_buffer_avalon_sram_slave_agent_m0_readdatavalid;                                       // pixel_buffer_avalon_sram_slave_translator:uav_readdatavalid -> pixel_buffer_avalon_sram_slave_agent:m0_readdatavalid
	wire          pixel_buffer_avalon_sram_slave_agent_m0_lock;                                                // pixel_buffer_avalon_sram_slave_agent:m0_lock -> pixel_buffer_avalon_sram_slave_translator:uav_lock
	wire   [15:0] pixel_buffer_avalon_sram_slave_agent_m0_writedata;                                           // pixel_buffer_avalon_sram_slave_agent:m0_writedata -> pixel_buffer_avalon_sram_slave_translator:uav_writedata
	wire          pixel_buffer_avalon_sram_slave_agent_m0_write;                                               // pixel_buffer_avalon_sram_slave_agent:m0_write -> pixel_buffer_avalon_sram_slave_translator:uav_write
	wire    [1:0] pixel_buffer_avalon_sram_slave_agent_m0_burstcount;                                          // pixel_buffer_avalon_sram_slave_agent:m0_burstcount -> pixel_buffer_avalon_sram_slave_translator:uav_burstcount
	wire          pixel_buffer_avalon_sram_slave_agent_rf_source_valid;                                        // pixel_buffer_avalon_sram_slave_agent:rf_source_valid -> pixel_buffer_avalon_sram_slave_agent_rsp_fifo:in_valid
	wire   [94:0] pixel_buffer_avalon_sram_slave_agent_rf_source_data;                                         // pixel_buffer_avalon_sram_slave_agent:rf_source_data -> pixel_buffer_avalon_sram_slave_agent_rsp_fifo:in_data
	wire          pixel_buffer_avalon_sram_slave_agent_rf_source_ready;                                        // pixel_buffer_avalon_sram_slave_agent_rsp_fifo:in_ready -> pixel_buffer_avalon_sram_slave_agent:rf_source_ready
	wire          pixel_buffer_avalon_sram_slave_agent_rf_source_startofpacket;                                // pixel_buffer_avalon_sram_slave_agent:rf_source_startofpacket -> pixel_buffer_avalon_sram_slave_agent_rsp_fifo:in_startofpacket
	wire          pixel_buffer_avalon_sram_slave_agent_rf_source_endofpacket;                                  // pixel_buffer_avalon_sram_slave_agent:rf_source_endofpacket -> pixel_buffer_avalon_sram_slave_agent_rsp_fifo:in_endofpacket
	wire          pixel_buffer_avalon_sram_slave_agent_rsp_fifo_out_valid;                                     // pixel_buffer_avalon_sram_slave_agent_rsp_fifo:out_valid -> pixel_buffer_avalon_sram_slave_agent:rf_sink_valid
	wire   [94:0] pixel_buffer_avalon_sram_slave_agent_rsp_fifo_out_data;                                      // pixel_buffer_avalon_sram_slave_agent_rsp_fifo:out_data -> pixel_buffer_avalon_sram_slave_agent:rf_sink_data
	wire          pixel_buffer_avalon_sram_slave_agent_rsp_fifo_out_ready;                                     // pixel_buffer_avalon_sram_slave_agent:rf_sink_ready -> pixel_buffer_avalon_sram_slave_agent_rsp_fifo:out_ready
	wire          pixel_buffer_avalon_sram_slave_agent_rsp_fifo_out_startofpacket;                             // pixel_buffer_avalon_sram_slave_agent_rsp_fifo:out_startofpacket -> pixel_buffer_avalon_sram_slave_agent:rf_sink_startofpacket
	wire          pixel_buffer_avalon_sram_slave_agent_rsp_fifo_out_endofpacket;                               // pixel_buffer_avalon_sram_slave_agent_rsp_fifo:out_endofpacket -> pixel_buffer_avalon_sram_slave_agent:rf_sink_endofpacket
	wire          pixel_buffer_avalon_sram_slave_agent_rdata_fifo_src_valid;                                   // pixel_buffer_avalon_sram_slave_agent:rdata_fifo_src_valid -> pixel_buffer_avalon_sram_slave_agent_rdata_fifo:in_valid
	wire   [17:0] pixel_buffer_avalon_sram_slave_agent_rdata_fifo_src_data;                                    // pixel_buffer_avalon_sram_slave_agent:rdata_fifo_src_data -> pixel_buffer_avalon_sram_slave_agent_rdata_fifo:in_data
	wire          pixel_buffer_avalon_sram_slave_agent_rdata_fifo_src_ready;                                   // pixel_buffer_avalon_sram_slave_agent_rdata_fifo:in_ready -> pixel_buffer_avalon_sram_slave_agent:rdata_fifo_src_ready
	wire   [31:0] pixel_buffer_dma_avalon_control_slave_agent_m0_readdata;                                     // pixel_buffer_dma_avalon_control_slave_translator:uav_readdata -> pixel_buffer_dma_avalon_control_slave_agent:m0_readdata
	wire          pixel_buffer_dma_avalon_control_slave_agent_m0_waitrequest;                                  // pixel_buffer_dma_avalon_control_slave_translator:uav_waitrequest -> pixel_buffer_dma_avalon_control_slave_agent:m0_waitrequest
	wire          pixel_buffer_dma_avalon_control_slave_agent_m0_debugaccess;                                  // pixel_buffer_dma_avalon_control_slave_agent:m0_debugaccess -> pixel_buffer_dma_avalon_control_slave_translator:uav_debugaccess
	wire   [31:0] pixel_buffer_dma_avalon_control_slave_agent_m0_address;                                      // pixel_buffer_dma_avalon_control_slave_agent:m0_address -> pixel_buffer_dma_avalon_control_slave_translator:uav_address
	wire    [3:0] pixel_buffer_dma_avalon_control_slave_agent_m0_byteenable;                                   // pixel_buffer_dma_avalon_control_slave_agent:m0_byteenable -> pixel_buffer_dma_avalon_control_slave_translator:uav_byteenable
	wire          pixel_buffer_dma_avalon_control_slave_agent_m0_read;                                         // pixel_buffer_dma_avalon_control_slave_agent:m0_read -> pixel_buffer_dma_avalon_control_slave_translator:uav_read
	wire          pixel_buffer_dma_avalon_control_slave_agent_m0_readdatavalid;                                // pixel_buffer_dma_avalon_control_slave_translator:uav_readdatavalid -> pixel_buffer_dma_avalon_control_slave_agent:m0_readdatavalid
	wire          pixel_buffer_dma_avalon_control_slave_agent_m0_lock;                                         // pixel_buffer_dma_avalon_control_slave_agent:m0_lock -> pixel_buffer_dma_avalon_control_slave_translator:uav_lock
	wire   [31:0] pixel_buffer_dma_avalon_control_slave_agent_m0_writedata;                                    // pixel_buffer_dma_avalon_control_slave_agent:m0_writedata -> pixel_buffer_dma_avalon_control_slave_translator:uav_writedata
	wire          pixel_buffer_dma_avalon_control_slave_agent_m0_write;                                        // pixel_buffer_dma_avalon_control_slave_agent:m0_write -> pixel_buffer_dma_avalon_control_slave_translator:uav_write
	wire    [2:0] pixel_buffer_dma_avalon_control_slave_agent_m0_burstcount;                                   // pixel_buffer_dma_avalon_control_slave_agent:m0_burstcount -> pixel_buffer_dma_avalon_control_slave_translator:uav_burstcount
	wire          pixel_buffer_dma_avalon_control_slave_agent_rf_source_valid;                                 // pixel_buffer_dma_avalon_control_slave_agent:rf_source_valid -> pixel_buffer_dma_avalon_control_slave_agent_rsp_fifo:in_valid
	wire  [112:0] pixel_buffer_dma_avalon_control_slave_agent_rf_source_data;                                  // pixel_buffer_dma_avalon_control_slave_agent:rf_source_data -> pixel_buffer_dma_avalon_control_slave_agent_rsp_fifo:in_data
	wire          pixel_buffer_dma_avalon_control_slave_agent_rf_source_ready;                                 // pixel_buffer_dma_avalon_control_slave_agent_rsp_fifo:in_ready -> pixel_buffer_dma_avalon_control_slave_agent:rf_source_ready
	wire          pixel_buffer_dma_avalon_control_slave_agent_rf_source_startofpacket;                         // pixel_buffer_dma_avalon_control_slave_agent:rf_source_startofpacket -> pixel_buffer_dma_avalon_control_slave_agent_rsp_fifo:in_startofpacket
	wire          pixel_buffer_dma_avalon_control_slave_agent_rf_source_endofpacket;                           // pixel_buffer_dma_avalon_control_slave_agent:rf_source_endofpacket -> pixel_buffer_dma_avalon_control_slave_agent_rsp_fifo:in_endofpacket
	wire          pixel_buffer_dma_avalon_control_slave_agent_rsp_fifo_out_valid;                              // pixel_buffer_dma_avalon_control_slave_agent_rsp_fifo:out_valid -> pixel_buffer_dma_avalon_control_slave_agent:rf_sink_valid
	wire  [112:0] pixel_buffer_dma_avalon_control_slave_agent_rsp_fifo_out_data;                               // pixel_buffer_dma_avalon_control_slave_agent_rsp_fifo:out_data -> pixel_buffer_dma_avalon_control_slave_agent:rf_sink_data
	wire          pixel_buffer_dma_avalon_control_slave_agent_rsp_fifo_out_ready;                              // pixel_buffer_dma_avalon_control_slave_agent:rf_sink_ready -> pixel_buffer_dma_avalon_control_slave_agent_rsp_fifo:out_ready
	wire          pixel_buffer_dma_avalon_control_slave_agent_rsp_fifo_out_startofpacket;                      // pixel_buffer_dma_avalon_control_slave_agent_rsp_fifo:out_startofpacket -> pixel_buffer_dma_avalon_control_slave_agent:rf_sink_startofpacket
	wire          pixel_buffer_dma_avalon_control_slave_agent_rsp_fifo_out_endofpacket;                        // pixel_buffer_dma_avalon_control_slave_agent_rsp_fifo:out_endofpacket -> pixel_buffer_dma_avalon_control_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                                       // cmd_mux_001:src_valid -> pixel_buffer_dma_avalon_control_slave_agent:cp_valid
	wire  [111:0] cmd_mux_001_src_data;                                                                        // cmd_mux_001:src_data -> pixel_buffer_dma_avalon_control_slave_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                                       // pixel_buffer_dma_avalon_control_slave_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [20:0] cmd_mux_001_src_channel;                                                                     // cmd_mux_001:src_channel -> pixel_buffer_dma_avalon_control_slave_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                               // cmd_mux_001:src_startofpacket -> pixel_buffer_dma_avalon_control_slave_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                                 // cmd_mux_001:src_endofpacket -> pixel_buffer_dma_avalon_control_slave_agent:cp_endofpacket
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_readdata;                                               // jtag_uart_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_waitrequest;                                            // jtag_uart_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_avalon_jtag_slave_agent_m0_debugaccess;                                            // jtag_uart_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_avalon_jtag_slave_translator:uav_debugaccess
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_address;                                                // jtag_uart_avalon_jtag_slave_agent:m0_address -> jtag_uart_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_avalon_jtag_slave_agent_m0_byteenable;                                             // jtag_uart_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_avalon_jtag_slave_agent_m0_read;                                                   // jtag_uart_avalon_jtag_slave_agent:m0_read -> jtag_uart_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid;                                          // jtag_uart_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_avalon_jtag_slave_agent_m0_lock;                                                   // jtag_uart_avalon_jtag_slave_agent:m0_lock -> jtag_uart_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_writedata;                                              // jtag_uart_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_write;                                                  // jtag_uart_avalon_jtag_slave_agent:m0_write -> jtag_uart_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_avalon_jtag_slave_agent_m0_burstcount;                                             // jtag_uart_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_valid;                                           // jtag_uart_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [112:0] jtag_uart_avalon_jtag_slave_agent_rf_source_data;                                            // jtag_uart_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_ready;                                           // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket;                                   // jtag_uart_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket;                                     // jtag_uart_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid;                                        // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_avalon_jtag_slave_agent:rf_sink_valid
	wire  [112:0] jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data;                                         // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready;                                        // jtag_uart_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                                // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                                  // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                                       // cmd_mux_002:src_valid -> jtag_uart_avalon_jtag_slave_agent:cp_valid
	wire  [111:0] cmd_mux_002_src_data;                                                                        // cmd_mux_002:src_data -> jtag_uart_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                                       // jtag_uart_avalon_jtag_slave_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [20:0] cmd_mux_002_src_channel;                                                                     // cmd_mux_002:src_channel -> jtag_uart_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                               // cmd_mux_002:src_startofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                                 // cmd_mux_002:src_endofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_endofpacket
	wire   [31:0] sd_card_avalon_sdcard_slave_agent_m0_readdata;                                               // sd_card_avalon_sdcard_slave_translator:uav_readdata -> sd_card_avalon_sdcard_slave_agent:m0_readdata
	wire          sd_card_avalon_sdcard_slave_agent_m0_waitrequest;                                            // sd_card_avalon_sdcard_slave_translator:uav_waitrequest -> sd_card_avalon_sdcard_slave_agent:m0_waitrequest
	wire          sd_card_avalon_sdcard_slave_agent_m0_debugaccess;                                            // sd_card_avalon_sdcard_slave_agent:m0_debugaccess -> sd_card_avalon_sdcard_slave_translator:uav_debugaccess
	wire   [31:0] sd_card_avalon_sdcard_slave_agent_m0_address;                                                // sd_card_avalon_sdcard_slave_agent:m0_address -> sd_card_avalon_sdcard_slave_translator:uav_address
	wire    [3:0] sd_card_avalon_sdcard_slave_agent_m0_byteenable;                                             // sd_card_avalon_sdcard_slave_agent:m0_byteenable -> sd_card_avalon_sdcard_slave_translator:uav_byteenable
	wire          sd_card_avalon_sdcard_slave_agent_m0_read;                                                   // sd_card_avalon_sdcard_slave_agent:m0_read -> sd_card_avalon_sdcard_slave_translator:uav_read
	wire          sd_card_avalon_sdcard_slave_agent_m0_readdatavalid;                                          // sd_card_avalon_sdcard_slave_translator:uav_readdatavalid -> sd_card_avalon_sdcard_slave_agent:m0_readdatavalid
	wire          sd_card_avalon_sdcard_slave_agent_m0_lock;                                                   // sd_card_avalon_sdcard_slave_agent:m0_lock -> sd_card_avalon_sdcard_slave_translator:uav_lock
	wire   [31:0] sd_card_avalon_sdcard_slave_agent_m0_writedata;                                              // sd_card_avalon_sdcard_slave_agent:m0_writedata -> sd_card_avalon_sdcard_slave_translator:uav_writedata
	wire          sd_card_avalon_sdcard_slave_agent_m0_write;                                                  // sd_card_avalon_sdcard_slave_agent:m0_write -> sd_card_avalon_sdcard_slave_translator:uav_write
	wire    [2:0] sd_card_avalon_sdcard_slave_agent_m0_burstcount;                                             // sd_card_avalon_sdcard_slave_agent:m0_burstcount -> sd_card_avalon_sdcard_slave_translator:uav_burstcount
	wire          sd_card_avalon_sdcard_slave_agent_rf_source_valid;                                           // sd_card_avalon_sdcard_slave_agent:rf_source_valid -> sd_card_avalon_sdcard_slave_agent_rsp_fifo:in_valid
	wire  [112:0] sd_card_avalon_sdcard_slave_agent_rf_source_data;                                            // sd_card_avalon_sdcard_slave_agent:rf_source_data -> sd_card_avalon_sdcard_slave_agent_rsp_fifo:in_data
	wire          sd_card_avalon_sdcard_slave_agent_rf_source_ready;                                           // sd_card_avalon_sdcard_slave_agent_rsp_fifo:in_ready -> sd_card_avalon_sdcard_slave_agent:rf_source_ready
	wire          sd_card_avalon_sdcard_slave_agent_rf_source_startofpacket;                                   // sd_card_avalon_sdcard_slave_agent:rf_source_startofpacket -> sd_card_avalon_sdcard_slave_agent_rsp_fifo:in_startofpacket
	wire          sd_card_avalon_sdcard_slave_agent_rf_source_endofpacket;                                     // sd_card_avalon_sdcard_slave_agent:rf_source_endofpacket -> sd_card_avalon_sdcard_slave_agent_rsp_fifo:in_endofpacket
	wire          sd_card_avalon_sdcard_slave_agent_rsp_fifo_out_valid;                                        // sd_card_avalon_sdcard_slave_agent_rsp_fifo:out_valid -> sd_card_avalon_sdcard_slave_agent:rf_sink_valid
	wire  [112:0] sd_card_avalon_sdcard_slave_agent_rsp_fifo_out_data;                                         // sd_card_avalon_sdcard_slave_agent_rsp_fifo:out_data -> sd_card_avalon_sdcard_slave_agent:rf_sink_data
	wire          sd_card_avalon_sdcard_slave_agent_rsp_fifo_out_ready;                                        // sd_card_avalon_sdcard_slave_agent:rf_sink_ready -> sd_card_avalon_sdcard_slave_agent_rsp_fifo:out_ready
	wire          sd_card_avalon_sdcard_slave_agent_rsp_fifo_out_startofpacket;                                // sd_card_avalon_sdcard_slave_agent_rsp_fifo:out_startofpacket -> sd_card_avalon_sdcard_slave_agent:rf_sink_startofpacket
	wire          sd_card_avalon_sdcard_slave_agent_rsp_fifo_out_endofpacket;                                  // sd_card_avalon_sdcard_slave_agent_rsp_fifo:out_endofpacket -> sd_card_avalon_sdcard_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_003_src_valid;                                                                       // cmd_mux_003:src_valid -> sd_card_avalon_sdcard_slave_agent:cp_valid
	wire  [111:0] cmd_mux_003_src_data;                                                                        // cmd_mux_003:src_data -> sd_card_avalon_sdcard_slave_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                                       // sd_card_avalon_sdcard_slave_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [20:0] cmd_mux_003_src_channel;                                                                     // cmd_mux_003:src_channel -> sd_card_avalon_sdcard_slave_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                               // cmd_mux_003:src_startofpacket -> sd_card_avalon_sdcard_slave_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                                 // cmd_mux_003:src_endofpacket -> sd_card_avalon_sdcard_slave_agent:cp_endofpacket
	wire   [31:0] sysid_control_slave_agent_m0_readdata;                                                       // sysid_control_slave_translator:uav_readdata -> sysid_control_slave_agent:m0_readdata
	wire          sysid_control_slave_agent_m0_waitrequest;                                                    // sysid_control_slave_translator:uav_waitrequest -> sysid_control_slave_agent:m0_waitrequest
	wire          sysid_control_slave_agent_m0_debugaccess;                                                    // sysid_control_slave_agent:m0_debugaccess -> sysid_control_slave_translator:uav_debugaccess
	wire   [31:0] sysid_control_slave_agent_m0_address;                                                        // sysid_control_slave_agent:m0_address -> sysid_control_slave_translator:uav_address
	wire    [3:0] sysid_control_slave_agent_m0_byteenable;                                                     // sysid_control_slave_agent:m0_byteenable -> sysid_control_slave_translator:uav_byteenable
	wire          sysid_control_slave_agent_m0_read;                                                           // sysid_control_slave_agent:m0_read -> sysid_control_slave_translator:uav_read
	wire          sysid_control_slave_agent_m0_readdatavalid;                                                  // sysid_control_slave_translator:uav_readdatavalid -> sysid_control_slave_agent:m0_readdatavalid
	wire          sysid_control_slave_agent_m0_lock;                                                           // sysid_control_slave_agent:m0_lock -> sysid_control_slave_translator:uav_lock
	wire   [31:0] sysid_control_slave_agent_m0_writedata;                                                      // sysid_control_slave_agent:m0_writedata -> sysid_control_slave_translator:uav_writedata
	wire          sysid_control_slave_agent_m0_write;                                                          // sysid_control_slave_agent:m0_write -> sysid_control_slave_translator:uav_write
	wire    [2:0] sysid_control_slave_agent_m0_burstcount;                                                     // sysid_control_slave_agent:m0_burstcount -> sysid_control_slave_translator:uav_burstcount
	wire          sysid_control_slave_agent_rf_source_valid;                                                   // sysid_control_slave_agent:rf_source_valid -> sysid_control_slave_agent_rsp_fifo:in_valid
	wire  [112:0] sysid_control_slave_agent_rf_source_data;                                                    // sysid_control_slave_agent:rf_source_data -> sysid_control_slave_agent_rsp_fifo:in_data
	wire          sysid_control_slave_agent_rf_source_ready;                                                   // sysid_control_slave_agent_rsp_fifo:in_ready -> sysid_control_slave_agent:rf_source_ready
	wire          sysid_control_slave_agent_rf_source_startofpacket;                                           // sysid_control_slave_agent:rf_source_startofpacket -> sysid_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_control_slave_agent_rf_source_endofpacket;                                             // sysid_control_slave_agent:rf_source_endofpacket -> sysid_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_control_slave_agent_rsp_fifo_out_valid;                                                // sysid_control_slave_agent_rsp_fifo:out_valid -> sysid_control_slave_agent:rf_sink_valid
	wire  [112:0] sysid_control_slave_agent_rsp_fifo_out_data;                                                 // sysid_control_slave_agent_rsp_fifo:out_data -> sysid_control_slave_agent:rf_sink_data
	wire          sysid_control_slave_agent_rsp_fifo_out_ready;                                                // sysid_control_slave_agent:rf_sink_ready -> sysid_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_control_slave_agent_rsp_fifo_out_startofpacket;                                        // sysid_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_control_slave_agent:rf_sink_startofpacket
	wire          sysid_control_slave_agent_rsp_fifo_out_endofpacket;                                          // sysid_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_control_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_004_src_valid;                                                                       // cmd_mux_004:src_valid -> sysid_control_slave_agent:cp_valid
	wire  [111:0] cmd_mux_004_src_data;                                                                        // cmd_mux_004:src_data -> sysid_control_slave_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                                       // sysid_control_slave_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [20:0] cmd_mux_004_src_channel;                                                                     // cmd_mux_004:src_channel -> sysid_control_slave_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                               // cmd_mux_004:src_startofpacket -> sysid_control_slave_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                                 // cmd_mux_004:src_endofpacket -> sysid_control_slave_agent:cp_endofpacket
	wire   [31:0] nios2_gen2_debug_mem_slave_agent_m0_readdata;                                                // nios2_gen2_debug_mem_slave_translator:uav_readdata -> nios2_gen2_debug_mem_slave_agent:m0_readdata
	wire          nios2_gen2_debug_mem_slave_agent_m0_waitrequest;                                             // nios2_gen2_debug_mem_slave_translator:uav_waitrequest -> nios2_gen2_debug_mem_slave_agent:m0_waitrequest
	wire          nios2_gen2_debug_mem_slave_agent_m0_debugaccess;                                             // nios2_gen2_debug_mem_slave_agent:m0_debugaccess -> nios2_gen2_debug_mem_slave_translator:uav_debugaccess
	wire   [31:0] nios2_gen2_debug_mem_slave_agent_m0_address;                                                 // nios2_gen2_debug_mem_slave_agent:m0_address -> nios2_gen2_debug_mem_slave_translator:uav_address
	wire    [3:0] nios2_gen2_debug_mem_slave_agent_m0_byteenable;                                              // nios2_gen2_debug_mem_slave_agent:m0_byteenable -> nios2_gen2_debug_mem_slave_translator:uav_byteenable
	wire          nios2_gen2_debug_mem_slave_agent_m0_read;                                                    // nios2_gen2_debug_mem_slave_agent:m0_read -> nios2_gen2_debug_mem_slave_translator:uav_read
	wire          nios2_gen2_debug_mem_slave_agent_m0_readdatavalid;                                           // nios2_gen2_debug_mem_slave_translator:uav_readdatavalid -> nios2_gen2_debug_mem_slave_agent:m0_readdatavalid
	wire          nios2_gen2_debug_mem_slave_agent_m0_lock;                                                    // nios2_gen2_debug_mem_slave_agent:m0_lock -> nios2_gen2_debug_mem_slave_translator:uav_lock
	wire   [31:0] nios2_gen2_debug_mem_slave_agent_m0_writedata;                                               // nios2_gen2_debug_mem_slave_agent:m0_writedata -> nios2_gen2_debug_mem_slave_translator:uav_writedata
	wire          nios2_gen2_debug_mem_slave_agent_m0_write;                                                   // nios2_gen2_debug_mem_slave_agent:m0_write -> nios2_gen2_debug_mem_slave_translator:uav_write
	wire    [2:0] nios2_gen2_debug_mem_slave_agent_m0_burstcount;                                              // nios2_gen2_debug_mem_slave_agent:m0_burstcount -> nios2_gen2_debug_mem_slave_translator:uav_burstcount
	wire          nios2_gen2_debug_mem_slave_agent_rf_source_valid;                                            // nios2_gen2_debug_mem_slave_agent:rf_source_valid -> nios2_gen2_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [112:0] nios2_gen2_debug_mem_slave_agent_rf_source_data;                                             // nios2_gen2_debug_mem_slave_agent:rf_source_data -> nios2_gen2_debug_mem_slave_agent_rsp_fifo:in_data
	wire          nios2_gen2_debug_mem_slave_agent_rf_source_ready;                                            // nios2_gen2_debug_mem_slave_agent_rsp_fifo:in_ready -> nios2_gen2_debug_mem_slave_agent:rf_source_ready
	wire          nios2_gen2_debug_mem_slave_agent_rf_source_startofpacket;                                    // nios2_gen2_debug_mem_slave_agent:rf_source_startofpacket -> nios2_gen2_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          nios2_gen2_debug_mem_slave_agent_rf_source_endofpacket;                                      // nios2_gen2_debug_mem_slave_agent:rf_source_endofpacket -> nios2_gen2_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_valid;                                         // nios2_gen2_debug_mem_slave_agent_rsp_fifo:out_valid -> nios2_gen2_debug_mem_slave_agent:rf_sink_valid
	wire  [112:0] nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_data;                                          // nios2_gen2_debug_mem_slave_agent_rsp_fifo:out_data -> nios2_gen2_debug_mem_slave_agent:rf_sink_data
	wire          nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_ready;                                         // nios2_gen2_debug_mem_slave_agent:rf_sink_ready -> nios2_gen2_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                                 // nios2_gen2_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> nios2_gen2_debug_mem_slave_agent:rf_sink_startofpacket
	wire          nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                                   // nios2_gen2_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> nios2_gen2_debug_mem_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_005_src_valid;                                                                       // cmd_mux_005:src_valid -> nios2_gen2_debug_mem_slave_agent:cp_valid
	wire  [111:0] cmd_mux_005_src_data;                                                                        // cmd_mux_005:src_data -> nios2_gen2_debug_mem_slave_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                                       // nios2_gen2_debug_mem_slave_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [20:0] cmd_mux_005_src_channel;                                                                     // cmd_mux_005:src_channel -> nios2_gen2_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                               // cmd_mux_005:src_startofpacket -> nios2_gen2_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                                 // cmd_mux_005:src_endofpacket -> nios2_gen2_debug_mem_slave_agent:cp_endofpacket
	wire   [31:0] altpll_pll_slave_agent_m0_readdata;                                                          // altpll_pll_slave_translator:uav_readdata -> altpll_pll_slave_agent:m0_readdata
	wire          altpll_pll_slave_agent_m0_waitrequest;                                                       // altpll_pll_slave_translator:uav_waitrequest -> altpll_pll_slave_agent:m0_waitrequest
	wire          altpll_pll_slave_agent_m0_debugaccess;                                                       // altpll_pll_slave_agent:m0_debugaccess -> altpll_pll_slave_translator:uav_debugaccess
	wire   [31:0] altpll_pll_slave_agent_m0_address;                                                           // altpll_pll_slave_agent:m0_address -> altpll_pll_slave_translator:uav_address
	wire    [3:0] altpll_pll_slave_agent_m0_byteenable;                                                        // altpll_pll_slave_agent:m0_byteenable -> altpll_pll_slave_translator:uav_byteenable
	wire          altpll_pll_slave_agent_m0_read;                                                              // altpll_pll_slave_agent:m0_read -> altpll_pll_slave_translator:uav_read
	wire          altpll_pll_slave_agent_m0_readdatavalid;                                                     // altpll_pll_slave_translator:uav_readdatavalid -> altpll_pll_slave_agent:m0_readdatavalid
	wire          altpll_pll_slave_agent_m0_lock;                                                              // altpll_pll_slave_agent:m0_lock -> altpll_pll_slave_translator:uav_lock
	wire   [31:0] altpll_pll_slave_agent_m0_writedata;                                                         // altpll_pll_slave_agent:m0_writedata -> altpll_pll_slave_translator:uav_writedata
	wire          altpll_pll_slave_agent_m0_write;                                                             // altpll_pll_slave_agent:m0_write -> altpll_pll_slave_translator:uav_write
	wire    [2:0] altpll_pll_slave_agent_m0_burstcount;                                                        // altpll_pll_slave_agent:m0_burstcount -> altpll_pll_slave_translator:uav_burstcount
	wire          altpll_pll_slave_agent_rf_source_valid;                                                      // altpll_pll_slave_agent:rf_source_valid -> altpll_pll_slave_agent_rsp_fifo:in_valid
	wire  [112:0] altpll_pll_slave_agent_rf_source_data;                                                       // altpll_pll_slave_agent:rf_source_data -> altpll_pll_slave_agent_rsp_fifo:in_data
	wire          altpll_pll_slave_agent_rf_source_ready;                                                      // altpll_pll_slave_agent_rsp_fifo:in_ready -> altpll_pll_slave_agent:rf_source_ready
	wire          altpll_pll_slave_agent_rf_source_startofpacket;                                              // altpll_pll_slave_agent:rf_source_startofpacket -> altpll_pll_slave_agent_rsp_fifo:in_startofpacket
	wire          altpll_pll_slave_agent_rf_source_endofpacket;                                                // altpll_pll_slave_agent:rf_source_endofpacket -> altpll_pll_slave_agent_rsp_fifo:in_endofpacket
	wire          altpll_pll_slave_agent_rsp_fifo_out_valid;                                                   // altpll_pll_slave_agent_rsp_fifo:out_valid -> altpll_pll_slave_agent:rf_sink_valid
	wire  [112:0] altpll_pll_slave_agent_rsp_fifo_out_data;                                                    // altpll_pll_slave_agent_rsp_fifo:out_data -> altpll_pll_slave_agent:rf_sink_data
	wire          altpll_pll_slave_agent_rsp_fifo_out_ready;                                                   // altpll_pll_slave_agent:rf_sink_ready -> altpll_pll_slave_agent_rsp_fifo:out_ready
	wire          altpll_pll_slave_agent_rsp_fifo_out_startofpacket;                                           // altpll_pll_slave_agent_rsp_fifo:out_startofpacket -> altpll_pll_slave_agent:rf_sink_startofpacket
	wire          altpll_pll_slave_agent_rsp_fifo_out_endofpacket;                                             // altpll_pll_slave_agent_rsp_fifo:out_endofpacket -> altpll_pll_slave_agent:rf_sink_endofpacket
	wire          altpll_pll_slave_agent_rdata_fifo_src_valid;                                                 // altpll_pll_slave_agent:rdata_fifo_src_valid -> altpll_pll_slave_agent_rdata_fifo:in_valid
	wire   [33:0] altpll_pll_slave_agent_rdata_fifo_src_data;                                                  // altpll_pll_slave_agent:rdata_fifo_src_data -> altpll_pll_slave_agent_rdata_fifo:in_data
	wire          altpll_pll_slave_agent_rdata_fifo_src_ready;                                                 // altpll_pll_slave_agent_rdata_fifo:in_ready -> altpll_pll_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_006_src_valid;                                                                       // cmd_mux_006:src_valid -> altpll_pll_slave_agent:cp_valid
	wire  [111:0] cmd_mux_006_src_data;                                                                        // cmd_mux_006:src_data -> altpll_pll_slave_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                                       // altpll_pll_slave_agent:cp_ready -> cmd_mux_006:src_ready
	wire   [20:0] cmd_mux_006_src_channel;                                                                     // cmd_mux_006:src_channel -> altpll_pll_slave_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                                               // cmd_mux_006:src_startofpacket -> altpll_pll_slave_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                                 // cmd_mux_006:src_endofpacket -> altpll_pll_slave_agent:cp_endofpacket
	wire   [31:0] sdram_s1_agent_m0_readdata;                                                                  // sdram_s1_translator:uav_readdata -> sdram_s1_agent:m0_readdata
	wire          sdram_s1_agent_m0_waitrequest;                                                               // sdram_s1_translator:uav_waitrequest -> sdram_s1_agent:m0_waitrequest
	wire          sdram_s1_agent_m0_debugaccess;                                                               // sdram_s1_agent:m0_debugaccess -> sdram_s1_translator:uav_debugaccess
	wire   [31:0] sdram_s1_agent_m0_address;                                                                   // sdram_s1_agent:m0_address -> sdram_s1_translator:uav_address
	wire    [3:0] sdram_s1_agent_m0_byteenable;                                                                // sdram_s1_agent:m0_byteenable -> sdram_s1_translator:uav_byteenable
	wire          sdram_s1_agent_m0_read;                                                                      // sdram_s1_agent:m0_read -> sdram_s1_translator:uav_read
	wire          sdram_s1_agent_m0_readdatavalid;                                                             // sdram_s1_translator:uav_readdatavalid -> sdram_s1_agent:m0_readdatavalid
	wire          sdram_s1_agent_m0_lock;                                                                      // sdram_s1_agent:m0_lock -> sdram_s1_translator:uav_lock
	wire   [31:0] sdram_s1_agent_m0_writedata;                                                                 // sdram_s1_agent:m0_writedata -> sdram_s1_translator:uav_writedata
	wire          sdram_s1_agent_m0_write;                                                                     // sdram_s1_agent:m0_write -> sdram_s1_translator:uav_write
	wire    [2:0] sdram_s1_agent_m0_burstcount;                                                                // sdram_s1_agent:m0_burstcount -> sdram_s1_translator:uav_burstcount
	wire          sdram_s1_agent_rf_source_valid;                                                              // sdram_s1_agent:rf_source_valid -> sdram_s1_agent_rsp_fifo:in_valid
	wire  [112:0] sdram_s1_agent_rf_source_data;                                                               // sdram_s1_agent:rf_source_data -> sdram_s1_agent_rsp_fifo:in_data
	wire          sdram_s1_agent_rf_source_ready;                                                              // sdram_s1_agent_rsp_fifo:in_ready -> sdram_s1_agent:rf_source_ready
	wire          sdram_s1_agent_rf_source_startofpacket;                                                      // sdram_s1_agent:rf_source_startofpacket -> sdram_s1_agent_rsp_fifo:in_startofpacket
	wire          sdram_s1_agent_rf_source_endofpacket;                                                        // sdram_s1_agent:rf_source_endofpacket -> sdram_s1_agent_rsp_fifo:in_endofpacket
	wire          sdram_s1_agent_rsp_fifo_out_valid;                                                           // sdram_s1_agent_rsp_fifo:out_valid -> sdram_s1_agent:rf_sink_valid
	wire  [112:0] sdram_s1_agent_rsp_fifo_out_data;                                                            // sdram_s1_agent_rsp_fifo:out_data -> sdram_s1_agent:rf_sink_data
	wire          sdram_s1_agent_rsp_fifo_out_ready;                                                           // sdram_s1_agent:rf_sink_ready -> sdram_s1_agent_rsp_fifo:out_ready
	wire          sdram_s1_agent_rsp_fifo_out_startofpacket;                                                   // sdram_s1_agent_rsp_fifo:out_startofpacket -> sdram_s1_agent:rf_sink_startofpacket
	wire          sdram_s1_agent_rsp_fifo_out_endofpacket;                                                     // sdram_s1_agent_rsp_fifo:out_endofpacket -> sdram_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_007_src_valid;                                                                       // cmd_mux_007:src_valid -> sdram_s1_agent:cp_valid
	wire  [111:0] cmd_mux_007_src_data;                                                                        // cmd_mux_007:src_data -> sdram_s1_agent:cp_data
	wire          cmd_mux_007_src_ready;                                                                       // sdram_s1_agent:cp_ready -> cmd_mux_007:src_ready
	wire   [20:0] cmd_mux_007_src_channel;                                                                     // cmd_mux_007:src_channel -> sdram_s1_agent:cp_channel
	wire          cmd_mux_007_src_startofpacket;                                                               // cmd_mux_007:src_startofpacket -> sdram_s1_agent:cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                                 // cmd_mux_007:src_endofpacket -> sdram_s1_agent:cp_endofpacket
	wire   [31:0] timer_s1_agent_m0_readdata;                                                                  // timer_s1_translator:uav_readdata -> timer_s1_agent:m0_readdata
	wire          timer_s1_agent_m0_waitrequest;                                                               // timer_s1_translator:uav_waitrequest -> timer_s1_agent:m0_waitrequest
	wire          timer_s1_agent_m0_debugaccess;                                                               // timer_s1_agent:m0_debugaccess -> timer_s1_translator:uav_debugaccess
	wire   [31:0] timer_s1_agent_m0_address;                                                                   // timer_s1_agent:m0_address -> timer_s1_translator:uav_address
	wire    [3:0] timer_s1_agent_m0_byteenable;                                                                // timer_s1_agent:m0_byteenable -> timer_s1_translator:uav_byteenable
	wire          timer_s1_agent_m0_read;                                                                      // timer_s1_agent:m0_read -> timer_s1_translator:uav_read
	wire          timer_s1_agent_m0_readdatavalid;                                                             // timer_s1_translator:uav_readdatavalid -> timer_s1_agent:m0_readdatavalid
	wire          timer_s1_agent_m0_lock;                                                                      // timer_s1_agent:m0_lock -> timer_s1_translator:uav_lock
	wire   [31:0] timer_s1_agent_m0_writedata;                                                                 // timer_s1_agent:m0_writedata -> timer_s1_translator:uav_writedata
	wire          timer_s1_agent_m0_write;                                                                     // timer_s1_agent:m0_write -> timer_s1_translator:uav_write
	wire    [2:0] timer_s1_agent_m0_burstcount;                                                                // timer_s1_agent:m0_burstcount -> timer_s1_translator:uav_burstcount
	wire          timer_s1_agent_rf_source_valid;                                                              // timer_s1_agent:rf_source_valid -> timer_s1_agent_rsp_fifo:in_valid
	wire  [112:0] timer_s1_agent_rf_source_data;                                                               // timer_s1_agent:rf_source_data -> timer_s1_agent_rsp_fifo:in_data
	wire          timer_s1_agent_rf_source_ready;                                                              // timer_s1_agent_rsp_fifo:in_ready -> timer_s1_agent:rf_source_ready
	wire          timer_s1_agent_rf_source_startofpacket;                                                      // timer_s1_agent:rf_source_startofpacket -> timer_s1_agent_rsp_fifo:in_startofpacket
	wire          timer_s1_agent_rf_source_endofpacket;                                                        // timer_s1_agent:rf_source_endofpacket -> timer_s1_agent_rsp_fifo:in_endofpacket
	wire          timer_s1_agent_rsp_fifo_out_valid;                                                           // timer_s1_agent_rsp_fifo:out_valid -> timer_s1_agent:rf_sink_valid
	wire  [112:0] timer_s1_agent_rsp_fifo_out_data;                                                            // timer_s1_agent_rsp_fifo:out_data -> timer_s1_agent:rf_sink_data
	wire          timer_s1_agent_rsp_fifo_out_ready;                                                           // timer_s1_agent:rf_sink_ready -> timer_s1_agent_rsp_fifo:out_ready
	wire          timer_s1_agent_rsp_fifo_out_startofpacket;                                                   // timer_s1_agent_rsp_fifo:out_startofpacket -> timer_s1_agent:rf_sink_startofpacket
	wire          timer_s1_agent_rsp_fifo_out_endofpacket;                                                     // timer_s1_agent_rsp_fifo:out_endofpacket -> timer_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_008_src_valid;                                                                       // cmd_mux_008:src_valid -> timer_s1_agent:cp_valid
	wire  [111:0] cmd_mux_008_src_data;                                                                        // cmd_mux_008:src_data -> timer_s1_agent:cp_data
	wire          cmd_mux_008_src_ready;                                                                       // timer_s1_agent:cp_ready -> cmd_mux_008:src_ready
	wire   [20:0] cmd_mux_008_src_channel;                                                                     // cmd_mux_008:src_channel -> timer_s1_agent:cp_channel
	wire          cmd_mux_008_src_startofpacket;                                                               // cmd_mux_008:src_startofpacket -> timer_s1_agent:cp_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                                 // cmd_mux_008:src_endofpacket -> timer_s1_agent:cp_endofpacket
	wire   [31:0] wifi_uart_s1_agent_m0_readdata;                                                              // wifi_uart_s1_translator:uav_readdata -> wifi_uart_s1_agent:m0_readdata
	wire          wifi_uart_s1_agent_m0_waitrequest;                                                           // wifi_uart_s1_translator:uav_waitrequest -> wifi_uart_s1_agent:m0_waitrequest
	wire          wifi_uart_s1_agent_m0_debugaccess;                                                           // wifi_uart_s1_agent:m0_debugaccess -> wifi_uart_s1_translator:uav_debugaccess
	wire   [31:0] wifi_uart_s1_agent_m0_address;                                                               // wifi_uart_s1_agent:m0_address -> wifi_uart_s1_translator:uav_address
	wire    [3:0] wifi_uart_s1_agent_m0_byteenable;                                                            // wifi_uart_s1_agent:m0_byteenable -> wifi_uart_s1_translator:uav_byteenable
	wire          wifi_uart_s1_agent_m0_read;                                                                  // wifi_uart_s1_agent:m0_read -> wifi_uart_s1_translator:uav_read
	wire          wifi_uart_s1_agent_m0_readdatavalid;                                                         // wifi_uart_s1_translator:uav_readdatavalid -> wifi_uart_s1_agent:m0_readdatavalid
	wire          wifi_uart_s1_agent_m0_lock;                                                                  // wifi_uart_s1_agent:m0_lock -> wifi_uart_s1_translator:uav_lock
	wire   [31:0] wifi_uart_s1_agent_m0_writedata;                                                             // wifi_uart_s1_agent:m0_writedata -> wifi_uart_s1_translator:uav_writedata
	wire          wifi_uart_s1_agent_m0_write;                                                                 // wifi_uart_s1_agent:m0_write -> wifi_uart_s1_translator:uav_write
	wire    [2:0] wifi_uart_s1_agent_m0_burstcount;                                                            // wifi_uart_s1_agent:m0_burstcount -> wifi_uart_s1_translator:uav_burstcount
	wire          wifi_uart_s1_agent_rf_source_valid;                                                          // wifi_uart_s1_agent:rf_source_valid -> wifi_uart_s1_agent_rsp_fifo:in_valid
	wire  [112:0] wifi_uart_s1_agent_rf_source_data;                                                           // wifi_uart_s1_agent:rf_source_data -> wifi_uart_s1_agent_rsp_fifo:in_data
	wire          wifi_uart_s1_agent_rf_source_ready;                                                          // wifi_uart_s1_agent_rsp_fifo:in_ready -> wifi_uart_s1_agent:rf_source_ready
	wire          wifi_uart_s1_agent_rf_source_startofpacket;                                                  // wifi_uart_s1_agent:rf_source_startofpacket -> wifi_uart_s1_agent_rsp_fifo:in_startofpacket
	wire          wifi_uart_s1_agent_rf_source_endofpacket;                                                    // wifi_uart_s1_agent:rf_source_endofpacket -> wifi_uart_s1_agent_rsp_fifo:in_endofpacket
	wire          wifi_uart_s1_agent_rsp_fifo_out_valid;                                                       // wifi_uart_s1_agent_rsp_fifo:out_valid -> wifi_uart_s1_agent:rf_sink_valid
	wire  [112:0] wifi_uart_s1_agent_rsp_fifo_out_data;                                                        // wifi_uart_s1_agent_rsp_fifo:out_data -> wifi_uart_s1_agent:rf_sink_data
	wire          wifi_uart_s1_agent_rsp_fifo_out_ready;                                                       // wifi_uart_s1_agent:rf_sink_ready -> wifi_uart_s1_agent_rsp_fifo:out_ready
	wire          wifi_uart_s1_agent_rsp_fifo_out_startofpacket;                                               // wifi_uart_s1_agent_rsp_fifo:out_startofpacket -> wifi_uart_s1_agent:rf_sink_startofpacket
	wire          wifi_uart_s1_agent_rsp_fifo_out_endofpacket;                                                 // wifi_uart_s1_agent_rsp_fifo:out_endofpacket -> wifi_uart_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_009_src_valid;                                                                       // cmd_mux_009:src_valid -> wifi_uart_s1_agent:cp_valid
	wire  [111:0] cmd_mux_009_src_data;                                                                        // cmd_mux_009:src_data -> wifi_uart_s1_agent:cp_data
	wire          cmd_mux_009_src_ready;                                                                       // wifi_uart_s1_agent:cp_ready -> cmd_mux_009:src_ready
	wire   [20:0] cmd_mux_009_src_channel;                                                                     // cmd_mux_009:src_channel -> wifi_uart_s1_agent:cp_channel
	wire          cmd_mux_009_src_startofpacket;                                                               // cmd_mux_009:src_startofpacket -> wifi_uart_s1_agent:cp_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                                 // cmd_mux_009:src_endofpacket -> wifi_uart_s1_agent:cp_endofpacket
	wire   [31:0] pio_wifi_reset_s1_agent_m0_readdata;                                                         // pio_wifi_reset_s1_translator:uav_readdata -> pio_wifi_reset_s1_agent:m0_readdata
	wire          pio_wifi_reset_s1_agent_m0_waitrequest;                                                      // pio_wifi_reset_s1_translator:uav_waitrequest -> pio_wifi_reset_s1_agent:m0_waitrequest
	wire          pio_wifi_reset_s1_agent_m0_debugaccess;                                                      // pio_wifi_reset_s1_agent:m0_debugaccess -> pio_wifi_reset_s1_translator:uav_debugaccess
	wire   [31:0] pio_wifi_reset_s1_agent_m0_address;                                                          // pio_wifi_reset_s1_agent:m0_address -> pio_wifi_reset_s1_translator:uav_address
	wire    [3:0] pio_wifi_reset_s1_agent_m0_byteenable;                                                       // pio_wifi_reset_s1_agent:m0_byteenable -> pio_wifi_reset_s1_translator:uav_byteenable
	wire          pio_wifi_reset_s1_agent_m0_read;                                                             // pio_wifi_reset_s1_agent:m0_read -> pio_wifi_reset_s1_translator:uav_read
	wire          pio_wifi_reset_s1_agent_m0_readdatavalid;                                                    // pio_wifi_reset_s1_translator:uav_readdatavalid -> pio_wifi_reset_s1_agent:m0_readdatavalid
	wire          pio_wifi_reset_s1_agent_m0_lock;                                                             // pio_wifi_reset_s1_agent:m0_lock -> pio_wifi_reset_s1_translator:uav_lock
	wire   [31:0] pio_wifi_reset_s1_agent_m0_writedata;                                                        // pio_wifi_reset_s1_agent:m0_writedata -> pio_wifi_reset_s1_translator:uav_writedata
	wire          pio_wifi_reset_s1_agent_m0_write;                                                            // pio_wifi_reset_s1_agent:m0_write -> pio_wifi_reset_s1_translator:uav_write
	wire    [2:0] pio_wifi_reset_s1_agent_m0_burstcount;                                                       // pio_wifi_reset_s1_agent:m0_burstcount -> pio_wifi_reset_s1_translator:uav_burstcount
	wire          pio_wifi_reset_s1_agent_rf_source_valid;                                                     // pio_wifi_reset_s1_agent:rf_source_valid -> pio_wifi_reset_s1_agent_rsp_fifo:in_valid
	wire  [112:0] pio_wifi_reset_s1_agent_rf_source_data;                                                      // pio_wifi_reset_s1_agent:rf_source_data -> pio_wifi_reset_s1_agent_rsp_fifo:in_data
	wire          pio_wifi_reset_s1_agent_rf_source_ready;                                                     // pio_wifi_reset_s1_agent_rsp_fifo:in_ready -> pio_wifi_reset_s1_agent:rf_source_ready
	wire          pio_wifi_reset_s1_agent_rf_source_startofpacket;                                             // pio_wifi_reset_s1_agent:rf_source_startofpacket -> pio_wifi_reset_s1_agent_rsp_fifo:in_startofpacket
	wire          pio_wifi_reset_s1_agent_rf_source_endofpacket;                                               // pio_wifi_reset_s1_agent:rf_source_endofpacket -> pio_wifi_reset_s1_agent_rsp_fifo:in_endofpacket
	wire          pio_wifi_reset_s1_agent_rsp_fifo_out_valid;                                                  // pio_wifi_reset_s1_agent_rsp_fifo:out_valid -> pio_wifi_reset_s1_agent:rf_sink_valid
	wire  [112:0] pio_wifi_reset_s1_agent_rsp_fifo_out_data;                                                   // pio_wifi_reset_s1_agent_rsp_fifo:out_data -> pio_wifi_reset_s1_agent:rf_sink_data
	wire          pio_wifi_reset_s1_agent_rsp_fifo_out_ready;                                                  // pio_wifi_reset_s1_agent:rf_sink_ready -> pio_wifi_reset_s1_agent_rsp_fifo:out_ready
	wire          pio_wifi_reset_s1_agent_rsp_fifo_out_startofpacket;                                          // pio_wifi_reset_s1_agent_rsp_fifo:out_startofpacket -> pio_wifi_reset_s1_agent:rf_sink_startofpacket
	wire          pio_wifi_reset_s1_agent_rsp_fifo_out_endofpacket;                                            // pio_wifi_reset_s1_agent_rsp_fifo:out_endofpacket -> pio_wifi_reset_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_010_src_valid;                                                                       // cmd_mux_010:src_valid -> pio_wifi_reset_s1_agent:cp_valid
	wire  [111:0] cmd_mux_010_src_data;                                                                        // cmd_mux_010:src_data -> pio_wifi_reset_s1_agent:cp_data
	wire          cmd_mux_010_src_ready;                                                                       // pio_wifi_reset_s1_agent:cp_ready -> cmd_mux_010:src_ready
	wire   [20:0] cmd_mux_010_src_channel;                                                                     // cmd_mux_010:src_channel -> pio_wifi_reset_s1_agent:cp_channel
	wire          cmd_mux_010_src_startofpacket;                                                               // cmd_mux_010:src_startofpacket -> pio_wifi_reset_s1_agent:cp_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                                 // cmd_mux_010:src_endofpacket -> pio_wifi_reset_s1_agent:cp_endofpacket
	wire   [31:0] pio_led_s1_agent_m0_readdata;                                                                // pio_led_s1_translator:uav_readdata -> pio_led_s1_agent:m0_readdata
	wire          pio_led_s1_agent_m0_waitrequest;                                                             // pio_led_s1_translator:uav_waitrequest -> pio_led_s1_agent:m0_waitrequest
	wire          pio_led_s1_agent_m0_debugaccess;                                                             // pio_led_s1_agent:m0_debugaccess -> pio_led_s1_translator:uav_debugaccess
	wire   [31:0] pio_led_s1_agent_m0_address;                                                                 // pio_led_s1_agent:m0_address -> pio_led_s1_translator:uav_address
	wire    [3:0] pio_led_s1_agent_m0_byteenable;                                                              // pio_led_s1_agent:m0_byteenable -> pio_led_s1_translator:uav_byteenable
	wire          pio_led_s1_agent_m0_read;                                                                    // pio_led_s1_agent:m0_read -> pio_led_s1_translator:uav_read
	wire          pio_led_s1_agent_m0_readdatavalid;                                                           // pio_led_s1_translator:uav_readdatavalid -> pio_led_s1_agent:m0_readdatavalid
	wire          pio_led_s1_agent_m0_lock;                                                                    // pio_led_s1_agent:m0_lock -> pio_led_s1_translator:uav_lock
	wire   [31:0] pio_led_s1_agent_m0_writedata;                                                               // pio_led_s1_agent:m0_writedata -> pio_led_s1_translator:uav_writedata
	wire          pio_led_s1_agent_m0_write;                                                                   // pio_led_s1_agent:m0_write -> pio_led_s1_translator:uav_write
	wire    [2:0] pio_led_s1_agent_m0_burstcount;                                                              // pio_led_s1_agent:m0_burstcount -> pio_led_s1_translator:uav_burstcount
	wire          pio_led_s1_agent_rf_source_valid;                                                            // pio_led_s1_agent:rf_source_valid -> pio_led_s1_agent_rsp_fifo:in_valid
	wire  [112:0] pio_led_s1_agent_rf_source_data;                                                             // pio_led_s1_agent:rf_source_data -> pio_led_s1_agent_rsp_fifo:in_data
	wire          pio_led_s1_agent_rf_source_ready;                                                            // pio_led_s1_agent_rsp_fifo:in_ready -> pio_led_s1_agent:rf_source_ready
	wire          pio_led_s1_agent_rf_source_startofpacket;                                                    // pio_led_s1_agent:rf_source_startofpacket -> pio_led_s1_agent_rsp_fifo:in_startofpacket
	wire          pio_led_s1_agent_rf_source_endofpacket;                                                      // pio_led_s1_agent:rf_source_endofpacket -> pio_led_s1_agent_rsp_fifo:in_endofpacket
	wire          pio_led_s1_agent_rsp_fifo_out_valid;                                                         // pio_led_s1_agent_rsp_fifo:out_valid -> pio_led_s1_agent:rf_sink_valid
	wire  [112:0] pio_led_s1_agent_rsp_fifo_out_data;                                                          // pio_led_s1_agent_rsp_fifo:out_data -> pio_led_s1_agent:rf_sink_data
	wire          pio_led_s1_agent_rsp_fifo_out_ready;                                                         // pio_led_s1_agent:rf_sink_ready -> pio_led_s1_agent_rsp_fifo:out_ready
	wire          pio_led_s1_agent_rsp_fifo_out_startofpacket;                                                 // pio_led_s1_agent_rsp_fifo:out_startofpacket -> pio_led_s1_agent:rf_sink_startofpacket
	wire          pio_led_s1_agent_rsp_fifo_out_endofpacket;                                                   // pio_led_s1_agent_rsp_fifo:out_endofpacket -> pio_led_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_011_src_valid;                                                                       // cmd_mux_011:src_valid -> pio_led_s1_agent:cp_valid
	wire  [111:0] cmd_mux_011_src_data;                                                                        // cmd_mux_011:src_data -> pio_led_s1_agent:cp_data
	wire          cmd_mux_011_src_ready;                                                                       // pio_led_s1_agent:cp_ready -> cmd_mux_011:src_ready
	wire   [20:0] cmd_mux_011_src_channel;                                                                     // cmd_mux_011:src_channel -> pio_led_s1_agent:cp_channel
	wire          cmd_mux_011_src_startofpacket;                                                               // cmd_mux_011:src_startofpacket -> pio_led_s1_agent:cp_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                                 // cmd_mux_011:src_endofpacket -> pio_led_s1_agent:cp_endofpacket
	wire   [31:0] pio_key_s1_agent_m0_readdata;                                                                // pio_key_s1_translator:uav_readdata -> pio_key_s1_agent:m0_readdata
	wire          pio_key_s1_agent_m0_waitrequest;                                                             // pio_key_s1_translator:uav_waitrequest -> pio_key_s1_agent:m0_waitrequest
	wire          pio_key_s1_agent_m0_debugaccess;                                                             // pio_key_s1_agent:m0_debugaccess -> pio_key_s1_translator:uav_debugaccess
	wire   [31:0] pio_key_s1_agent_m0_address;                                                                 // pio_key_s1_agent:m0_address -> pio_key_s1_translator:uav_address
	wire    [3:0] pio_key_s1_agent_m0_byteenable;                                                              // pio_key_s1_agent:m0_byteenable -> pio_key_s1_translator:uav_byteenable
	wire          pio_key_s1_agent_m0_read;                                                                    // pio_key_s1_agent:m0_read -> pio_key_s1_translator:uav_read
	wire          pio_key_s1_agent_m0_readdatavalid;                                                           // pio_key_s1_translator:uav_readdatavalid -> pio_key_s1_agent:m0_readdatavalid
	wire          pio_key_s1_agent_m0_lock;                                                                    // pio_key_s1_agent:m0_lock -> pio_key_s1_translator:uav_lock
	wire   [31:0] pio_key_s1_agent_m0_writedata;                                                               // pio_key_s1_agent:m0_writedata -> pio_key_s1_translator:uav_writedata
	wire          pio_key_s1_agent_m0_write;                                                                   // pio_key_s1_agent:m0_write -> pio_key_s1_translator:uav_write
	wire    [2:0] pio_key_s1_agent_m0_burstcount;                                                              // pio_key_s1_agent:m0_burstcount -> pio_key_s1_translator:uav_burstcount
	wire          pio_key_s1_agent_rf_source_valid;                                                            // pio_key_s1_agent:rf_source_valid -> pio_key_s1_agent_rsp_fifo:in_valid
	wire  [112:0] pio_key_s1_agent_rf_source_data;                                                             // pio_key_s1_agent:rf_source_data -> pio_key_s1_agent_rsp_fifo:in_data
	wire          pio_key_s1_agent_rf_source_ready;                                                            // pio_key_s1_agent_rsp_fifo:in_ready -> pio_key_s1_agent:rf_source_ready
	wire          pio_key_s1_agent_rf_source_startofpacket;                                                    // pio_key_s1_agent:rf_source_startofpacket -> pio_key_s1_agent_rsp_fifo:in_startofpacket
	wire          pio_key_s1_agent_rf_source_endofpacket;                                                      // pio_key_s1_agent:rf_source_endofpacket -> pio_key_s1_agent_rsp_fifo:in_endofpacket
	wire          pio_key_s1_agent_rsp_fifo_out_valid;                                                         // pio_key_s1_agent_rsp_fifo:out_valid -> pio_key_s1_agent:rf_sink_valid
	wire  [112:0] pio_key_s1_agent_rsp_fifo_out_data;                                                          // pio_key_s1_agent_rsp_fifo:out_data -> pio_key_s1_agent:rf_sink_data
	wire          pio_key_s1_agent_rsp_fifo_out_ready;                                                         // pio_key_s1_agent:rf_sink_ready -> pio_key_s1_agent_rsp_fifo:out_ready
	wire          pio_key_s1_agent_rsp_fifo_out_startofpacket;                                                 // pio_key_s1_agent_rsp_fifo:out_startofpacket -> pio_key_s1_agent:rf_sink_startofpacket
	wire          pio_key_s1_agent_rsp_fifo_out_endofpacket;                                                   // pio_key_s1_agent_rsp_fifo:out_endofpacket -> pio_key_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_012_src_valid;                                                                       // cmd_mux_012:src_valid -> pio_key_s1_agent:cp_valid
	wire  [111:0] cmd_mux_012_src_data;                                                                        // cmd_mux_012:src_data -> pio_key_s1_agent:cp_data
	wire          cmd_mux_012_src_ready;                                                                       // pio_key_s1_agent:cp_ready -> cmd_mux_012:src_ready
	wire   [20:0] cmd_mux_012_src_channel;                                                                     // cmd_mux_012:src_channel -> pio_key_s1_agent:cp_channel
	wire          cmd_mux_012_src_startofpacket;                                                               // cmd_mux_012:src_startofpacket -> pio_key_s1_agent:cp_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                                                 // cmd_mux_012:src_endofpacket -> pio_key_s1_agent:cp_endofpacket
	wire   [31:0] chaos_code_step_s1_agent_m0_readdata;                                                        // chaos_code_step_s1_translator:uav_readdata -> chaos_code_step_s1_agent:m0_readdata
	wire          chaos_code_step_s1_agent_m0_waitrequest;                                                     // chaos_code_step_s1_translator:uav_waitrequest -> chaos_code_step_s1_agent:m0_waitrequest
	wire          chaos_code_step_s1_agent_m0_debugaccess;                                                     // chaos_code_step_s1_agent:m0_debugaccess -> chaos_code_step_s1_translator:uav_debugaccess
	wire   [31:0] chaos_code_step_s1_agent_m0_address;                                                         // chaos_code_step_s1_agent:m0_address -> chaos_code_step_s1_translator:uav_address
	wire    [3:0] chaos_code_step_s1_agent_m0_byteenable;                                                      // chaos_code_step_s1_agent:m0_byteenable -> chaos_code_step_s1_translator:uav_byteenable
	wire          chaos_code_step_s1_agent_m0_read;                                                            // chaos_code_step_s1_agent:m0_read -> chaos_code_step_s1_translator:uav_read
	wire          chaos_code_step_s1_agent_m0_readdatavalid;                                                   // chaos_code_step_s1_translator:uav_readdatavalid -> chaos_code_step_s1_agent:m0_readdatavalid
	wire          chaos_code_step_s1_agent_m0_lock;                                                            // chaos_code_step_s1_agent:m0_lock -> chaos_code_step_s1_translator:uav_lock
	wire   [31:0] chaos_code_step_s1_agent_m0_writedata;                                                       // chaos_code_step_s1_agent:m0_writedata -> chaos_code_step_s1_translator:uav_writedata
	wire          chaos_code_step_s1_agent_m0_write;                                                           // chaos_code_step_s1_agent:m0_write -> chaos_code_step_s1_translator:uav_write
	wire    [2:0] chaos_code_step_s1_agent_m0_burstcount;                                                      // chaos_code_step_s1_agent:m0_burstcount -> chaos_code_step_s1_translator:uav_burstcount
	wire          chaos_code_step_s1_agent_rf_source_valid;                                                    // chaos_code_step_s1_agent:rf_source_valid -> chaos_code_step_s1_agent_rsp_fifo:in_valid
	wire  [112:0] chaos_code_step_s1_agent_rf_source_data;                                                     // chaos_code_step_s1_agent:rf_source_data -> chaos_code_step_s1_agent_rsp_fifo:in_data
	wire          chaos_code_step_s1_agent_rf_source_ready;                                                    // chaos_code_step_s1_agent_rsp_fifo:in_ready -> chaos_code_step_s1_agent:rf_source_ready
	wire          chaos_code_step_s1_agent_rf_source_startofpacket;                                            // chaos_code_step_s1_agent:rf_source_startofpacket -> chaos_code_step_s1_agent_rsp_fifo:in_startofpacket
	wire          chaos_code_step_s1_agent_rf_source_endofpacket;                                              // chaos_code_step_s1_agent:rf_source_endofpacket -> chaos_code_step_s1_agent_rsp_fifo:in_endofpacket
	wire          chaos_code_step_s1_agent_rsp_fifo_out_valid;                                                 // chaos_code_step_s1_agent_rsp_fifo:out_valid -> chaos_code_step_s1_agent:rf_sink_valid
	wire  [112:0] chaos_code_step_s1_agent_rsp_fifo_out_data;                                                  // chaos_code_step_s1_agent_rsp_fifo:out_data -> chaos_code_step_s1_agent:rf_sink_data
	wire          chaos_code_step_s1_agent_rsp_fifo_out_ready;                                                 // chaos_code_step_s1_agent:rf_sink_ready -> chaos_code_step_s1_agent_rsp_fifo:out_ready
	wire          chaos_code_step_s1_agent_rsp_fifo_out_startofpacket;                                         // chaos_code_step_s1_agent_rsp_fifo:out_startofpacket -> chaos_code_step_s1_agent:rf_sink_startofpacket
	wire          chaos_code_step_s1_agent_rsp_fifo_out_endofpacket;                                           // chaos_code_step_s1_agent_rsp_fifo:out_endofpacket -> chaos_code_step_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_013_src_valid;                                                                       // cmd_mux_013:src_valid -> chaos_code_step_s1_agent:cp_valid
	wire  [111:0] cmd_mux_013_src_data;                                                                        // cmd_mux_013:src_data -> chaos_code_step_s1_agent:cp_data
	wire          cmd_mux_013_src_ready;                                                                       // chaos_code_step_s1_agent:cp_ready -> cmd_mux_013:src_ready
	wire   [20:0] cmd_mux_013_src_channel;                                                                     // cmd_mux_013:src_channel -> chaos_code_step_s1_agent:cp_channel
	wire          cmd_mux_013_src_startofpacket;                                                               // cmd_mux_013:src_startofpacket -> chaos_code_step_s1_agent:cp_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                                                 // cmd_mux_013:src_endofpacket -> chaos_code_step_s1_agent:cp_endofpacket
	wire   [31:0] chaos_code_reset_s1_agent_m0_readdata;                                                       // chaos_code_reset_s1_translator:uav_readdata -> chaos_code_reset_s1_agent:m0_readdata
	wire          chaos_code_reset_s1_agent_m0_waitrequest;                                                    // chaos_code_reset_s1_translator:uav_waitrequest -> chaos_code_reset_s1_agent:m0_waitrequest
	wire          chaos_code_reset_s1_agent_m0_debugaccess;                                                    // chaos_code_reset_s1_agent:m0_debugaccess -> chaos_code_reset_s1_translator:uav_debugaccess
	wire   [31:0] chaos_code_reset_s1_agent_m0_address;                                                        // chaos_code_reset_s1_agent:m0_address -> chaos_code_reset_s1_translator:uav_address
	wire    [3:0] chaos_code_reset_s1_agent_m0_byteenable;                                                     // chaos_code_reset_s1_agent:m0_byteenable -> chaos_code_reset_s1_translator:uav_byteenable
	wire          chaos_code_reset_s1_agent_m0_read;                                                           // chaos_code_reset_s1_agent:m0_read -> chaos_code_reset_s1_translator:uav_read
	wire          chaos_code_reset_s1_agent_m0_readdatavalid;                                                  // chaos_code_reset_s1_translator:uav_readdatavalid -> chaos_code_reset_s1_agent:m0_readdatavalid
	wire          chaos_code_reset_s1_agent_m0_lock;                                                           // chaos_code_reset_s1_agent:m0_lock -> chaos_code_reset_s1_translator:uav_lock
	wire   [31:0] chaos_code_reset_s1_agent_m0_writedata;                                                      // chaos_code_reset_s1_agent:m0_writedata -> chaos_code_reset_s1_translator:uav_writedata
	wire          chaos_code_reset_s1_agent_m0_write;                                                          // chaos_code_reset_s1_agent:m0_write -> chaos_code_reset_s1_translator:uav_write
	wire    [2:0] chaos_code_reset_s1_agent_m0_burstcount;                                                     // chaos_code_reset_s1_agent:m0_burstcount -> chaos_code_reset_s1_translator:uav_burstcount
	wire          chaos_code_reset_s1_agent_rf_source_valid;                                                   // chaos_code_reset_s1_agent:rf_source_valid -> chaos_code_reset_s1_agent_rsp_fifo:in_valid
	wire  [112:0] chaos_code_reset_s1_agent_rf_source_data;                                                    // chaos_code_reset_s1_agent:rf_source_data -> chaos_code_reset_s1_agent_rsp_fifo:in_data
	wire          chaos_code_reset_s1_agent_rf_source_ready;                                                   // chaos_code_reset_s1_agent_rsp_fifo:in_ready -> chaos_code_reset_s1_agent:rf_source_ready
	wire          chaos_code_reset_s1_agent_rf_source_startofpacket;                                           // chaos_code_reset_s1_agent:rf_source_startofpacket -> chaos_code_reset_s1_agent_rsp_fifo:in_startofpacket
	wire          chaos_code_reset_s1_agent_rf_source_endofpacket;                                             // chaos_code_reset_s1_agent:rf_source_endofpacket -> chaos_code_reset_s1_agent_rsp_fifo:in_endofpacket
	wire          chaos_code_reset_s1_agent_rsp_fifo_out_valid;                                                // chaos_code_reset_s1_agent_rsp_fifo:out_valid -> chaos_code_reset_s1_agent:rf_sink_valid
	wire  [112:0] chaos_code_reset_s1_agent_rsp_fifo_out_data;                                                 // chaos_code_reset_s1_agent_rsp_fifo:out_data -> chaos_code_reset_s1_agent:rf_sink_data
	wire          chaos_code_reset_s1_agent_rsp_fifo_out_ready;                                                // chaos_code_reset_s1_agent:rf_sink_ready -> chaos_code_reset_s1_agent_rsp_fifo:out_ready
	wire          chaos_code_reset_s1_agent_rsp_fifo_out_startofpacket;                                        // chaos_code_reset_s1_agent_rsp_fifo:out_startofpacket -> chaos_code_reset_s1_agent:rf_sink_startofpacket
	wire          chaos_code_reset_s1_agent_rsp_fifo_out_endofpacket;                                          // chaos_code_reset_s1_agent_rsp_fifo:out_endofpacket -> chaos_code_reset_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_014_src_valid;                                                                       // cmd_mux_014:src_valid -> chaos_code_reset_s1_agent:cp_valid
	wire  [111:0] cmd_mux_014_src_data;                                                                        // cmd_mux_014:src_data -> chaos_code_reset_s1_agent:cp_data
	wire          cmd_mux_014_src_ready;                                                                       // chaos_code_reset_s1_agent:cp_ready -> cmd_mux_014:src_ready
	wire   [20:0] cmd_mux_014_src_channel;                                                                     // cmd_mux_014:src_channel -> chaos_code_reset_s1_agent:cp_channel
	wire          cmd_mux_014_src_startofpacket;                                                               // cmd_mux_014:src_startofpacket -> chaos_code_reset_s1_agent:cp_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                                                 // cmd_mux_014:src_endofpacket -> chaos_code_reset_s1_agent:cp_endofpacket
	wire   [31:0] chaos_code_shift_s1_agent_m0_readdata;                                                       // chaos_code_shift_s1_translator:uav_readdata -> chaos_code_shift_s1_agent:m0_readdata
	wire          chaos_code_shift_s1_agent_m0_waitrequest;                                                    // chaos_code_shift_s1_translator:uav_waitrequest -> chaos_code_shift_s1_agent:m0_waitrequest
	wire          chaos_code_shift_s1_agent_m0_debugaccess;                                                    // chaos_code_shift_s1_agent:m0_debugaccess -> chaos_code_shift_s1_translator:uav_debugaccess
	wire   [31:0] chaos_code_shift_s1_agent_m0_address;                                                        // chaos_code_shift_s1_agent:m0_address -> chaos_code_shift_s1_translator:uav_address
	wire    [3:0] chaos_code_shift_s1_agent_m0_byteenable;                                                     // chaos_code_shift_s1_agent:m0_byteenable -> chaos_code_shift_s1_translator:uav_byteenable
	wire          chaos_code_shift_s1_agent_m0_read;                                                           // chaos_code_shift_s1_agent:m0_read -> chaos_code_shift_s1_translator:uav_read
	wire          chaos_code_shift_s1_agent_m0_readdatavalid;                                                  // chaos_code_shift_s1_translator:uav_readdatavalid -> chaos_code_shift_s1_agent:m0_readdatavalid
	wire          chaos_code_shift_s1_agent_m0_lock;                                                           // chaos_code_shift_s1_agent:m0_lock -> chaos_code_shift_s1_translator:uav_lock
	wire   [31:0] chaos_code_shift_s1_agent_m0_writedata;                                                      // chaos_code_shift_s1_agent:m0_writedata -> chaos_code_shift_s1_translator:uav_writedata
	wire          chaos_code_shift_s1_agent_m0_write;                                                          // chaos_code_shift_s1_agent:m0_write -> chaos_code_shift_s1_translator:uav_write
	wire    [2:0] chaos_code_shift_s1_agent_m0_burstcount;                                                     // chaos_code_shift_s1_agent:m0_burstcount -> chaos_code_shift_s1_translator:uav_burstcount
	wire          chaos_code_shift_s1_agent_rf_source_valid;                                                   // chaos_code_shift_s1_agent:rf_source_valid -> chaos_code_shift_s1_agent_rsp_fifo:in_valid
	wire  [112:0] chaos_code_shift_s1_agent_rf_source_data;                                                    // chaos_code_shift_s1_agent:rf_source_data -> chaos_code_shift_s1_agent_rsp_fifo:in_data
	wire          chaos_code_shift_s1_agent_rf_source_ready;                                                   // chaos_code_shift_s1_agent_rsp_fifo:in_ready -> chaos_code_shift_s1_agent:rf_source_ready
	wire          chaos_code_shift_s1_agent_rf_source_startofpacket;                                           // chaos_code_shift_s1_agent:rf_source_startofpacket -> chaos_code_shift_s1_agent_rsp_fifo:in_startofpacket
	wire          chaos_code_shift_s1_agent_rf_source_endofpacket;                                             // chaos_code_shift_s1_agent:rf_source_endofpacket -> chaos_code_shift_s1_agent_rsp_fifo:in_endofpacket
	wire          chaos_code_shift_s1_agent_rsp_fifo_out_valid;                                                // chaos_code_shift_s1_agent_rsp_fifo:out_valid -> chaos_code_shift_s1_agent:rf_sink_valid
	wire  [112:0] chaos_code_shift_s1_agent_rsp_fifo_out_data;                                                 // chaos_code_shift_s1_agent_rsp_fifo:out_data -> chaos_code_shift_s1_agent:rf_sink_data
	wire          chaos_code_shift_s1_agent_rsp_fifo_out_ready;                                                // chaos_code_shift_s1_agent:rf_sink_ready -> chaos_code_shift_s1_agent_rsp_fifo:out_ready
	wire          chaos_code_shift_s1_agent_rsp_fifo_out_startofpacket;                                        // chaos_code_shift_s1_agent_rsp_fifo:out_startofpacket -> chaos_code_shift_s1_agent:rf_sink_startofpacket
	wire          chaos_code_shift_s1_agent_rsp_fifo_out_endofpacket;                                          // chaos_code_shift_s1_agent_rsp_fifo:out_endofpacket -> chaos_code_shift_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_015_src_valid;                                                                       // cmd_mux_015:src_valid -> chaos_code_shift_s1_agent:cp_valid
	wire  [111:0] cmd_mux_015_src_data;                                                                        // cmd_mux_015:src_data -> chaos_code_shift_s1_agent:cp_data
	wire          cmd_mux_015_src_ready;                                                                       // chaos_code_shift_s1_agent:cp_ready -> cmd_mux_015:src_ready
	wire   [20:0] cmd_mux_015_src_channel;                                                                     // cmd_mux_015:src_channel -> chaos_code_shift_s1_agent:cp_channel
	wire          cmd_mux_015_src_startofpacket;                                                               // cmd_mux_015:src_startofpacket -> chaos_code_shift_s1_agent:cp_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                                                 // cmd_mux_015:src_endofpacket -> chaos_code_shift_s1_agent:cp_endofpacket
	wire   [31:0] chaos_code_done_s1_agent_m0_readdata;                                                        // chaos_code_done_s1_translator:uav_readdata -> chaos_code_done_s1_agent:m0_readdata
	wire          chaos_code_done_s1_agent_m0_waitrequest;                                                     // chaos_code_done_s1_translator:uav_waitrequest -> chaos_code_done_s1_agent:m0_waitrequest
	wire          chaos_code_done_s1_agent_m0_debugaccess;                                                     // chaos_code_done_s1_agent:m0_debugaccess -> chaos_code_done_s1_translator:uav_debugaccess
	wire   [31:0] chaos_code_done_s1_agent_m0_address;                                                         // chaos_code_done_s1_agent:m0_address -> chaos_code_done_s1_translator:uav_address
	wire    [3:0] chaos_code_done_s1_agent_m0_byteenable;                                                      // chaos_code_done_s1_agent:m0_byteenable -> chaos_code_done_s1_translator:uav_byteenable
	wire          chaos_code_done_s1_agent_m0_read;                                                            // chaos_code_done_s1_agent:m0_read -> chaos_code_done_s1_translator:uav_read
	wire          chaos_code_done_s1_agent_m0_readdatavalid;                                                   // chaos_code_done_s1_translator:uav_readdatavalid -> chaos_code_done_s1_agent:m0_readdatavalid
	wire          chaos_code_done_s1_agent_m0_lock;                                                            // chaos_code_done_s1_agent:m0_lock -> chaos_code_done_s1_translator:uav_lock
	wire   [31:0] chaos_code_done_s1_agent_m0_writedata;                                                       // chaos_code_done_s1_agent:m0_writedata -> chaos_code_done_s1_translator:uav_writedata
	wire          chaos_code_done_s1_agent_m0_write;                                                           // chaos_code_done_s1_agent:m0_write -> chaos_code_done_s1_translator:uav_write
	wire    [2:0] chaos_code_done_s1_agent_m0_burstcount;                                                      // chaos_code_done_s1_agent:m0_burstcount -> chaos_code_done_s1_translator:uav_burstcount
	wire          chaos_code_done_s1_agent_rf_source_valid;                                                    // chaos_code_done_s1_agent:rf_source_valid -> chaos_code_done_s1_agent_rsp_fifo:in_valid
	wire  [112:0] chaos_code_done_s1_agent_rf_source_data;                                                     // chaos_code_done_s1_agent:rf_source_data -> chaos_code_done_s1_agent_rsp_fifo:in_data
	wire          chaos_code_done_s1_agent_rf_source_ready;                                                    // chaos_code_done_s1_agent_rsp_fifo:in_ready -> chaos_code_done_s1_agent:rf_source_ready
	wire          chaos_code_done_s1_agent_rf_source_startofpacket;                                            // chaos_code_done_s1_agent:rf_source_startofpacket -> chaos_code_done_s1_agent_rsp_fifo:in_startofpacket
	wire          chaos_code_done_s1_agent_rf_source_endofpacket;                                              // chaos_code_done_s1_agent:rf_source_endofpacket -> chaos_code_done_s1_agent_rsp_fifo:in_endofpacket
	wire          chaos_code_done_s1_agent_rsp_fifo_out_valid;                                                 // chaos_code_done_s1_agent_rsp_fifo:out_valid -> chaos_code_done_s1_agent:rf_sink_valid
	wire  [112:0] chaos_code_done_s1_agent_rsp_fifo_out_data;                                                  // chaos_code_done_s1_agent_rsp_fifo:out_data -> chaos_code_done_s1_agent:rf_sink_data
	wire          chaos_code_done_s1_agent_rsp_fifo_out_ready;                                                 // chaos_code_done_s1_agent:rf_sink_ready -> chaos_code_done_s1_agent_rsp_fifo:out_ready
	wire          chaos_code_done_s1_agent_rsp_fifo_out_startofpacket;                                         // chaos_code_done_s1_agent_rsp_fifo:out_startofpacket -> chaos_code_done_s1_agent:rf_sink_startofpacket
	wire          chaos_code_done_s1_agent_rsp_fifo_out_endofpacket;                                           // chaos_code_done_s1_agent_rsp_fifo:out_endofpacket -> chaos_code_done_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_016_src_valid;                                                                       // cmd_mux_016:src_valid -> chaos_code_done_s1_agent:cp_valid
	wire  [111:0] cmd_mux_016_src_data;                                                                        // cmd_mux_016:src_data -> chaos_code_done_s1_agent:cp_data
	wire          cmd_mux_016_src_ready;                                                                       // chaos_code_done_s1_agent:cp_ready -> cmd_mux_016:src_ready
	wire   [20:0] cmd_mux_016_src_channel;                                                                     // cmd_mux_016:src_channel -> chaos_code_done_s1_agent:cp_channel
	wire          cmd_mux_016_src_startofpacket;                                                               // cmd_mux_016:src_startofpacket -> chaos_code_done_s1_agent:cp_startofpacket
	wire          cmd_mux_016_src_endofpacket;                                                                 // cmd_mux_016:src_endofpacket -> chaos_code_done_s1_agent:cp_endofpacket
	wire   [31:0] chaos_code_x_s1_agent_m0_readdata;                                                           // chaos_code_x_s1_translator:uav_readdata -> chaos_code_x_s1_agent:m0_readdata
	wire          chaos_code_x_s1_agent_m0_waitrequest;                                                        // chaos_code_x_s1_translator:uav_waitrequest -> chaos_code_x_s1_agent:m0_waitrequest
	wire          chaos_code_x_s1_agent_m0_debugaccess;                                                        // chaos_code_x_s1_agent:m0_debugaccess -> chaos_code_x_s1_translator:uav_debugaccess
	wire   [31:0] chaos_code_x_s1_agent_m0_address;                                                            // chaos_code_x_s1_agent:m0_address -> chaos_code_x_s1_translator:uav_address
	wire    [3:0] chaos_code_x_s1_agent_m0_byteenable;                                                         // chaos_code_x_s1_agent:m0_byteenable -> chaos_code_x_s1_translator:uav_byteenable
	wire          chaos_code_x_s1_agent_m0_read;                                                               // chaos_code_x_s1_agent:m0_read -> chaos_code_x_s1_translator:uav_read
	wire          chaos_code_x_s1_agent_m0_readdatavalid;                                                      // chaos_code_x_s1_translator:uav_readdatavalid -> chaos_code_x_s1_agent:m0_readdatavalid
	wire          chaos_code_x_s1_agent_m0_lock;                                                               // chaos_code_x_s1_agent:m0_lock -> chaos_code_x_s1_translator:uav_lock
	wire   [31:0] chaos_code_x_s1_agent_m0_writedata;                                                          // chaos_code_x_s1_agent:m0_writedata -> chaos_code_x_s1_translator:uav_writedata
	wire          chaos_code_x_s1_agent_m0_write;                                                              // chaos_code_x_s1_agent:m0_write -> chaos_code_x_s1_translator:uav_write
	wire    [2:0] chaos_code_x_s1_agent_m0_burstcount;                                                         // chaos_code_x_s1_agent:m0_burstcount -> chaos_code_x_s1_translator:uav_burstcount
	wire          chaos_code_x_s1_agent_rf_source_valid;                                                       // chaos_code_x_s1_agent:rf_source_valid -> chaos_code_x_s1_agent_rsp_fifo:in_valid
	wire  [112:0] chaos_code_x_s1_agent_rf_source_data;                                                        // chaos_code_x_s1_agent:rf_source_data -> chaos_code_x_s1_agent_rsp_fifo:in_data
	wire          chaos_code_x_s1_agent_rf_source_ready;                                                       // chaos_code_x_s1_agent_rsp_fifo:in_ready -> chaos_code_x_s1_agent:rf_source_ready
	wire          chaos_code_x_s1_agent_rf_source_startofpacket;                                               // chaos_code_x_s1_agent:rf_source_startofpacket -> chaos_code_x_s1_agent_rsp_fifo:in_startofpacket
	wire          chaos_code_x_s1_agent_rf_source_endofpacket;                                                 // chaos_code_x_s1_agent:rf_source_endofpacket -> chaos_code_x_s1_agent_rsp_fifo:in_endofpacket
	wire          chaos_code_x_s1_agent_rsp_fifo_out_valid;                                                    // chaos_code_x_s1_agent_rsp_fifo:out_valid -> chaos_code_x_s1_agent:rf_sink_valid
	wire  [112:0] chaos_code_x_s1_agent_rsp_fifo_out_data;                                                     // chaos_code_x_s1_agent_rsp_fifo:out_data -> chaos_code_x_s1_agent:rf_sink_data
	wire          chaos_code_x_s1_agent_rsp_fifo_out_ready;                                                    // chaos_code_x_s1_agent:rf_sink_ready -> chaos_code_x_s1_agent_rsp_fifo:out_ready
	wire          chaos_code_x_s1_agent_rsp_fifo_out_startofpacket;                                            // chaos_code_x_s1_agent_rsp_fifo:out_startofpacket -> chaos_code_x_s1_agent:rf_sink_startofpacket
	wire          chaos_code_x_s1_agent_rsp_fifo_out_endofpacket;                                              // chaos_code_x_s1_agent_rsp_fifo:out_endofpacket -> chaos_code_x_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_017_src_valid;                                                                       // cmd_mux_017:src_valid -> chaos_code_x_s1_agent:cp_valid
	wire  [111:0] cmd_mux_017_src_data;                                                                        // cmd_mux_017:src_data -> chaos_code_x_s1_agent:cp_data
	wire          cmd_mux_017_src_ready;                                                                       // chaos_code_x_s1_agent:cp_ready -> cmd_mux_017:src_ready
	wire   [20:0] cmd_mux_017_src_channel;                                                                     // cmd_mux_017:src_channel -> chaos_code_x_s1_agent:cp_channel
	wire          cmd_mux_017_src_startofpacket;                                                               // cmd_mux_017:src_startofpacket -> chaos_code_x_s1_agent:cp_startofpacket
	wire          cmd_mux_017_src_endofpacket;                                                                 // cmd_mux_017:src_endofpacket -> chaos_code_x_s1_agent:cp_endofpacket
	wire   [31:0] chaos_code_y_s1_agent_m0_readdata;                                                           // chaos_code_y_s1_translator:uav_readdata -> chaos_code_y_s1_agent:m0_readdata
	wire          chaos_code_y_s1_agent_m0_waitrequest;                                                        // chaos_code_y_s1_translator:uav_waitrequest -> chaos_code_y_s1_agent:m0_waitrequest
	wire          chaos_code_y_s1_agent_m0_debugaccess;                                                        // chaos_code_y_s1_agent:m0_debugaccess -> chaos_code_y_s1_translator:uav_debugaccess
	wire   [31:0] chaos_code_y_s1_agent_m0_address;                                                            // chaos_code_y_s1_agent:m0_address -> chaos_code_y_s1_translator:uav_address
	wire    [3:0] chaos_code_y_s1_agent_m0_byteenable;                                                         // chaos_code_y_s1_agent:m0_byteenable -> chaos_code_y_s1_translator:uav_byteenable
	wire          chaos_code_y_s1_agent_m0_read;                                                               // chaos_code_y_s1_agent:m0_read -> chaos_code_y_s1_translator:uav_read
	wire          chaos_code_y_s1_agent_m0_readdatavalid;                                                      // chaos_code_y_s1_translator:uav_readdatavalid -> chaos_code_y_s1_agent:m0_readdatavalid
	wire          chaos_code_y_s1_agent_m0_lock;                                                               // chaos_code_y_s1_agent:m0_lock -> chaos_code_y_s1_translator:uav_lock
	wire   [31:0] chaos_code_y_s1_agent_m0_writedata;                                                          // chaos_code_y_s1_agent:m0_writedata -> chaos_code_y_s1_translator:uav_writedata
	wire          chaos_code_y_s1_agent_m0_write;                                                              // chaos_code_y_s1_agent:m0_write -> chaos_code_y_s1_translator:uav_write
	wire    [2:0] chaos_code_y_s1_agent_m0_burstcount;                                                         // chaos_code_y_s1_agent:m0_burstcount -> chaos_code_y_s1_translator:uav_burstcount
	wire          chaos_code_y_s1_agent_rf_source_valid;                                                       // chaos_code_y_s1_agent:rf_source_valid -> chaos_code_y_s1_agent_rsp_fifo:in_valid
	wire  [112:0] chaos_code_y_s1_agent_rf_source_data;                                                        // chaos_code_y_s1_agent:rf_source_data -> chaos_code_y_s1_agent_rsp_fifo:in_data
	wire          chaos_code_y_s1_agent_rf_source_ready;                                                       // chaos_code_y_s1_agent_rsp_fifo:in_ready -> chaos_code_y_s1_agent:rf_source_ready
	wire          chaos_code_y_s1_agent_rf_source_startofpacket;                                               // chaos_code_y_s1_agent:rf_source_startofpacket -> chaos_code_y_s1_agent_rsp_fifo:in_startofpacket
	wire          chaos_code_y_s1_agent_rf_source_endofpacket;                                                 // chaos_code_y_s1_agent:rf_source_endofpacket -> chaos_code_y_s1_agent_rsp_fifo:in_endofpacket
	wire          chaos_code_y_s1_agent_rsp_fifo_out_valid;                                                    // chaos_code_y_s1_agent_rsp_fifo:out_valid -> chaos_code_y_s1_agent:rf_sink_valid
	wire  [112:0] chaos_code_y_s1_agent_rsp_fifo_out_data;                                                     // chaos_code_y_s1_agent_rsp_fifo:out_data -> chaos_code_y_s1_agent:rf_sink_data
	wire          chaos_code_y_s1_agent_rsp_fifo_out_ready;                                                    // chaos_code_y_s1_agent:rf_sink_ready -> chaos_code_y_s1_agent_rsp_fifo:out_ready
	wire          chaos_code_y_s1_agent_rsp_fifo_out_startofpacket;                                            // chaos_code_y_s1_agent_rsp_fifo:out_startofpacket -> chaos_code_y_s1_agent:rf_sink_startofpacket
	wire          chaos_code_y_s1_agent_rsp_fifo_out_endofpacket;                                              // chaos_code_y_s1_agent_rsp_fifo:out_endofpacket -> chaos_code_y_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_018_src_valid;                                                                       // cmd_mux_018:src_valid -> chaos_code_y_s1_agent:cp_valid
	wire  [111:0] cmd_mux_018_src_data;                                                                        // cmd_mux_018:src_data -> chaos_code_y_s1_agent:cp_data
	wire          cmd_mux_018_src_ready;                                                                       // chaos_code_y_s1_agent:cp_ready -> cmd_mux_018:src_ready
	wire   [20:0] cmd_mux_018_src_channel;                                                                     // cmd_mux_018:src_channel -> chaos_code_y_s1_agent:cp_channel
	wire          cmd_mux_018_src_startofpacket;                                                               // cmd_mux_018:src_startofpacket -> chaos_code_y_s1_agent:cp_startofpacket
	wire          cmd_mux_018_src_endofpacket;                                                                 // cmd_mux_018:src_endofpacket -> chaos_code_y_s1_agent:cp_endofpacket
	wire   [31:0] chaos_code_z_s1_agent_m0_readdata;                                                           // chaos_code_z_s1_translator:uav_readdata -> chaos_code_z_s1_agent:m0_readdata
	wire          chaos_code_z_s1_agent_m0_waitrequest;                                                        // chaos_code_z_s1_translator:uav_waitrequest -> chaos_code_z_s1_agent:m0_waitrequest
	wire          chaos_code_z_s1_agent_m0_debugaccess;                                                        // chaos_code_z_s1_agent:m0_debugaccess -> chaos_code_z_s1_translator:uav_debugaccess
	wire   [31:0] chaos_code_z_s1_agent_m0_address;                                                            // chaos_code_z_s1_agent:m0_address -> chaos_code_z_s1_translator:uav_address
	wire    [3:0] chaos_code_z_s1_agent_m0_byteenable;                                                         // chaos_code_z_s1_agent:m0_byteenable -> chaos_code_z_s1_translator:uav_byteenable
	wire          chaos_code_z_s1_agent_m0_read;                                                               // chaos_code_z_s1_agent:m0_read -> chaos_code_z_s1_translator:uav_read
	wire          chaos_code_z_s1_agent_m0_readdatavalid;                                                      // chaos_code_z_s1_translator:uav_readdatavalid -> chaos_code_z_s1_agent:m0_readdatavalid
	wire          chaos_code_z_s1_agent_m0_lock;                                                               // chaos_code_z_s1_agent:m0_lock -> chaos_code_z_s1_translator:uav_lock
	wire   [31:0] chaos_code_z_s1_agent_m0_writedata;                                                          // chaos_code_z_s1_agent:m0_writedata -> chaos_code_z_s1_translator:uav_writedata
	wire          chaos_code_z_s1_agent_m0_write;                                                              // chaos_code_z_s1_agent:m0_write -> chaos_code_z_s1_translator:uav_write
	wire    [2:0] chaos_code_z_s1_agent_m0_burstcount;                                                         // chaos_code_z_s1_agent:m0_burstcount -> chaos_code_z_s1_translator:uav_burstcount
	wire          chaos_code_z_s1_agent_rf_source_valid;                                                       // chaos_code_z_s1_agent:rf_source_valid -> chaos_code_z_s1_agent_rsp_fifo:in_valid
	wire  [112:0] chaos_code_z_s1_agent_rf_source_data;                                                        // chaos_code_z_s1_agent:rf_source_data -> chaos_code_z_s1_agent_rsp_fifo:in_data
	wire          chaos_code_z_s1_agent_rf_source_ready;                                                       // chaos_code_z_s1_agent_rsp_fifo:in_ready -> chaos_code_z_s1_agent:rf_source_ready
	wire          chaos_code_z_s1_agent_rf_source_startofpacket;                                               // chaos_code_z_s1_agent:rf_source_startofpacket -> chaos_code_z_s1_agent_rsp_fifo:in_startofpacket
	wire          chaos_code_z_s1_agent_rf_source_endofpacket;                                                 // chaos_code_z_s1_agent:rf_source_endofpacket -> chaos_code_z_s1_agent_rsp_fifo:in_endofpacket
	wire          chaos_code_z_s1_agent_rsp_fifo_out_valid;                                                    // chaos_code_z_s1_agent_rsp_fifo:out_valid -> chaos_code_z_s1_agent:rf_sink_valid
	wire  [112:0] chaos_code_z_s1_agent_rsp_fifo_out_data;                                                     // chaos_code_z_s1_agent_rsp_fifo:out_data -> chaos_code_z_s1_agent:rf_sink_data
	wire          chaos_code_z_s1_agent_rsp_fifo_out_ready;                                                    // chaos_code_z_s1_agent:rf_sink_ready -> chaos_code_z_s1_agent_rsp_fifo:out_ready
	wire          chaos_code_z_s1_agent_rsp_fifo_out_startofpacket;                                            // chaos_code_z_s1_agent_rsp_fifo:out_startofpacket -> chaos_code_z_s1_agent:rf_sink_startofpacket
	wire          chaos_code_z_s1_agent_rsp_fifo_out_endofpacket;                                              // chaos_code_z_s1_agent_rsp_fifo:out_endofpacket -> chaos_code_z_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_019_src_valid;                                                                       // cmd_mux_019:src_valid -> chaos_code_z_s1_agent:cp_valid
	wire  [111:0] cmd_mux_019_src_data;                                                                        // cmd_mux_019:src_data -> chaos_code_z_s1_agent:cp_data
	wire          cmd_mux_019_src_ready;                                                                       // chaos_code_z_s1_agent:cp_ready -> cmd_mux_019:src_ready
	wire   [20:0] cmd_mux_019_src_channel;                                                                     // cmd_mux_019:src_channel -> chaos_code_z_s1_agent:cp_channel
	wire          cmd_mux_019_src_startofpacket;                                                               // cmd_mux_019:src_startofpacket -> chaos_code_z_s1_agent:cp_startofpacket
	wire          cmd_mux_019_src_endofpacket;                                                                 // cmd_mux_019:src_endofpacket -> chaos_code_z_s1_agent:cp_endofpacket
	wire   [31:0] chaos_code_w_s1_agent_m0_readdata;                                                           // chaos_code_w_s1_translator:uav_readdata -> chaos_code_w_s1_agent:m0_readdata
	wire          chaos_code_w_s1_agent_m0_waitrequest;                                                        // chaos_code_w_s1_translator:uav_waitrequest -> chaos_code_w_s1_agent:m0_waitrequest
	wire          chaos_code_w_s1_agent_m0_debugaccess;                                                        // chaos_code_w_s1_agent:m0_debugaccess -> chaos_code_w_s1_translator:uav_debugaccess
	wire   [31:0] chaos_code_w_s1_agent_m0_address;                                                            // chaos_code_w_s1_agent:m0_address -> chaos_code_w_s1_translator:uav_address
	wire    [3:0] chaos_code_w_s1_agent_m0_byteenable;                                                         // chaos_code_w_s1_agent:m0_byteenable -> chaos_code_w_s1_translator:uav_byteenable
	wire          chaos_code_w_s1_agent_m0_read;                                                               // chaos_code_w_s1_agent:m0_read -> chaos_code_w_s1_translator:uav_read
	wire          chaos_code_w_s1_agent_m0_readdatavalid;                                                      // chaos_code_w_s1_translator:uav_readdatavalid -> chaos_code_w_s1_agent:m0_readdatavalid
	wire          chaos_code_w_s1_agent_m0_lock;                                                               // chaos_code_w_s1_agent:m0_lock -> chaos_code_w_s1_translator:uav_lock
	wire   [31:0] chaos_code_w_s1_agent_m0_writedata;                                                          // chaos_code_w_s1_agent:m0_writedata -> chaos_code_w_s1_translator:uav_writedata
	wire          chaos_code_w_s1_agent_m0_write;                                                              // chaos_code_w_s1_agent:m0_write -> chaos_code_w_s1_translator:uav_write
	wire    [2:0] chaos_code_w_s1_agent_m0_burstcount;                                                         // chaos_code_w_s1_agent:m0_burstcount -> chaos_code_w_s1_translator:uav_burstcount
	wire          chaos_code_w_s1_agent_rf_source_valid;                                                       // chaos_code_w_s1_agent:rf_source_valid -> chaos_code_w_s1_agent_rsp_fifo:in_valid
	wire  [112:0] chaos_code_w_s1_agent_rf_source_data;                                                        // chaos_code_w_s1_agent:rf_source_data -> chaos_code_w_s1_agent_rsp_fifo:in_data
	wire          chaos_code_w_s1_agent_rf_source_ready;                                                       // chaos_code_w_s1_agent_rsp_fifo:in_ready -> chaos_code_w_s1_agent:rf_source_ready
	wire          chaos_code_w_s1_agent_rf_source_startofpacket;                                               // chaos_code_w_s1_agent:rf_source_startofpacket -> chaos_code_w_s1_agent_rsp_fifo:in_startofpacket
	wire          chaos_code_w_s1_agent_rf_source_endofpacket;                                                 // chaos_code_w_s1_agent:rf_source_endofpacket -> chaos_code_w_s1_agent_rsp_fifo:in_endofpacket
	wire          chaos_code_w_s1_agent_rsp_fifo_out_valid;                                                    // chaos_code_w_s1_agent_rsp_fifo:out_valid -> chaos_code_w_s1_agent:rf_sink_valid
	wire  [112:0] chaos_code_w_s1_agent_rsp_fifo_out_data;                                                     // chaos_code_w_s1_agent_rsp_fifo:out_data -> chaos_code_w_s1_agent:rf_sink_data
	wire          chaos_code_w_s1_agent_rsp_fifo_out_ready;                                                    // chaos_code_w_s1_agent:rf_sink_ready -> chaos_code_w_s1_agent_rsp_fifo:out_ready
	wire          chaos_code_w_s1_agent_rsp_fifo_out_startofpacket;                                            // chaos_code_w_s1_agent_rsp_fifo:out_startofpacket -> chaos_code_w_s1_agent:rf_sink_startofpacket
	wire          chaos_code_w_s1_agent_rsp_fifo_out_endofpacket;                                              // chaos_code_w_s1_agent_rsp_fifo:out_endofpacket -> chaos_code_w_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_020_src_valid;                                                                       // cmd_mux_020:src_valid -> chaos_code_w_s1_agent:cp_valid
	wire  [111:0] cmd_mux_020_src_data;                                                                        // cmd_mux_020:src_data -> chaos_code_w_s1_agent:cp_data
	wire          cmd_mux_020_src_ready;                                                                       // chaos_code_w_s1_agent:cp_ready -> cmd_mux_020:src_ready
	wire   [20:0] cmd_mux_020_src_channel;                                                                     // cmd_mux_020:src_channel -> chaos_code_w_s1_agent:cp_channel
	wire          cmd_mux_020_src_startofpacket;                                                               // cmd_mux_020:src_startofpacket -> chaos_code_w_s1_agent:cp_startofpacket
	wire          cmd_mux_020_src_endofpacket;                                                                 // cmd_mux_020:src_endofpacket -> chaos_code_w_s1_agent:cp_endofpacket
	wire          pixel_buffer_dma_avalon_pixel_dma_master_agent_cp_valid;                                     // pixel_buffer_dma_avalon_pixel_dma_master_agent:cp_valid -> router:sink_valid
	wire  [111:0] pixel_buffer_dma_avalon_pixel_dma_master_agent_cp_data;                                      // pixel_buffer_dma_avalon_pixel_dma_master_agent:cp_data -> router:sink_data
	wire          pixel_buffer_dma_avalon_pixel_dma_master_agent_cp_ready;                                     // router:sink_ready -> pixel_buffer_dma_avalon_pixel_dma_master_agent:cp_ready
	wire          pixel_buffer_dma_avalon_pixel_dma_master_agent_cp_startofpacket;                             // pixel_buffer_dma_avalon_pixel_dma_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          pixel_buffer_dma_avalon_pixel_dma_master_agent_cp_endofpacket;                               // pixel_buffer_dma_avalon_pixel_dma_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                            // router:src_valid -> cmd_demux:sink_valid
	wire  [111:0] router_src_data;                                                                             // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                            // cmd_demux:sink_ready -> router:src_ready
	wire   [20:0] router_src_channel;                                                                          // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                                    // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                                      // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          nios2_gen2_data_master_agent_cp_valid;                                                       // nios2_gen2_data_master_agent:cp_valid -> router_001:sink_valid
	wire  [111:0] nios2_gen2_data_master_agent_cp_data;                                                        // nios2_gen2_data_master_agent:cp_data -> router_001:sink_data
	wire          nios2_gen2_data_master_agent_cp_ready;                                                       // router_001:sink_ready -> nios2_gen2_data_master_agent:cp_ready
	wire          nios2_gen2_data_master_agent_cp_startofpacket;                                               // nios2_gen2_data_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          nios2_gen2_data_master_agent_cp_endofpacket;                                                 // nios2_gen2_data_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          nios2_gen2_instruction_master_agent_cp_valid;                                                // nios2_gen2_instruction_master_agent:cp_valid -> router_002:sink_valid
	wire  [111:0] nios2_gen2_instruction_master_agent_cp_data;                                                 // nios2_gen2_instruction_master_agent:cp_data -> router_002:sink_data
	wire          nios2_gen2_instruction_master_agent_cp_ready;                                                // router_002:sink_ready -> nios2_gen2_instruction_master_agent:cp_ready
	wire          nios2_gen2_instruction_master_agent_cp_startofpacket;                                        // nios2_gen2_instruction_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          nios2_gen2_instruction_master_agent_cp_endofpacket;                                          // nios2_gen2_instruction_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          pixel_buffer_avalon_sram_slave_agent_rp_valid;                                               // pixel_buffer_avalon_sram_slave_agent:rp_valid -> router_003:sink_valid
	wire   [93:0] pixel_buffer_avalon_sram_slave_agent_rp_data;                                                // pixel_buffer_avalon_sram_slave_agent:rp_data -> router_003:sink_data
	wire          pixel_buffer_avalon_sram_slave_agent_rp_ready;                                               // router_003:sink_ready -> pixel_buffer_avalon_sram_slave_agent:rp_ready
	wire          pixel_buffer_avalon_sram_slave_agent_rp_startofpacket;                                       // pixel_buffer_avalon_sram_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          pixel_buffer_avalon_sram_slave_agent_rp_endofpacket;                                         // pixel_buffer_avalon_sram_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          pixel_buffer_dma_avalon_control_slave_agent_rp_valid;                                        // pixel_buffer_dma_avalon_control_slave_agent:rp_valid -> router_004:sink_valid
	wire  [111:0] pixel_buffer_dma_avalon_control_slave_agent_rp_data;                                         // pixel_buffer_dma_avalon_control_slave_agent:rp_data -> router_004:sink_data
	wire          pixel_buffer_dma_avalon_control_slave_agent_rp_ready;                                        // router_004:sink_ready -> pixel_buffer_dma_avalon_control_slave_agent:rp_ready
	wire          pixel_buffer_dma_avalon_control_slave_agent_rp_startofpacket;                                // pixel_buffer_dma_avalon_control_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          pixel_buffer_dma_avalon_control_slave_agent_rp_endofpacket;                                  // pixel_buffer_dma_avalon_control_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                                        // router_004:src_valid -> rsp_demux_001:sink_valid
	wire  [111:0] router_004_src_data;                                                                         // router_004:src_data -> rsp_demux_001:sink_data
	wire          router_004_src_ready;                                                                        // rsp_demux_001:sink_ready -> router_004:src_ready
	wire   [20:0] router_004_src_channel;                                                                      // router_004:src_channel -> rsp_demux_001:sink_channel
	wire          router_004_src_startofpacket;                                                                // router_004:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_004_src_endofpacket;                                                                  // router_004:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_valid;                                                  // jtag_uart_avalon_jtag_slave_agent:rp_valid -> router_005:sink_valid
	wire  [111:0] jtag_uart_avalon_jtag_slave_agent_rp_data;                                                   // jtag_uart_avalon_jtag_slave_agent:rp_data -> router_005:sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rp_ready;                                                  // router_005:sink_ready -> jtag_uart_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rp_startofpacket;                                          // jtag_uart_avalon_jtag_slave_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_endofpacket;                                            // jtag_uart_avalon_jtag_slave_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                                        // router_005:src_valid -> rsp_demux_002:sink_valid
	wire  [111:0] router_005_src_data;                                                                         // router_005:src_data -> rsp_demux_002:sink_data
	wire          router_005_src_ready;                                                                        // rsp_demux_002:sink_ready -> router_005:src_ready
	wire   [20:0] router_005_src_channel;                                                                      // router_005:src_channel -> rsp_demux_002:sink_channel
	wire          router_005_src_startofpacket;                                                                // router_005:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_005_src_endofpacket;                                                                  // router_005:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          sd_card_avalon_sdcard_slave_agent_rp_valid;                                                  // sd_card_avalon_sdcard_slave_agent:rp_valid -> router_006:sink_valid
	wire  [111:0] sd_card_avalon_sdcard_slave_agent_rp_data;                                                   // sd_card_avalon_sdcard_slave_agent:rp_data -> router_006:sink_data
	wire          sd_card_avalon_sdcard_slave_agent_rp_ready;                                                  // router_006:sink_ready -> sd_card_avalon_sdcard_slave_agent:rp_ready
	wire          sd_card_avalon_sdcard_slave_agent_rp_startofpacket;                                          // sd_card_avalon_sdcard_slave_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          sd_card_avalon_sdcard_slave_agent_rp_endofpacket;                                            // sd_card_avalon_sdcard_slave_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                                        // router_006:src_valid -> rsp_demux_003:sink_valid
	wire  [111:0] router_006_src_data;                                                                         // router_006:src_data -> rsp_demux_003:sink_data
	wire          router_006_src_ready;                                                                        // rsp_demux_003:sink_ready -> router_006:src_ready
	wire   [20:0] router_006_src_channel;                                                                      // router_006:src_channel -> rsp_demux_003:sink_channel
	wire          router_006_src_startofpacket;                                                                // router_006:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_006_src_endofpacket;                                                                  // router_006:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          sysid_control_slave_agent_rp_valid;                                                          // sysid_control_slave_agent:rp_valid -> router_007:sink_valid
	wire  [111:0] sysid_control_slave_agent_rp_data;                                                           // sysid_control_slave_agent:rp_data -> router_007:sink_data
	wire          sysid_control_slave_agent_rp_ready;                                                          // router_007:sink_ready -> sysid_control_slave_agent:rp_ready
	wire          sysid_control_slave_agent_rp_startofpacket;                                                  // sysid_control_slave_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          sysid_control_slave_agent_rp_endofpacket;                                                    // sysid_control_slave_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                                        // router_007:src_valid -> rsp_demux_004:sink_valid
	wire  [111:0] router_007_src_data;                                                                         // router_007:src_data -> rsp_demux_004:sink_data
	wire          router_007_src_ready;                                                                        // rsp_demux_004:sink_ready -> router_007:src_ready
	wire   [20:0] router_007_src_channel;                                                                      // router_007:src_channel -> rsp_demux_004:sink_channel
	wire          router_007_src_startofpacket;                                                                // router_007:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_007_src_endofpacket;                                                                  // router_007:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          nios2_gen2_debug_mem_slave_agent_rp_valid;                                                   // nios2_gen2_debug_mem_slave_agent:rp_valid -> router_008:sink_valid
	wire  [111:0] nios2_gen2_debug_mem_slave_agent_rp_data;                                                    // nios2_gen2_debug_mem_slave_agent:rp_data -> router_008:sink_data
	wire          nios2_gen2_debug_mem_slave_agent_rp_ready;                                                   // router_008:sink_ready -> nios2_gen2_debug_mem_slave_agent:rp_ready
	wire          nios2_gen2_debug_mem_slave_agent_rp_startofpacket;                                           // nios2_gen2_debug_mem_slave_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          nios2_gen2_debug_mem_slave_agent_rp_endofpacket;                                             // nios2_gen2_debug_mem_slave_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                                        // router_008:src_valid -> rsp_demux_005:sink_valid
	wire  [111:0] router_008_src_data;                                                                         // router_008:src_data -> rsp_demux_005:sink_data
	wire          router_008_src_ready;                                                                        // rsp_demux_005:sink_ready -> router_008:src_ready
	wire   [20:0] router_008_src_channel;                                                                      // router_008:src_channel -> rsp_demux_005:sink_channel
	wire          router_008_src_startofpacket;                                                                // router_008:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_008_src_endofpacket;                                                                  // router_008:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          altpll_pll_slave_agent_rp_valid;                                                             // altpll_pll_slave_agent:rp_valid -> router_009:sink_valid
	wire  [111:0] altpll_pll_slave_agent_rp_data;                                                              // altpll_pll_slave_agent:rp_data -> router_009:sink_data
	wire          altpll_pll_slave_agent_rp_ready;                                                             // router_009:sink_ready -> altpll_pll_slave_agent:rp_ready
	wire          altpll_pll_slave_agent_rp_startofpacket;                                                     // altpll_pll_slave_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          altpll_pll_slave_agent_rp_endofpacket;                                                       // altpll_pll_slave_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                                        // router_009:src_valid -> rsp_demux_006:sink_valid
	wire  [111:0] router_009_src_data;                                                                         // router_009:src_data -> rsp_demux_006:sink_data
	wire          router_009_src_ready;                                                                        // rsp_demux_006:sink_ready -> router_009:src_ready
	wire   [20:0] router_009_src_channel;                                                                      // router_009:src_channel -> rsp_demux_006:sink_channel
	wire          router_009_src_startofpacket;                                                                // router_009:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_009_src_endofpacket;                                                                  // router_009:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          sdram_s1_agent_rp_valid;                                                                     // sdram_s1_agent:rp_valid -> router_010:sink_valid
	wire  [111:0] sdram_s1_agent_rp_data;                                                                      // sdram_s1_agent:rp_data -> router_010:sink_data
	wire          sdram_s1_agent_rp_ready;                                                                     // router_010:sink_ready -> sdram_s1_agent:rp_ready
	wire          sdram_s1_agent_rp_startofpacket;                                                             // sdram_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          sdram_s1_agent_rp_endofpacket;                                                               // sdram_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                                        // router_010:src_valid -> rsp_demux_007:sink_valid
	wire  [111:0] router_010_src_data;                                                                         // router_010:src_data -> rsp_demux_007:sink_data
	wire          router_010_src_ready;                                                                        // rsp_demux_007:sink_ready -> router_010:src_ready
	wire   [20:0] router_010_src_channel;                                                                      // router_010:src_channel -> rsp_demux_007:sink_channel
	wire          router_010_src_startofpacket;                                                                // router_010:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_010_src_endofpacket;                                                                  // router_010:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          timer_s1_agent_rp_valid;                                                                     // timer_s1_agent:rp_valid -> router_011:sink_valid
	wire  [111:0] timer_s1_agent_rp_data;                                                                      // timer_s1_agent:rp_data -> router_011:sink_data
	wire          timer_s1_agent_rp_ready;                                                                     // router_011:sink_ready -> timer_s1_agent:rp_ready
	wire          timer_s1_agent_rp_startofpacket;                                                             // timer_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          timer_s1_agent_rp_endofpacket;                                                               // timer_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                                        // router_011:src_valid -> rsp_demux_008:sink_valid
	wire  [111:0] router_011_src_data;                                                                         // router_011:src_data -> rsp_demux_008:sink_data
	wire          router_011_src_ready;                                                                        // rsp_demux_008:sink_ready -> router_011:src_ready
	wire   [20:0] router_011_src_channel;                                                                      // router_011:src_channel -> rsp_demux_008:sink_channel
	wire          router_011_src_startofpacket;                                                                // router_011:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_011_src_endofpacket;                                                                  // router_011:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          wifi_uart_s1_agent_rp_valid;                                                                 // wifi_uart_s1_agent:rp_valid -> router_012:sink_valid
	wire  [111:0] wifi_uart_s1_agent_rp_data;                                                                  // wifi_uart_s1_agent:rp_data -> router_012:sink_data
	wire          wifi_uart_s1_agent_rp_ready;                                                                 // router_012:sink_ready -> wifi_uart_s1_agent:rp_ready
	wire          wifi_uart_s1_agent_rp_startofpacket;                                                         // wifi_uart_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          wifi_uart_s1_agent_rp_endofpacket;                                                           // wifi_uart_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                                        // router_012:src_valid -> rsp_demux_009:sink_valid
	wire  [111:0] router_012_src_data;                                                                         // router_012:src_data -> rsp_demux_009:sink_data
	wire          router_012_src_ready;                                                                        // rsp_demux_009:sink_ready -> router_012:src_ready
	wire   [20:0] router_012_src_channel;                                                                      // router_012:src_channel -> rsp_demux_009:sink_channel
	wire          router_012_src_startofpacket;                                                                // router_012:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_012_src_endofpacket;                                                                  // router_012:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          pio_wifi_reset_s1_agent_rp_valid;                                                            // pio_wifi_reset_s1_agent:rp_valid -> router_013:sink_valid
	wire  [111:0] pio_wifi_reset_s1_agent_rp_data;                                                             // pio_wifi_reset_s1_agent:rp_data -> router_013:sink_data
	wire          pio_wifi_reset_s1_agent_rp_ready;                                                            // router_013:sink_ready -> pio_wifi_reset_s1_agent:rp_ready
	wire          pio_wifi_reset_s1_agent_rp_startofpacket;                                                    // pio_wifi_reset_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          pio_wifi_reset_s1_agent_rp_endofpacket;                                                      // pio_wifi_reset_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                                        // router_013:src_valid -> rsp_demux_010:sink_valid
	wire  [111:0] router_013_src_data;                                                                         // router_013:src_data -> rsp_demux_010:sink_data
	wire          router_013_src_ready;                                                                        // rsp_demux_010:sink_ready -> router_013:src_ready
	wire   [20:0] router_013_src_channel;                                                                      // router_013:src_channel -> rsp_demux_010:sink_channel
	wire          router_013_src_startofpacket;                                                                // router_013:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_013_src_endofpacket;                                                                  // router_013:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          pio_led_s1_agent_rp_valid;                                                                   // pio_led_s1_agent:rp_valid -> router_014:sink_valid
	wire  [111:0] pio_led_s1_agent_rp_data;                                                                    // pio_led_s1_agent:rp_data -> router_014:sink_data
	wire          pio_led_s1_agent_rp_ready;                                                                   // router_014:sink_ready -> pio_led_s1_agent:rp_ready
	wire          pio_led_s1_agent_rp_startofpacket;                                                           // pio_led_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          pio_led_s1_agent_rp_endofpacket;                                                             // pio_led_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                                        // router_014:src_valid -> rsp_demux_011:sink_valid
	wire  [111:0] router_014_src_data;                                                                         // router_014:src_data -> rsp_demux_011:sink_data
	wire          router_014_src_ready;                                                                        // rsp_demux_011:sink_ready -> router_014:src_ready
	wire   [20:0] router_014_src_channel;                                                                      // router_014:src_channel -> rsp_demux_011:sink_channel
	wire          router_014_src_startofpacket;                                                                // router_014:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_014_src_endofpacket;                                                                  // router_014:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          pio_key_s1_agent_rp_valid;                                                                   // pio_key_s1_agent:rp_valid -> router_015:sink_valid
	wire  [111:0] pio_key_s1_agent_rp_data;                                                                    // pio_key_s1_agent:rp_data -> router_015:sink_data
	wire          pio_key_s1_agent_rp_ready;                                                                   // router_015:sink_ready -> pio_key_s1_agent:rp_ready
	wire          pio_key_s1_agent_rp_startofpacket;                                                           // pio_key_s1_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          pio_key_s1_agent_rp_endofpacket;                                                             // pio_key_s1_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                                        // router_015:src_valid -> rsp_demux_012:sink_valid
	wire  [111:0] router_015_src_data;                                                                         // router_015:src_data -> rsp_demux_012:sink_data
	wire          router_015_src_ready;                                                                        // rsp_demux_012:sink_ready -> router_015:src_ready
	wire   [20:0] router_015_src_channel;                                                                      // router_015:src_channel -> rsp_demux_012:sink_channel
	wire          router_015_src_startofpacket;                                                                // router_015:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_015_src_endofpacket;                                                                  // router_015:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          chaos_code_step_s1_agent_rp_valid;                                                           // chaos_code_step_s1_agent:rp_valid -> router_016:sink_valid
	wire  [111:0] chaos_code_step_s1_agent_rp_data;                                                            // chaos_code_step_s1_agent:rp_data -> router_016:sink_data
	wire          chaos_code_step_s1_agent_rp_ready;                                                           // router_016:sink_ready -> chaos_code_step_s1_agent:rp_ready
	wire          chaos_code_step_s1_agent_rp_startofpacket;                                                   // chaos_code_step_s1_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          chaos_code_step_s1_agent_rp_endofpacket;                                                     // chaos_code_step_s1_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                                        // router_016:src_valid -> rsp_demux_013:sink_valid
	wire  [111:0] router_016_src_data;                                                                         // router_016:src_data -> rsp_demux_013:sink_data
	wire          router_016_src_ready;                                                                        // rsp_demux_013:sink_ready -> router_016:src_ready
	wire   [20:0] router_016_src_channel;                                                                      // router_016:src_channel -> rsp_demux_013:sink_channel
	wire          router_016_src_startofpacket;                                                                // router_016:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_016_src_endofpacket;                                                                  // router_016:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          chaos_code_reset_s1_agent_rp_valid;                                                          // chaos_code_reset_s1_agent:rp_valid -> router_017:sink_valid
	wire  [111:0] chaos_code_reset_s1_agent_rp_data;                                                           // chaos_code_reset_s1_agent:rp_data -> router_017:sink_data
	wire          chaos_code_reset_s1_agent_rp_ready;                                                          // router_017:sink_ready -> chaos_code_reset_s1_agent:rp_ready
	wire          chaos_code_reset_s1_agent_rp_startofpacket;                                                  // chaos_code_reset_s1_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          chaos_code_reset_s1_agent_rp_endofpacket;                                                    // chaos_code_reset_s1_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                                        // router_017:src_valid -> rsp_demux_014:sink_valid
	wire  [111:0] router_017_src_data;                                                                         // router_017:src_data -> rsp_demux_014:sink_data
	wire          router_017_src_ready;                                                                        // rsp_demux_014:sink_ready -> router_017:src_ready
	wire   [20:0] router_017_src_channel;                                                                      // router_017:src_channel -> rsp_demux_014:sink_channel
	wire          router_017_src_startofpacket;                                                                // router_017:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          router_017_src_endofpacket;                                                                  // router_017:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          chaos_code_shift_s1_agent_rp_valid;                                                          // chaos_code_shift_s1_agent:rp_valid -> router_018:sink_valid
	wire  [111:0] chaos_code_shift_s1_agent_rp_data;                                                           // chaos_code_shift_s1_agent:rp_data -> router_018:sink_data
	wire          chaos_code_shift_s1_agent_rp_ready;                                                          // router_018:sink_ready -> chaos_code_shift_s1_agent:rp_ready
	wire          chaos_code_shift_s1_agent_rp_startofpacket;                                                  // chaos_code_shift_s1_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          chaos_code_shift_s1_agent_rp_endofpacket;                                                    // chaos_code_shift_s1_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          router_018_src_valid;                                                                        // router_018:src_valid -> rsp_demux_015:sink_valid
	wire  [111:0] router_018_src_data;                                                                         // router_018:src_data -> rsp_demux_015:sink_data
	wire          router_018_src_ready;                                                                        // rsp_demux_015:sink_ready -> router_018:src_ready
	wire   [20:0] router_018_src_channel;                                                                      // router_018:src_channel -> rsp_demux_015:sink_channel
	wire          router_018_src_startofpacket;                                                                // router_018:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          router_018_src_endofpacket;                                                                  // router_018:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          chaos_code_done_s1_agent_rp_valid;                                                           // chaos_code_done_s1_agent:rp_valid -> router_019:sink_valid
	wire  [111:0] chaos_code_done_s1_agent_rp_data;                                                            // chaos_code_done_s1_agent:rp_data -> router_019:sink_data
	wire          chaos_code_done_s1_agent_rp_ready;                                                           // router_019:sink_ready -> chaos_code_done_s1_agent:rp_ready
	wire          chaos_code_done_s1_agent_rp_startofpacket;                                                   // chaos_code_done_s1_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire          chaos_code_done_s1_agent_rp_endofpacket;                                                     // chaos_code_done_s1_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          router_019_src_valid;                                                                        // router_019:src_valid -> rsp_demux_016:sink_valid
	wire  [111:0] router_019_src_data;                                                                         // router_019:src_data -> rsp_demux_016:sink_data
	wire          router_019_src_ready;                                                                        // rsp_demux_016:sink_ready -> router_019:src_ready
	wire   [20:0] router_019_src_channel;                                                                      // router_019:src_channel -> rsp_demux_016:sink_channel
	wire          router_019_src_startofpacket;                                                                // router_019:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire          router_019_src_endofpacket;                                                                  // router_019:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          chaos_code_x_s1_agent_rp_valid;                                                              // chaos_code_x_s1_agent:rp_valid -> router_020:sink_valid
	wire  [111:0] chaos_code_x_s1_agent_rp_data;                                                               // chaos_code_x_s1_agent:rp_data -> router_020:sink_data
	wire          chaos_code_x_s1_agent_rp_ready;                                                              // router_020:sink_ready -> chaos_code_x_s1_agent:rp_ready
	wire          chaos_code_x_s1_agent_rp_startofpacket;                                                      // chaos_code_x_s1_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire          chaos_code_x_s1_agent_rp_endofpacket;                                                        // chaos_code_x_s1_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire          router_020_src_valid;                                                                        // router_020:src_valid -> rsp_demux_017:sink_valid
	wire  [111:0] router_020_src_data;                                                                         // router_020:src_data -> rsp_demux_017:sink_data
	wire          router_020_src_ready;                                                                        // rsp_demux_017:sink_ready -> router_020:src_ready
	wire   [20:0] router_020_src_channel;                                                                      // router_020:src_channel -> rsp_demux_017:sink_channel
	wire          router_020_src_startofpacket;                                                                // router_020:src_startofpacket -> rsp_demux_017:sink_startofpacket
	wire          router_020_src_endofpacket;                                                                  // router_020:src_endofpacket -> rsp_demux_017:sink_endofpacket
	wire          chaos_code_y_s1_agent_rp_valid;                                                              // chaos_code_y_s1_agent:rp_valid -> router_021:sink_valid
	wire  [111:0] chaos_code_y_s1_agent_rp_data;                                                               // chaos_code_y_s1_agent:rp_data -> router_021:sink_data
	wire          chaos_code_y_s1_agent_rp_ready;                                                              // router_021:sink_ready -> chaos_code_y_s1_agent:rp_ready
	wire          chaos_code_y_s1_agent_rp_startofpacket;                                                      // chaos_code_y_s1_agent:rp_startofpacket -> router_021:sink_startofpacket
	wire          chaos_code_y_s1_agent_rp_endofpacket;                                                        // chaos_code_y_s1_agent:rp_endofpacket -> router_021:sink_endofpacket
	wire          router_021_src_valid;                                                                        // router_021:src_valid -> rsp_demux_018:sink_valid
	wire  [111:0] router_021_src_data;                                                                         // router_021:src_data -> rsp_demux_018:sink_data
	wire          router_021_src_ready;                                                                        // rsp_demux_018:sink_ready -> router_021:src_ready
	wire   [20:0] router_021_src_channel;                                                                      // router_021:src_channel -> rsp_demux_018:sink_channel
	wire          router_021_src_startofpacket;                                                                // router_021:src_startofpacket -> rsp_demux_018:sink_startofpacket
	wire          router_021_src_endofpacket;                                                                  // router_021:src_endofpacket -> rsp_demux_018:sink_endofpacket
	wire          chaos_code_z_s1_agent_rp_valid;                                                              // chaos_code_z_s1_agent:rp_valid -> router_022:sink_valid
	wire  [111:0] chaos_code_z_s1_agent_rp_data;                                                               // chaos_code_z_s1_agent:rp_data -> router_022:sink_data
	wire          chaos_code_z_s1_agent_rp_ready;                                                              // router_022:sink_ready -> chaos_code_z_s1_agent:rp_ready
	wire          chaos_code_z_s1_agent_rp_startofpacket;                                                      // chaos_code_z_s1_agent:rp_startofpacket -> router_022:sink_startofpacket
	wire          chaos_code_z_s1_agent_rp_endofpacket;                                                        // chaos_code_z_s1_agent:rp_endofpacket -> router_022:sink_endofpacket
	wire          router_022_src_valid;                                                                        // router_022:src_valid -> rsp_demux_019:sink_valid
	wire  [111:0] router_022_src_data;                                                                         // router_022:src_data -> rsp_demux_019:sink_data
	wire          router_022_src_ready;                                                                        // rsp_demux_019:sink_ready -> router_022:src_ready
	wire   [20:0] router_022_src_channel;                                                                      // router_022:src_channel -> rsp_demux_019:sink_channel
	wire          router_022_src_startofpacket;                                                                // router_022:src_startofpacket -> rsp_demux_019:sink_startofpacket
	wire          router_022_src_endofpacket;                                                                  // router_022:src_endofpacket -> rsp_demux_019:sink_endofpacket
	wire          chaos_code_w_s1_agent_rp_valid;                                                              // chaos_code_w_s1_agent:rp_valid -> router_023:sink_valid
	wire  [111:0] chaos_code_w_s1_agent_rp_data;                                                               // chaos_code_w_s1_agent:rp_data -> router_023:sink_data
	wire          chaos_code_w_s1_agent_rp_ready;                                                              // router_023:sink_ready -> chaos_code_w_s1_agent:rp_ready
	wire          chaos_code_w_s1_agent_rp_startofpacket;                                                      // chaos_code_w_s1_agent:rp_startofpacket -> router_023:sink_startofpacket
	wire          chaos_code_w_s1_agent_rp_endofpacket;                                                        // chaos_code_w_s1_agent:rp_endofpacket -> router_023:sink_endofpacket
	wire          router_023_src_valid;                                                                        // router_023:src_valid -> rsp_demux_020:sink_valid
	wire  [111:0] router_023_src_data;                                                                         // router_023:src_data -> rsp_demux_020:sink_data
	wire          router_023_src_ready;                                                                        // rsp_demux_020:sink_ready -> router_023:src_ready
	wire   [20:0] router_023_src_channel;                                                                      // router_023:src_channel -> rsp_demux_020:sink_channel
	wire          router_023_src_startofpacket;                                                                // router_023:src_startofpacket -> rsp_demux_020:sink_startofpacket
	wire          router_023_src_endofpacket;                                                                  // router_023:src_endofpacket -> rsp_demux_020:sink_endofpacket
	wire          router_001_src_valid;                                                                        // router_001:src_valid -> nios2_gen2_data_master_limiter:cmd_sink_valid
	wire  [111:0] router_001_src_data;                                                                         // router_001:src_data -> nios2_gen2_data_master_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                                        // nios2_gen2_data_master_limiter:cmd_sink_ready -> router_001:src_ready
	wire   [20:0] router_001_src_channel;                                                                      // router_001:src_channel -> nios2_gen2_data_master_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                                // router_001:src_startofpacket -> nios2_gen2_data_master_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                                  // router_001:src_endofpacket -> nios2_gen2_data_master_limiter:cmd_sink_endofpacket
	wire  [111:0] nios2_gen2_data_master_limiter_cmd_src_data;                                                 // nios2_gen2_data_master_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          nios2_gen2_data_master_limiter_cmd_src_ready;                                                // cmd_demux_001:sink_ready -> nios2_gen2_data_master_limiter:cmd_src_ready
	wire   [20:0] nios2_gen2_data_master_limiter_cmd_src_channel;                                              // nios2_gen2_data_master_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          nios2_gen2_data_master_limiter_cmd_src_startofpacket;                                        // nios2_gen2_data_master_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          nios2_gen2_data_master_limiter_cmd_src_endofpacket;                                          // nios2_gen2_data_master_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                                       // rsp_mux_001:src_valid -> nios2_gen2_data_master_limiter:rsp_sink_valid
	wire  [111:0] rsp_mux_001_src_data;                                                                        // rsp_mux_001:src_data -> nios2_gen2_data_master_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                                       // nios2_gen2_data_master_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire   [20:0] rsp_mux_001_src_channel;                                                                     // rsp_mux_001:src_channel -> nios2_gen2_data_master_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                                               // rsp_mux_001:src_startofpacket -> nios2_gen2_data_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                                 // rsp_mux_001:src_endofpacket -> nios2_gen2_data_master_limiter:rsp_sink_endofpacket
	wire          nios2_gen2_data_master_limiter_rsp_src_valid;                                                // nios2_gen2_data_master_limiter:rsp_src_valid -> nios2_gen2_data_master_agent:rp_valid
	wire  [111:0] nios2_gen2_data_master_limiter_rsp_src_data;                                                 // nios2_gen2_data_master_limiter:rsp_src_data -> nios2_gen2_data_master_agent:rp_data
	wire          nios2_gen2_data_master_limiter_rsp_src_ready;                                                // nios2_gen2_data_master_agent:rp_ready -> nios2_gen2_data_master_limiter:rsp_src_ready
	wire   [20:0] nios2_gen2_data_master_limiter_rsp_src_channel;                                              // nios2_gen2_data_master_limiter:rsp_src_channel -> nios2_gen2_data_master_agent:rp_channel
	wire          nios2_gen2_data_master_limiter_rsp_src_startofpacket;                                        // nios2_gen2_data_master_limiter:rsp_src_startofpacket -> nios2_gen2_data_master_agent:rp_startofpacket
	wire          nios2_gen2_data_master_limiter_rsp_src_endofpacket;                                          // nios2_gen2_data_master_limiter:rsp_src_endofpacket -> nios2_gen2_data_master_agent:rp_endofpacket
	wire          router_002_src_valid;                                                                        // router_002:src_valid -> nios2_gen2_instruction_master_limiter:cmd_sink_valid
	wire  [111:0] router_002_src_data;                                                                         // router_002:src_data -> nios2_gen2_instruction_master_limiter:cmd_sink_data
	wire          router_002_src_ready;                                                                        // nios2_gen2_instruction_master_limiter:cmd_sink_ready -> router_002:src_ready
	wire   [20:0] router_002_src_channel;                                                                      // router_002:src_channel -> nios2_gen2_instruction_master_limiter:cmd_sink_channel
	wire          router_002_src_startofpacket;                                                                // router_002:src_startofpacket -> nios2_gen2_instruction_master_limiter:cmd_sink_startofpacket
	wire          router_002_src_endofpacket;                                                                  // router_002:src_endofpacket -> nios2_gen2_instruction_master_limiter:cmd_sink_endofpacket
	wire  [111:0] nios2_gen2_instruction_master_limiter_cmd_src_data;                                          // nios2_gen2_instruction_master_limiter:cmd_src_data -> cmd_demux_002:sink_data
	wire          nios2_gen2_instruction_master_limiter_cmd_src_ready;                                         // cmd_demux_002:sink_ready -> nios2_gen2_instruction_master_limiter:cmd_src_ready
	wire   [20:0] nios2_gen2_instruction_master_limiter_cmd_src_channel;                                       // nios2_gen2_instruction_master_limiter:cmd_src_channel -> cmd_demux_002:sink_channel
	wire          nios2_gen2_instruction_master_limiter_cmd_src_startofpacket;                                 // nios2_gen2_instruction_master_limiter:cmd_src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          nios2_gen2_instruction_master_limiter_cmd_src_endofpacket;                                   // nios2_gen2_instruction_master_limiter:cmd_src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          rsp_mux_002_src_valid;                                                                       // rsp_mux_002:src_valid -> nios2_gen2_instruction_master_limiter:rsp_sink_valid
	wire  [111:0] rsp_mux_002_src_data;                                                                        // rsp_mux_002:src_data -> nios2_gen2_instruction_master_limiter:rsp_sink_data
	wire          rsp_mux_002_src_ready;                                                                       // nios2_gen2_instruction_master_limiter:rsp_sink_ready -> rsp_mux_002:src_ready
	wire   [20:0] rsp_mux_002_src_channel;                                                                     // rsp_mux_002:src_channel -> nios2_gen2_instruction_master_limiter:rsp_sink_channel
	wire          rsp_mux_002_src_startofpacket;                                                               // rsp_mux_002:src_startofpacket -> nios2_gen2_instruction_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                                 // rsp_mux_002:src_endofpacket -> nios2_gen2_instruction_master_limiter:rsp_sink_endofpacket
	wire          nios2_gen2_instruction_master_limiter_rsp_src_valid;                                         // nios2_gen2_instruction_master_limiter:rsp_src_valid -> nios2_gen2_instruction_master_agent:rp_valid
	wire  [111:0] nios2_gen2_instruction_master_limiter_rsp_src_data;                                          // nios2_gen2_instruction_master_limiter:rsp_src_data -> nios2_gen2_instruction_master_agent:rp_data
	wire          nios2_gen2_instruction_master_limiter_rsp_src_ready;                                         // nios2_gen2_instruction_master_agent:rp_ready -> nios2_gen2_instruction_master_limiter:rsp_src_ready
	wire   [20:0] nios2_gen2_instruction_master_limiter_rsp_src_channel;                                       // nios2_gen2_instruction_master_limiter:rsp_src_channel -> nios2_gen2_instruction_master_agent:rp_channel
	wire          nios2_gen2_instruction_master_limiter_rsp_src_startofpacket;                                 // nios2_gen2_instruction_master_limiter:rsp_src_startofpacket -> nios2_gen2_instruction_master_agent:rp_startofpacket
	wire          nios2_gen2_instruction_master_limiter_rsp_src_endofpacket;                                   // nios2_gen2_instruction_master_limiter:rsp_src_endofpacket -> nios2_gen2_instruction_master_agent:rp_endofpacket
	wire          pixel_buffer_avalon_sram_slave_burst_adapter_source0_valid;                                  // pixel_buffer_avalon_sram_slave_burst_adapter:source0_valid -> pixel_buffer_avalon_sram_slave_agent:cp_valid
	wire   [93:0] pixel_buffer_avalon_sram_slave_burst_adapter_source0_data;                                   // pixel_buffer_avalon_sram_slave_burst_adapter:source0_data -> pixel_buffer_avalon_sram_slave_agent:cp_data
	wire          pixel_buffer_avalon_sram_slave_burst_adapter_source0_ready;                                  // pixel_buffer_avalon_sram_slave_agent:cp_ready -> pixel_buffer_avalon_sram_slave_burst_adapter:source0_ready
	wire   [20:0] pixel_buffer_avalon_sram_slave_burst_adapter_source0_channel;                                // pixel_buffer_avalon_sram_slave_burst_adapter:source0_channel -> pixel_buffer_avalon_sram_slave_agent:cp_channel
	wire          pixel_buffer_avalon_sram_slave_burst_adapter_source0_startofpacket;                          // pixel_buffer_avalon_sram_slave_burst_adapter:source0_startofpacket -> pixel_buffer_avalon_sram_slave_agent:cp_startofpacket
	wire          pixel_buffer_avalon_sram_slave_burst_adapter_source0_endofpacket;                            // pixel_buffer_avalon_sram_slave_burst_adapter:source0_endofpacket -> pixel_buffer_avalon_sram_slave_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                                        // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [111:0] cmd_demux_src0_data;                                                                         // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                                        // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [20:0] cmd_demux_src0_channel;                                                                      // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                                // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                                  // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                                    // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [111:0] cmd_demux_001_src0_data;                                                                     // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                                                    // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire   [20:0] cmd_demux_001_src0_channel;                                                                  // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                            // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                              // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                                    // cmd_demux_001:src1_valid -> cmd_mux_001:sink0_valid
	wire  [111:0] cmd_demux_001_src1_data;                                                                     // cmd_demux_001:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_001_src1_ready;                                                                    // cmd_mux_001:sink0_ready -> cmd_demux_001:src1_ready
	wire   [20:0] cmd_demux_001_src1_channel;                                                                  // cmd_demux_001:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_001_src1_startofpacket;                                                            // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                              // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_001_src2_valid;                                                                    // cmd_demux_001:src2_valid -> cmd_mux_002:sink0_valid
	wire  [111:0] cmd_demux_001_src2_data;                                                                     // cmd_demux_001:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_001_src2_ready;                                                                    // cmd_mux_002:sink0_ready -> cmd_demux_001:src2_ready
	wire   [20:0] cmd_demux_001_src2_channel;                                                                  // cmd_demux_001:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_001_src2_startofpacket;                                                            // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                              // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_001_src3_valid;                                                                    // cmd_demux_001:src3_valid -> cmd_mux_003:sink0_valid
	wire  [111:0] cmd_demux_001_src3_data;                                                                     // cmd_demux_001:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_001_src3_ready;                                                                    // cmd_mux_003:sink0_ready -> cmd_demux_001:src3_ready
	wire   [20:0] cmd_demux_001_src3_channel;                                                                  // cmd_demux_001:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_001_src3_startofpacket;                                                            // cmd_demux_001:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                                              // cmd_demux_001:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_001_src4_valid;                                                                    // cmd_demux_001:src4_valid -> cmd_mux_004:sink0_valid
	wire  [111:0] cmd_demux_001_src4_data;                                                                     // cmd_demux_001:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_001_src4_ready;                                                                    // cmd_mux_004:sink0_ready -> cmd_demux_001:src4_ready
	wire   [20:0] cmd_demux_001_src4_channel;                                                                  // cmd_demux_001:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_001_src4_startofpacket;                                                            // cmd_demux_001:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                                              // cmd_demux_001:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_001_src5_valid;                                                                    // cmd_demux_001:src5_valid -> cmd_mux_005:sink0_valid
	wire  [111:0] cmd_demux_001_src5_data;                                                                     // cmd_demux_001:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_001_src5_ready;                                                                    // cmd_mux_005:sink0_ready -> cmd_demux_001:src5_ready
	wire   [20:0] cmd_demux_001_src5_channel;                                                                  // cmd_demux_001:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_001_src5_startofpacket;                                                            // cmd_demux_001:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                                                              // cmd_demux_001:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_001_src7_valid;                                                                    // cmd_demux_001:src7_valid -> cmd_mux_007:sink0_valid
	wire  [111:0] cmd_demux_001_src7_data;                                                                     // cmd_demux_001:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_001_src7_ready;                                                                    // cmd_mux_007:sink0_ready -> cmd_demux_001:src7_ready
	wire   [20:0] cmd_demux_001_src7_channel;                                                                  // cmd_demux_001:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_001_src7_startofpacket;                                                            // cmd_demux_001:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_001_src7_endofpacket;                                                              // cmd_demux_001:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_001_src8_valid;                                                                    // cmd_demux_001:src8_valid -> cmd_mux_008:sink0_valid
	wire  [111:0] cmd_demux_001_src8_data;                                                                     // cmd_demux_001:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_001_src8_ready;                                                                    // cmd_mux_008:sink0_ready -> cmd_demux_001:src8_ready
	wire   [20:0] cmd_demux_001_src8_channel;                                                                  // cmd_demux_001:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_001_src8_startofpacket;                                                            // cmd_demux_001:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_001_src8_endofpacket;                                                              // cmd_demux_001:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_001_src9_valid;                                                                    // cmd_demux_001:src9_valid -> cmd_mux_009:sink0_valid
	wire  [111:0] cmd_demux_001_src9_data;                                                                     // cmd_demux_001:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_001_src9_ready;                                                                    // cmd_mux_009:sink0_ready -> cmd_demux_001:src9_ready
	wire   [20:0] cmd_demux_001_src9_channel;                                                                  // cmd_demux_001:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_001_src9_startofpacket;                                                            // cmd_demux_001:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_001_src9_endofpacket;                                                              // cmd_demux_001:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_001_src10_valid;                                                                   // cmd_demux_001:src10_valid -> cmd_mux_010:sink0_valid
	wire  [111:0] cmd_demux_001_src10_data;                                                                    // cmd_demux_001:src10_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_001_src10_ready;                                                                   // cmd_mux_010:sink0_ready -> cmd_demux_001:src10_ready
	wire   [20:0] cmd_demux_001_src10_channel;                                                                 // cmd_demux_001:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_001_src10_startofpacket;                                                           // cmd_demux_001:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_001_src10_endofpacket;                                                             // cmd_demux_001:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_001_src11_valid;                                                                   // cmd_demux_001:src11_valid -> cmd_mux_011:sink0_valid
	wire  [111:0] cmd_demux_001_src11_data;                                                                    // cmd_demux_001:src11_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_001_src11_ready;                                                                   // cmd_mux_011:sink0_ready -> cmd_demux_001:src11_ready
	wire   [20:0] cmd_demux_001_src11_channel;                                                                 // cmd_demux_001:src11_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_001_src11_startofpacket;                                                           // cmd_demux_001:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_001_src11_endofpacket;                                                             // cmd_demux_001:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_001_src12_valid;                                                                   // cmd_demux_001:src12_valid -> cmd_mux_012:sink0_valid
	wire  [111:0] cmd_demux_001_src12_data;                                                                    // cmd_demux_001:src12_data -> cmd_mux_012:sink0_data
	wire          cmd_demux_001_src12_ready;                                                                   // cmd_mux_012:sink0_ready -> cmd_demux_001:src12_ready
	wire   [20:0] cmd_demux_001_src12_channel;                                                                 // cmd_demux_001:src12_channel -> cmd_mux_012:sink0_channel
	wire          cmd_demux_001_src12_startofpacket;                                                           // cmd_demux_001:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          cmd_demux_001_src12_endofpacket;                                                             // cmd_demux_001:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_001_src13_valid;                                                                   // cmd_demux_001:src13_valid -> cmd_mux_013:sink0_valid
	wire  [111:0] cmd_demux_001_src13_data;                                                                    // cmd_demux_001:src13_data -> cmd_mux_013:sink0_data
	wire          cmd_demux_001_src13_ready;                                                                   // cmd_mux_013:sink0_ready -> cmd_demux_001:src13_ready
	wire   [20:0] cmd_demux_001_src13_channel;                                                                 // cmd_demux_001:src13_channel -> cmd_mux_013:sink0_channel
	wire          cmd_demux_001_src13_startofpacket;                                                           // cmd_demux_001:src13_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          cmd_demux_001_src13_endofpacket;                                                             // cmd_demux_001:src13_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_001_src14_valid;                                                                   // cmd_demux_001:src14_valid -> cmd_mux_014:sink0_valid
	wire  [111:0] cmd_demux_001_src14_data;                                                                    // cmd_demux_001:src14_data -> cmd_mux_014:sink0_data
	wire          cmd_demux_001_src14_ready;                                                                   // cmd_mux_014:sink0_ready -> cmd_demux_001:src14_ready
	wire   [20:0] cmd_demux_001_src14_channel;                                                                 // cmd_demux_001:src14_channel -> cmd_mux_014:sink0_channel
	wire          cmd_demux_001_src14_startofpacket;                                                           // cmd_demux_001:src14_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          cmd_demux_001_src14_endofpacket;                                                             // cmd_demux_001:src14_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_001_src15_valid;                                                                   // cmd_demux_001:src15_valid -> cmd_mux_015:sink0_valid
	wire  [111:0] cmd_demux_001_src15_data;                                                                    // cmd_demux_001:src15_data -> cmd_mux_015:sink0_data
	wire          cmd_demux_001_src15_ready;                                                                   // cmd_mux_015:sink0_ready -> cmd_demux_001:src15_ready
	wire   [20:0] cmd_demux_001_src15_channel;                                                                 // cmd_demux_001:src15_channel -> cmd_mux_015:sink0_channel
	wire          cmd_demux_001_src15_startofpacket;                                                           // cmd_demux_001:src15_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          cmd_demux_001_src15_endofpacket;                                                             // cmd_demux_001:src15_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_001_src16_valid;                                                                   // cmd_demux_001:src16_valid -> cmd_mux_016:sink0_valid
	wire  [111:0] cmd_demux_001_src16_data;                                                                    // cmd_demux_001:src16_data -> cmd_mux_016:sink0_data
	wire          cmd_demux_001_src16_ready;                                                                   // cmd_mux_016:sink0_ready -> cmd_demux_001:src16_ready
	wire   [20:0] cmd_demux_001_src16_channel;                                                                 // cmd_demux_001:src16_channel -> cmd_mux_016:sink0_channel
	wire          cmd_demux_001_src16_startofpacket;                                                           // cmd_demux_001:src16_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire          cmd_demux_001_src16_endofpacket;                                                             // cmd_demux_001:src16_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          cmd_demux_001_src17_valid;                                                                   // cmd_demux_001:src17_valid -> cmd_mux_017:sink0_valid
	wire  [111:0] cmd_demux_001_src17_data;                                                                    // cmd_demux_001:src17_data -> cmd_mux_017:sink0_data
	wire          cmd_demux_001_src17_ready;                                                                   // cmd_mux_017:sink0_ready -> cmd_demux_001:src17_ready
	wire   [20:0] cmd_demux_001_src17_channel;                                                                 // cmd_demux_001:src17_channel -> cmd_mux_017:sink0_channel
	wire          cmd_demux_001_src17_startofpacket;                                                           // cmd_demux_001:src17_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire          cmd_demux_001_src17_endofpacket;                                                             // cmd_demux_001:src17_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire          cmd_demux_001_src18_valid;                                                                   // cmd_demux_001:src18_valid -> cmd_mux_018:sink0_valid
	wire  [111:0] cmd_demux_001_src18_data;                                                                    // cmd_demux_001:src18_data -> cmd_mux_018:sink0_data
	wire          cmd_demux_001_src18_ready;                                                                   // cmd_mux_018:sink0_ready -> cmd_demux_001:src18_ready
	wire   [20:0] cmd_demux_001_src18_channel;                                                                 // cmd_demux_001:src18_channel -> cmd_mux_018:sink0_channel
	wire          cmd_demux_001_src18_startofpacket;                                                           // cmd_demux_001:src18_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire          cmd_demux_001_src18_endofpacket;                                                             // cmd_demux_001:src18_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire          cmd_demux_001_src19_valid;                                                                   // cmd_demux_001:src19_valid -> cmd_mux_019:sink0_valid
	wire  [111:0] cmd_demux_001_src19_data;                                                                    // cmd_demux_001:src19_data -> cmd_mux_019:sink0_data
	wire          cmd_demux_001_src19_ready;                                                                   // cmd_mux_019:sink0_ready -> cmd_demux_001:src19_ready
	wire   [20:0] cmd_demux_001_src19_channel;                                                                 // cmd_demux_001:src19_channel -> cmd_mux_019:sink0_channel
	wire          cmd_demux_001_src19_startofpacket;                                                           // cmd_demux_001:src19_startofpacket -> cmd_mux_019:sink0_startofpacket
	wire          cmd_demux_001_src19_endofpacket;                                                             // cmd_demux_001:src19_endofpacket -> cmd_mux_019:sink0_endofpacket
	wire          cmd_demux_001_src20_valid;                                                                   // cmd_demux_001:src20_valid -> cmd_mux_020:sink0_valid
	wire  [111:0] cmd_demux_001_src20_data;                                                                    // cmd_demux_001:src20_data -> cmd_mux_020:sink0_data
	wire          cmd_demux_001_src20_ready;                                                                   // cmd_mux_020:sink0_ready -> cmd_demux_001:src20_ready
	wire   [20:0] cmd_demux_001_src20_channel;                                                                 // cmd_demux_001:src20_channel -> cmd_mux_020:sink0_channel
	wire          cmd_demux_001_src20_startofpacket;                                                           // cmd_demux_001:src20_startofpacket -> cmd_mux_020:sink0_startofpacket
	wire          cmd_demux_001_src20_endofpacket;                                                             // cmd_demux_001:src20_endofpacket -> cmd_mux_020:sink0_endofpacket
	wire          cmd_demux_002_src0_valid;                                                                    // cmd_demux_002:src0_valid -> cmd_mux_005:sink1_valid
	wire  [111:0] cmd_demux_002_src0_data;                                                                     // cmd_demux_002:src0_data -> cmd_mux_005:sink1_data
	wire          cmd_demux_002_src0_ready;                                                                    // cmd_mux_005:sink1_ready -> cmd_demux_002:src0_ready
	wire   [20:0] cmd_demux_002_src0_channel;                                                                  // cmd_demux_002:src0_channel -> cmd_mux_005:sink1_channel
	wire          cmd_demux_002_src0_startofpacket;                                                            // cmd_demux_002:src0_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                              // cmd_demux_002:src0_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          cmd_demux_002_src1_valid;                                                                    // cmd_demux_002:src1_valid -> cmd_mux_007:sink1_valid
	wire  [111:0] cmd_demux_002_src1_data;                                                                     // cmd_demux_002:src1_data -> cmd_mux_007:sink1_data
	wire          cmd_demux_002_src1_ready;                                                                    // cmd_mux_007:sink1_ready -> cmd_demux_002:src1_ready
	wire   [20:0] cmd_demux_002_src1_channel;                                                                  // cmd_demux_002:src1_channel -> cmd_mux_007:sink1_channel
	wire          cmd_demux_002_src1_startofpacket;                                                            // cmd_demux_002:src1_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                                              // cmd_demux_002:src1_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                                        // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [111:0] rsp_demux_src0_data;                                                                         // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                                        // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [20:0] rsp_demux_src0_channel;                                                                      // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                                // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                                  // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                                        // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [111:0] rsp_demux_src1_data;                                                                         // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                                        // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire   [20:0] rsp_demux_src1_channel;                                                                      // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                                                // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                                  // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                                    // rsp_demux_001:src0_valid -> rsp_mux_001:sink1_valid
	wire  [111:0] rsp_demux_001_src0_data;                                                                     // rsp_demux_001:src0_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_001_src0_ready;                                                                    // rsp_mux_001:sink1_ready -> rsp_demux_001:src0_ready
	wire   [20:0] rsp_demux_001_src0_channel;                                                                  // rsp_demux_001:src0_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                            // rsp_demux_001:src0_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                              // rsp_demux_001:src0_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                                    // rsp_demux_002:src0_valid -> rsp_mux_001:sink2_valid
	wire  [111:0] rsp_demux_002_src0_data;                                                                     // rsp_demux_002:src0_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_002_src0_ready;                                                                    // rsp_mux_001:sink2_ready -> rsp_demux_002:src0_ready
	wire   [20:0] rsp_demux_002_src0_channel;                                                                  // rsp_demux_002:src0_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                            // rsp_demux_002:src0_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                              // rsp_demux_002:src0_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                                    // rsp_demux_003:src0_valid -> rsp_mux_001:sink3_valid
	wire  [111:0] rsp_demux_003_src0_data;                                                                     // rsp_demux_003:src0_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_003_src0_ready;                                                                    // rsp_mux_001:sink3_ready -> rsp_demux_003:src0_ready
	wire   [20:0] rsp_demux_003_src0_channel;                                                                  // rsp_demux_003:src0_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                            // rsp_demux_003:src0_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                              // rsp_demux_003:src0_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                                    // rsp_demux_004:src0_valid -> rsp_mux_001:sink4_valid
	wire  [111:0] rsp_demux_004_src0_data;                                                                     // rsp_demux_004:src0_data -> rsp_mux_001:sink4_data
	wire          rsp_demux_004_src0_ready;                                                                    // rsp_mux_001:sink4_ready -> rsp_demux_004:src0_ready
	wire   [20:0] rsp_demux_004_src0_channel;                                                                  // rsp_demux_004:src0_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                            // rsp_demux_004:src0_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                              // rsp_demux_004:src0_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                                    // rsp_demux_005:src0_valid -> rsp_mux_001:sink5_valid
	wire  [111:0] rsp_demux_005_src0_data;                                                                     // rsp_demux_005:src0_data -> rsp_mux_001:sink5_data
	wire          rsp_demux_005_src0_ready;                                                                    // rsp_mux_001:sink5_ready -> rsp_demux_005:src0_ready
	wire   [20:0] rsp_demux_005_src0_channel;                                                                  // rsp_demux_005:src0_channel -> rsp_mux_001:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                            // rsp_demux_005:src0_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                              // rsp_demux_005:src0_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                                                    // rsp_demux_005:src1_valid -> rsp_mux_002:sink0_valid
	wire  [111:0] rsp_demux_005_src1_data;                                                                     // rsp_demux_005:src1_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_005_src1_ready;                                                                    // rsp_mux_002:sink0_ready -> rsp_demux_005:src1_ready
	wire   [20:0] rsp_demux_005_src1_channel;                                                                  // rsp_demux_005:src1_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_005_src1_startofpacket;                                                            // rsp_demux_005:src1_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                                              // rsp_demux_005:src1_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_007_src0_valid;                                                                    // rsp_demux_007:src0_valid -> rsp_mux_001:sink7_valid
	wire  [111:0] rsp_demux_007_src0_data;                                                                     // rsp_demux_007:src0_data -> rsp_mux_001:sink7_data
	wire          rsp_demux_007_src0_ready;                                                                    // rsp_mux_001:sink7_ready -> rsp_demux_007:src0_ready
	wire   [20:0] rsp_demux_007_src0_channel;                                                                  // rsp_demux_007:src0_channel -> rsp_mux_001:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                                            // rsp_demux_007:src0_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                              // rsp_demux_007:src0_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire          rsp_demux_007_src1_valid;                                                                    // rsp_demux_007:src1_valid -> rsp_mux_002:sink1_valid
	wire  [111:0] rsp_demux_007_src1_data;                                                                     // rsp_demux_007:src1_data -> rsp_mux_002:sink1_data
	wire          rsp_demux_007_src1_ready;                                                                    // rsp_mux_002:sink1_ready -> rsp_demux_007:src1_ready
	wire   [20:0] rsp_demux_007_src1_channel;                                                                  // rsp_demux_007:src1_channel -> rsp_mux_002:sink1_channel
	wire          rsp_demux_007_src1_startofpacket;                                                            // rsp_demux_007:src1_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          rsp_demux_007_src1_endofpacket;                                                              // rsp_demux_007:src1_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          rsp_demux_008_src0_valid;                                                                    // rsp_demux_008:src0_valid -> rsp_mux_001:sink8_valid
	wire  [111:0] rsp_demux_008_src0_data;                                                                     // rsp_demux_008:src0_data -> rsp_mux_001:sink8_data
	wire          rsp_demux_008_src0_ready;                                                                    // rsp_mux_001:sink8_ready -> rsp_demux_008:src0_ready
	wire   [20:0] rsp_demux_008_src0_channel;                                                                  // rsp_demux_008:src0_channel -> rsp_mux_001:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                                            // rsp_demux_008:src0_startofpacket -> rsp_mux_001:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                              // rsp_demux_008:src0_endofpacket -> rsp_mux_001:sink8_endofpacket
	wire          rsp_demux_009_src0_valid;                                                                    // rsp_demux_009:src0_valid -> rsp_mux_001:sink9_valid
	wire  [111:0] rsp_demux_009_src0_data;                                                                     // rsp_demux_009:src0_data -> rsp_mux_001:sink9_data
	wire          rsp_demux_009_src0_ready;                                                                    // rsp_mux_001:sink9_ready -> rsp_demux_009:src0_ready
	wire   [20:0] rsp_demux_009_src0_channel;                                                                  // rsp_demux_009:src0_channel -> rsp_mux_001:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                                                            // rsp_demux_009:src0_startofpacket -> rsp_mux_001:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                              // rsp_demux_009:src0_endofpacket -> rsp_mux_001:sink9_endofpacket
	wire          rsp_demux_010_src0_valid;                                                                    // rsp_demux_010:src0_valid -> rsp_mux_001:sink10_valid
	wire  [111:0] rsp_demux_010_src0_data;                                                                     // rsp_demux_010:src0_data -> rsp_mux_001:sink10_data
	wire          rsp_demux_010_src0_ready;                                                                    // rsp_mux_001:sink10_ready -> rsp_demux_010:src0_ready
	wire   [20:0] rsp_demux_010_src0_channel;                                                                  // rsp_demux_010:src0_channel -> rsp_mux_001:sink10_channel
	wire          rsp_demux_010_src0_startofpacket;                                                            // rsp_demux_010:src0_startofpacket -> rsp_mux_001:sink10_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                              // rsp_demux_010:src0_endofpacket -> rsp_mux_001:sink10_endofpacket
	wire          rsp_demux_011_src0_valid;                                                                    // rsp_demux_011:src0_valid -> rsp_mux_001:sink11_valid
	wire  [111:0] rsp_demux_011_src0_data;                                                                     // rsp_demux_011:src0_data -> rsp_mux_001:sink11_data
	wire          rsp_demux_011_src0_ready;                                                                    // rsp_mux_001:sink11_ready -> rsp_demux_011:src0_ready
	wire   [20:0] rsp_demux_011_src0_channel;                                                                  // rsp_demux_011:src0_channel -> rsp_mux_001:sink11_channel
	wire          rsp_demux_011_src0_startofpacket;                                                            // rsp_demux_011:src0_startofpacket -> rsp_mux_001:sink11_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                                              // rsp_demux_011:src0_endofpacket -> rsp_mux_001:sink11_endofpacket
	wire          rsp_demux_012_src0_valid;                                                                    // rsp_demux_012:src0_valid -> rsp_mux_001:sink12_valid
	wire  [111:0] rsp_demux_012_src0_data;                                                                     // rsp_demux_012:src0_data -> rsp_mux_001:sink12_data
	wire          rsp_demux_012_src0_ready;                                                                    // rsp_mux_001:sink12_ready -> rsp_demux_012:src0_ready
	wire   [20:0] rsp_demux_012_src0_channel;                                                                  // rsp_demux_012:src0_channel -> rsp_mux_001:sink12_channel
	wire          rsp_demux_012_src0_startofpacket;                                                            // rsp_demux_012:src0_startofpacket -> rsp_mux_001:sink12_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                                              // rsp_demux_012:src0_endofpacket -> rsp_mux_001:sink12_endofpacket
	wire          rsp_demux_013_src0_valid;                                                                    // rsp_demux_013:src0_valid -> rsp_mux_001:sink13_valid
	wire  [111:0] rsp_demux_013_src0_data;                                                                     // rsp_demux_013:src0_data -> rsp_mux_001:sink13_data
	wire          rsp_demux_013_src0_ready;                                                                    // rsp_mux_001:sink13_ready -> rsp_demux_013:src0_ready
	wire   [20:0] rsp_demux_013_src0_channel;                                                                  // rsp_demux_013:src0_channel -> rsp_mux_001:sink13_channel
	wire          rsp_demux_013_src0_startofpacket;                                                            // rsp_demux_013:src0_startofpacket -> rsp_mux_001:sink13_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                                              // rsp_demux_013:src0_endofpacket -> rsp_mux_001:sink13_endofpacket
	wire          rsp_demux_014_src0_valid;                                                                    // rsp_demux_014:src0_valid -> rsp_mux_001:sink14_valid
	wire  [111:0] rsp_demux_014_src0_data;                                                                     // rsp_demux_014:src0_data -> rsp_mux_001:sink14_data
	wire          rsp_demux_014_src0_ready;                                                                    // rsp_mux_001:sink14_ready -> rsp_demux_014:src0_ready
	wire   [20:0] rsp_demux_014_src0_channel;                                                                  // rsp_demux_014:src0_channel -> rsp_mux_001:sink14_channel
	wire          rsp_demux_014_src0_startofpacket;                                                            // rsp_demux_014:src0_startofpacket -> rsp_mux_001:sink14_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                                              // rsp_demux_014:src0_endofpacket -> rsp_mux_001:sink14_endofpacket
	wire          rsp_demux_015_src0_valid;                                                                    // rsp_demux_015:src0_valid -> rsp_mux_001:sink15_valid
	wire  [111:0] rsp_demux_015_src0_data;                                                                     // rsp_demux_015:src0_data -> rsp_mux_001:sink15_data
	wire          rsp_demux_015_src0_ready;                                                                    // rsp_mux_001:sink15_ready -> rsp_demux_015:src0_ready
	wire   [20:0] rsp_demux_015_src0_channel;                                                                  // rsp_demux_015:src0_channel -> rsp_mux_001:sink15_channel
	wire          rsp_demux_015_src0_startofpacket;                                                            // rsp_demux_015:src0_startofpacket -> rsp_mux_001:sink15_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                                              // rsp_demux_015:src0_endofpacket -> rsp_mux_001:sink15_endofpacket
	wire          rsp_demux_016_src0_valid;                                                                    // rsp_demux_016:src0_valid -> rsp_mux_001:sink16_valid
	wire  [111:0] rsp_demux_016_src0_data;                                                                     // rsp_demux_016:src0_data -> rsp_mux_001:sink16_data
	wire          rsp_demux_016_src0_ready;                                                                    // rsp_mux_001:sink16_ready -> rsp_demux_016:src0_ready
	wire   [20:0] rsp_demux_016_src0_channel;                                                                  // rsp_demux_016:src0_channel -> rsp_mux_001:sink16_channel
	wire          rsp_demux_016_src0_startofpacket;                                                            // rsp_demux_016:src0_startofpacket -> rsp_mux_001:sink16_startofpacket
	wire          rsp_demux_016_src0_endofpacket;                                                              // rsp_demux_016:src0_endofpacket -> rsp_mux_001:sink16_endofpacket
	wire          rsp_demux_017_src0_valid;                                                                    // rsp_demux_017:src0_valid -> rsp_mux_001:sink17_valid
	wire  [111:0] rsp_demux_017_src0_data;                                                                     // rsp_demux_017:src0_data -> rsp_mux_001:sink17_data
	wire          rsp_demux_017_src0_ready;                                                                    // rsp_mux_001:sink17_ready -> rsp_demux_017:src0_ready
	wire   [20:0] rsp_demux_017_src0_channel;                                                                  // rsp_demux_017:src0_channel -> rsp_mux_001:sink17_channel
	wire          rsp_demux_017_src0_startofpacket;                                                            // rsp_demux_017:src0_startofpacket -> rsp_mux_001:sink17_startofpacket
	wire          rsp_demux_017_src0_endofpacket;                                                              // rsp_demux_017:src0_endofpacket -> rsp_mux_001:sink17_endofpacket
	wire          rsp_demux_018_src0_valid;                                                                    // rsp_demux_018:src0_valid -> rsp_mux_001:sink18_valid
	wire  [111:0] rsp_demux_018_src0_data;                                                                     // rsp_demux_018:src0_data -> rsp_mux_001:sink18_data
	wire          rsp_demux_018_src0_ready;                                                                    // rsp_mux_001:sink18_ready -> rsp_demux_018:src0_ready
	wire   [20:0] rsp_demux_018_src0_channel;                                                                  // rsp_demux_018:src0_channel -> rsp_mux_001:sink18_channel
	wire          rsp_demux_018_src0_startofpacket;                                                            // rsp_demux_018:src0_startofpacket -> rsp_mux_001:sink18_startofpacket
	wire          rsp_demux_018_src0_endofpacket;                                                              // rsp_demux_018:src0_endofpacket -> rsp_mux_001:sink18_endofpacket
	wire          rsp_demux_019_src0_valid;                                                                    // rsp_demux_019:src0_valid -> rsp_mux_001:sink19_valid
	wire  [111:0] rsp_demux_019_src0_data;                                                                     // rsp_demux_019:src0_data -> rsp_mux_001:sink19_data
	wire          rsp_demux_019_src0_ready;                                                                    // rsp_mux_001:sink19_ready -> rsp_demux_019:src0_ready
	wire   [20:0] rsp_demux_019_src0_channel;                                                                  // rsp_demux_019:src0_channel -> rsp_mux_001:sink19_channel
	wire          rsp_demux_019_src0_startofpacket;                                                            // rsp_demux_019:src0_startofpacket -> rsp_mux_001:sink19_startofpacket
	wire          rsp_demux_019_src0_endofpacket;                                                              // rsp_demux_019:src0_endofpacket -> rsp_mux_001:sink19_endofpacket
	wire          rsp_demux_020_src0_valid;                                                                    // rsp_demux_020:src0_valid -> rsp_mux_001:sink20_valid
	wire  [111:0] rsp_demux_020_src0_data;                                                                     // rsp_demux_020:src0_data -> rsp_mux_001:sink20_data
	wire          rsp_demux_020_src0_ready;                                                                    // rsp_mux_001:sink20_ready -> rsp_demux_020:src0_ready
	wire   [20:0] rsp_demux_020_src0_channel;                                                                  // rsp_demux_020:src0_channel -> rsp_mux_001:sink20_channel
	wire          rsp_demux_020_src0_startofpacket;                                                            // rsp_demux_020:src0_startofpacket -> rsp_mux_001:sink20_startofpacket
	wire          rsp_demux_020_src0_endofpacket;                                                              // rsp_demux_020:src0_endofpacket -> rsp_mux_001:sink20_endofpacket
	wire          router_003_src_valid;                                                                        // router_003:src_valid -> pixel_buffer_avalon_sram_slave_rsp_width_adapter:in_valid
	wire   [93:0] router_003_src_data;                                                                         // router_003:src_data -> pixel_buffer_avalon_sram_slave_rsp_width_adapter:in_data
	wire          router_003_src_ready;                                                                        // pixel_buffer_avalon_sram_slave_rsp_width_adapter:in_ready -> router_003:src_ready
	wire   [20:0] router_003_src_channel;                                                                      // router_003:src_channel -> pixel_buffer_avalon_sram_slave_rsp_width_adapter:in_channel
	wire          router_003_src_startofpacket;                                                                // router_003:src_startofpacket -> pixel_buffer_avalon_sram_slave_rsp_width_adapter:in_startofpacket
	wire          router_003_src_endofpacket;                                                                  // router_003:src_endofpacket -> pixel_buffer_avalon_sram_slave_rsp_width_adapter:in_endofpacket
	wire          pixel_buffer_avalon_sram_slave_rsp_width_adapter_src_valid;                                  // pixel_buffer_avalon_sram_slave_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [111:0] pixel_buffer_avalon_sram_slave_rsp_width_adapter_src_data;                                   // pixel_buffer_avalon_sram_slave_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          pixel_buffer_avalon_sram_slave_rsp_width_adapter_src_ready;                                  // rsp_demux:sink_ready -> pixel_buffer_avalon_sram_slave_rsp_width_adapter:out_ready
	wire   [20:0] pixel_buffer_avalon_sram_slave_rsp_width_adapter_src_channel;                                // pixel_buffer_avalon_sram_slave_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          pixel_buffer_avalon_sram_slave_rsp_width_adapter_src_startofpacket;                          // pixel_buffer_avalon_sram_slave_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          pixel_buffer_avalon_sram_slave_rsp_width_adapter_src_endofpacket;                            // pixel_buffer_avalon_sram_slave_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          cmd_mux_src_valid;                                                                           // cmd_mux:src_valid -> pixel_buffer_avalon_sram_slave_cmd_width_adapter:in_valid
	wire  [111:0] cmd_mux_src_data;                                                                            // cmd_mux:src_data -> pixel_buffer_avalon_sram_slave_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                                                           // pixel_buffer_avalon_sram_slave_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire   [20:0] cmd_mux_src_channel;                                                                         // cmd_mux:src_channel -> pixel_buffer_avalon_sram_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                                                   // cmd_mux:src_startofpacket -> pixel_buffer_avalon_sram_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                                                     // cmd_mux:src_endofpacket -> pixel_buffer_avalon_sram_slave_cmd_width_adapter:in_endofpacket
	wire          pixel_buffer_avalon_sram_slave_cmd_width_adapter_src_valid;                                  // pixel_buffer_avalon_sram_slave_cmd_width_adapter:out_valid -> pixel_buffer_avalon_sram_slave_burst_adapter:sink0_valid
	wire   [93:0] pixel_buffer_avalon_sram_slave_cmd_width_adapter_src_data;                                   // pixel_buffer_avalon_sram_slave_cmd_width_adapter:out_data -> pixel_buffer_avalon_sram_slave_burst_adapter:sink0_data
	wire          pixel_buffer_avalon_sram_slave_cmd_width_adapter_src_ready;                                  // pixel_buffer_avalon_sram_slave_burst_adapter:sink0_ready -> pixel_buffer_avalon_sram_slave_cmd_width_adapter:out_ready
	wire   [20:0] pixel_buffer_avalon_sram_slave_cmd_width_adapter_src_channel;                                // pixel_buffer_avalon_sram_slave_cmd_width_adapter:out_channel -> pixel_buffer_avalon_sram_slave_burst_adapter:sink0_channel
	wire          pixel_buffer_avalon_sram_slave_cmd_width_adapter_src_startofpacket;                          // pixel_buffer_avalon_sram_slave_cmd_width_adapter:out_startofpacket -> pixel_buffer_avalon_sram_slave_burst_adapter:sink0_startofpacket
	wire          pixel_buffer_avalon_sram_slave_cmd_width_adapter_src_endofpacket;                            // pixel_buffer_avalon_sram_slave_cmd_width_adapter:out_endofpacket -> pixel_buffer_avalon_sram_slave_burst_adapter:sink0_endofpacket
	wire          cmd_demux_001_src6_valid;                                                                    // cmd_demux_001:src6_valid -> crosser:in_valid
	wire  [111:0] cmd_demux_001_src6_data;                                                                     // cmd_demux_001:src6_data -> crosser:in_data
	wire          cmd_demux_001_src6_ready;                                                                    // crosser:in_ready -> cmd_demux_001:src6_ready
	wire   [20:0] cmd_demux_001_src6_channel;                                                                  // cmd_demux_001:src6_channel -> crosser:in_channel
	wire          cmd_demux_001_src6_startofpacket;                                                            // cmd_demux_001:src6_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_001_src6_endofpacket;                                                              // cmd_demux_001:src6_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                                           // crosser:out_valid -> cmd_mux_006:sink0_valid
	wire  [111:0] crosser_out_data;                                                                            // crosser:out_data -> cmd_mux_006:sink0_data
	wire          crosser_out_ready;                                                                           // cmd_mux_006:sink0_ready -> crosser:out_ready
	wire   [20:0] crosser_out_channel;                                                                         // crosser:out_channel -> cmd_mux_006:sink0_channel
	wire          crosser_out_startofpacket;                                                                   // crosser:out_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                                     // crosser:out_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          rsp_demux_006_src0_valid;                                                                    // rsp_demux_006:src0_valid -> crosser_001:in_valid
	wire  [111:0] rsp_demux_006_src0_data;                                                                     // rsp_demux_006:src0_data -> crosser_001:in_data
	wire          rsp_demux_006_src0_ready;                                                                    // crosser_001:in_ready -> rsp_demux_006:src0_ready
	wire   [20:0] rsp_demux_006_src0_channel;                                                                  // rsp_demux_006:src0_channel -> crosser_001:in_channel
	wire          rsp_demux_006_src0_startofpacket;                                                            // rsp_demux_006:src0_startofpacket -> crosser_001:in_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                              // rsp_demux_006:src0_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                                       // crosser_001:out_valid -> rsp_mux_001:sink6_valid
	wire  [111:0] crosser_001_out_data;                                                                        // crosser_001:out_data -> rsp_mux_001:sink6_data
	wire          crosser_001_out_ready;                                                                       // rsp_mux_001:sink6_ready -> crosser_001:out_ready
	wire   [20:0] crosser_001_out_channel;                                                                     // crosser_001:out_channel -> rsp_mux_001:sink6_channel
	wire          crosser_001_out_startofpacket;                                                               // crosser_001:out_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire          crosser_001_out_endofpacket;                                                                 // crosser_001:out_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire   [20:0] nios2_gen2_data_master_limiter_cmd_valid_data;                                               // nios2_gen2_data_master_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire   [20:0] nios2_gen2_instruction_master_limiter_cmd_valid_data;                                        // nios2_gen2_instruction_master_limiter:cmd_src_valid -> cmd_demux_002:sink_valid
	wire          pixel_buffer_avalon_sram_slave_agent_rdata_fifo_out_valid;                                   // pixel_buffer_avalon_sram_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [17:0] pixel_buffer_avalon_sram_slave_agent_rdata_fifo_out_data;                                    // pixel_buffer_avalon_sram_slave_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          pixel_buffer_avalon_sram_slave_agent_rdata_fifo_out_ready;                                   // avalon_st_adapter:in_0_ready -> pixel_buffer_avalon_sram_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                                               // avalon_st_adapter:out_0_valid -> pixel_buffer_avalon_sram_slave_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_out_0_data;                                                                // avalon_st_adapter:out_0_data -> pixel_buffer_avalon_sram_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                               // pixel_buffer_avalon_sram_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                               // avalon_st_adapter:out_0_error -> pixel_buffer_avalon_sram_slave_agent:rdata_fifo_sink_error
	wire          pixel_buffer_dma_avalon_control_slave_agent_rdata_fifo_src_valid;                            // pixel_buffer_dma_avalon_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] pixel_buffer_dma_avalon_control_slave_agent_rdata_fifo_src_data;                             // pixel_buffer_dma_avalon_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          pixel_buffer_dma_avalon_control_slave_agent_rdata_fifo_src_ready;                            // avalon_st_adapter_001:in_0_ready -> pixel_buffer_dma_avalon_control_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                           // avalon_st_adapter_001:out_0_valid -> pixel_buffer_dma_avalon_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                            // avalon_st_adapter_001:out_0_data -> pixel_buffer_dma_avalon_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                           // pixel_buffer_dma_avalon_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                           // avalon_st_adapter_001:out_0_error -> pixel_buffer_dma_avalon_control_slave_agent:rdata_fifo_sink_error
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid;                                      // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data;                                       // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready;                                      // avalon_st_adapter_002:in_0_ready -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                           // avalon_st_adapter_002:out_0_valid -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                            // avalon_st_adapter_002:out_0_data -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                           // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                           // avalon_st_adapter_002:out_0_error -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          sd_card_avalon_sdcard_slave_agent_rdata_fifo_src_valid;                                      // sd_card_avalon_sdcard_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] sd_card_avalon_sdcard_slave_agent_rdata_fifo_src_data;                                       // sd_card_avalon_sdcard_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          sd_card_avalon_sdcard_slave_agent_rdata_fifo_src_ready;                                      // avalon_st_adapter_003:in_0_ready -> sd_card_avalon_sdcard_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                           // avalon_st_adapter_003:out_0_valid -> sd_card_avalon_sdcard_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                            // avalon_st_adapter_003:out_0_data -> sd_card_avalon_sdcard_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                           // sd_card_avalon_sdcard_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                           // avalon_st_adapter_003:out_0_error -> sd_card_avalon_sdcard_slave_agent:rdata_fifo_sink_error
	wire          sysid_control_slave_agent_rdata_fifo_src_valid;                                              // sysid_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] sysid_control_slave_agent_rdata_fifo_src_data;                                               // sysid_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire          sysid_control_slave_agent_rdata_fifo_src_ready;                                              // avalon_st_adapter_004:in_0_ready -> sysid_control_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                           // avalon_st_adapter_004:out_0_valid -> sysid_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                            // avalon_st_adapter_004:out_0_data -> sysid_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                           // sysid_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                           // avalon_st_adapter_004:out_0_error -> sysid_control_slave_agent:rdata_fifo_sink_error
	wire          nios2_gen2_debug_mem_slave_agent_rdata_fifo_src_valid;                                       // nios2_gen2_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] nios2_gen2_debug_mem_slave_agent_rdata_fifo_src_data;                                        // nios2_gen2_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire          nios2_gen2_debug_mem_slave_agent_rdata_fifo_src_ready;                                       // avalon_st_adapter_005:in_0_ready -> nios2_gen2_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                           // avalon_st_adapter_005:out_0_valid -> nios2_gen2_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                                            // avalon_st_adapter_005:out_0_data -> nios2_gen2_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                           // nios2_gen2_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                           // avalon_st_adapter_005:out_0_error -> nios2_gen2_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          altpll_pll_slave_agent_rdata_fifo_out_valid;                                                 // altpll_pll_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] altpll_pll_slave_agent_rdata_fifo_out_data;                                                  // altpll_pll_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire          altpll_pll_slave_agent_rdata_fifo_out_ready;                                                 // avalon_st_adapter_006:in_0_ready -> altpll_pll_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                           // avalon_st_adapter_006:out_0_valid -> altpll_pll_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                            // avalon_st_adapter_006:out_0_data -> altpll_pll_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                           // altpll_pll_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                           // avalon_st_adapter_006:out_0_error -> altpll_pll_slave_agent:rdata_fifo_sink_error
	wire          sdram_s1_agent_rdata_fifo_src_valid;                                                         // sdram_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] sdram_s1_agent_rdata_fifo_src_data;                                                          // sdram_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire          sdram_s1_agent_rdata_fifo_src_ready;                                                         // avalon_st_adapter_007:in_0_ready -> sdram_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                           // avalon_st_adapter_007:out_0_valid -> sdram_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                            // avalon_st_adapter_007:out_0_data -> sdram_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                           // sdram_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                           // avalon_st_adapter_007:out_0_error -> sdram_s1_agent:rdata_fifo_sink_error
	wire          timer_s1_agent_rdata_fifo_src_valid;                                                         // timer_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] timer_s1_agent_rdata_fifo_src_data;                                                          // timer_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire          timer_s1_agent_rdata_fifo_src_ready;                                                         // avalon_st_adapter_008:in_0_ready -> timer_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                           // avalon_st_adapter_008:out_0_valid -> timer_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                                            // avalon_st_adapter_008:out_0_data -> timer_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                           // timer_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                           // avalon_st_adapter_008:out_0_error -> timer_s1_agent:rdata_fifo_sink_error
	wire          wifi_uart_s1_agent_rdata_fifo_src_valid;                                                     // wifi_uart_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] wifi_uart_s1_agent_rdata_fifo_src_data;                                                      // wifi_uart_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	wire          wifi_uart_s1_agent_rdata_fifo_src_ready;                                                     // avalon_st_adapter_009:in_0_ready -> wifi_uart_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_009_out_0_valid;                                                           // avalon_st_adapter_009:out_0_valid -> wifi_uart_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                                            // avalon_st_adapter_009:out_0_data -> wifi_uart_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                                           // wifi_uart_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                                           // avalon_st_adapter_009:out_0_error -> wifi_uart_s1_agent:rdata_fifo_sink_error
	wire          pio_wifi_reset_s1_agent_rdata_fifo_src_valid;                                                // pio_wifi_reset_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] pio_wifi_reset_s1_agent_rdata_fifo_src_data;                                                 // pio_wifi_reset_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_010:in_0_data
	wire          pio_wifi_reset_s1_agent_rdata_fifo_src_ready;                                                // avalon_st_adapter_010:in_0_ready -> pio_wifi_reset_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_010_out_0_valid;                                                           // avalon_st_adapter_010:out_0_valid -> pio_wifi_reset_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                                            // avalon_st_adapter_010:out_0_data -> pio_wifi_reset_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                                           // pio_wifi_reset_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                                           // avalon_st_adapter_010:out_0_error -> pio_wifi_reset_s1_agent:rdata_fifo_sink_error
	wire          pio_led_s1_agent_rdata_fifo_src_valid;                                                       // pio_led_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] pio_led_s1_agent_rdata_fifo_src_data;                                                        // pio_led_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_011:in_0_data
	wire          pio_led_s1_agent_rdata_fifo_src_ready;                                                       // avalon_st_adapter_011:in_0_ready -> pio_led_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_011_out_0_valid;                                                           // avalon_st_adapter_011:out_0_valid -> pio_led_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                                                            // avalon_st_adapter_011:out_0_data -> pio_led_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                                           // pio_led_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                                           // avalon_st_adapter_011:out_0_error -> pio_led_s1_agent:rdata_fifo_sink_error
	wire          pio_key_s1_agent_rdata_fifo_src_valid;                                                       // pio_key_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_012:in_0_valid
	wire   [33:0] pio_key_s1_agent_rdata_fifo_src_data;                                                        // pio_key_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_012:in_0_data
	wire          pio_key_s1_agent_rdata_fifo_src_ready;                                                       // avalon_st_adapter_012:in_0_ready -> pio_key_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_012_out_0_valid;                                                           // avalon_st_adapter_012:out_0_valid -> pio_key_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_012_out_0_data;                                                            // avalon_st_adapter_012:out_0_data -> pio_key_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                                                           // pio_key_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                                                           // avalon_st_adapter_012:out_0_error -> pio_key_s1_agent:rdata_fifo_sink_error
	wire          chaos_code_step_s1_agent_rdata_fifo_src_valid;                                               // chaos_code_step_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_013:in_0_valid
	wire   [33:0] chaos_code_step_s1_agent_rdata_fifo_src_data;                                                // chaos_code_step_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_013:in_0_data
	wire          chaos_code_step_s1_agent_rdata_fifo_src_ready;                                               // avalon_st_adapter_013:in_0_ready -> chaos_code_step_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_013_out_0_valid;                                                           // avalon_st_adapter_013:out_0_valid -> chaos_code_step_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_013_out_0_data;                                                            // avalon_st_adapter_013:out_0_data -> chaos_code_step_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_013_out_0_ready;                                                           // chaos_code_step_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire    [0:0] avalon_st_adapter_013_out_0_error;                                                           // avalon_st_adapter_013:out_0_error -> chaos_code_step_s1_agent:rdata_fifo_sink_error
	wire          chaos_code_reset_s1_agent_rdata_fifo_src_valid;                                              // chaos_code_reset_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_014:in_0_valid
	wire   [33:0] chaos_code_reset_s1_agent_rdata_fifo_src_data;                                               // chaos_code_reset_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_014:in_0_data
	wire          chaos_code_reset_s1_agent_rdata_fifo_src_ready;                                              // avalon_st_adapter_014:in_0_ready -> chaos_code_reset_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_014_out_0_valid;                                                           // avalon_st_adapter_014:out_0_valid -> chaos_code_reset_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_014_out_0_data;                                                            // avalon_st_adapter_014:out_0_data -> chaos_code_reset_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_014_out_0_ready;                                                           // chaos_code_reset_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire    [0:0] avalon_st_adapter_014_out_0_error;                                                           // avalon_st_adapter_014:out_0_error -> chaos_code_reset_s1_agent:rdata_fifo_sink_error
	wire          chaos_code_shift_s1_agent_rdata_fifo_src_valid;                                              // chaos_code_shift_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_015:in_0_valid
	wire   [33:0] chaos_code_shift_s1_agent_rdata_fifo_src_data;                                               // chaos_code_shift_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_015:in_0_data
	wire          chaos_code_shift_s1_agent_rdata_fifo_src_ready;                                              // avalon_st_adapter_015:in_0_ready -> chaos_code_shift_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_015_out_0_valid;                                                           // avalon_st_adapter_015:out_0_valid -> chaos_code_shift_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_015_out_0_data;                                                            // avalon_st_adapter_015:out_0_data -> chaos_code_shift_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_015_out_0_ready;                                                           // chaos_code_shift_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire    [0:0] avalon_st_adapter_015_out_0_error;                                                           // avalon_st_adapter_015:out_0_error -> chaos_code_shift_s1_agent:rdata_fifo_sink_error
	wire          chaos_code_done_s1_agent_rdata_fifo_src_valid;                                               // chaos_code_done_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_016:in_0_valid
	wire   [33:0] chaos_code_done_s1_agent_rdata_fifo_src_data;                                                // chaos_code_done_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_016:in_0_data
	wire          chaos_code_done_s1_agent_rdata_fifo_src_ready;                                               // avalon_st_adapter_016:in_0_ready -> chaos_code_done_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_016_out_0_valid;                                                           // avalon_st_adapter_016:out_0_valid -> chaos_code_done_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_016_out_0_data;                                                            // avalon_st_adapter_016:out_0_data -> chaos_code_done_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_016_out_0_ready;                                                           // chaos_code_done_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_016:out_0_ready
	wire    [0:0] avalon_st_adapter_016_out_0_error;                                                           // avalon_st_adapter_016:out_0_error -> chaos_code_done_s1_agent:rdata_fifo_sink_error
	wire          chaos_code_x_s1_agent_rdata_fifo_src_valid;                                                  // chaos_code_x_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_017:in_0_valid
	wire   [33:0] chaos_code_x_s1_agent_rdata_fifo_src_data;                                                   // chaos_code_x_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_017:in_0_data
	wire          chaos_code_x_s1_agent_rdata_fifo_src_ready;                                                  // avalon_st_adapter_017:in_0_ready -> chaos_code_x_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_017_out_0_valid;                                                           // avalon_st_adapter_017:out_0_valid -> chaos_code_x_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_017_out_0_data;                                                            // avalon_st_adapter_017:out_0_data -> chaos_code_x_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_017_out_0_ready;                                                           // chaos_code_x_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_017:out_0_ready
	wire    [0:0] avalon_st_adapter_017_out_0_error;                                                           // avalon_st_adapter_017:out_0_error -> chaos_code_x_s1_agent:rdata_fifo_sink_error
	wire          chaos_code_y_s1_agent_rdata_fifo_src_valid;                                                  // chaos_code_y_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_018:in_0_valid
	wire   [33:0] chaos_code_y_s1_agent_rdata_fifo_src_data;                                                   // chaos_code_y_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_018:in_0_data
	wire          chaos_code_y_s1_agent_rdata_fifo_src_ready;                                                  // avalon_st_adapter_018:in_0_ready -> chaos_code_y_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_018_out_0_valid;                                                           // avalon_st_adapter_018:out_0_valid -> chaos_code_y_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_018_out_0_data;                                                            // avalon_st_adapter_018:out_0_data -> chaos_code_y_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_018_out_0_ready;                                                           // chaos_code_y_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_018:out_0_ready
	wire    [0:0] avalon_st_adapter_018_out_0_error;                                                           // avalon_st_adapter_018:out_0_error -> chaos_code_y_s1_agent:rdata_fifo_sink_error
	wire          chaos_code_z_s1_agent_rdata_fifo_src_valid;                                                  // chaos_code_z_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_019:in_0_valid
	wire   [33:0] chaos_code_z_s1_agent_rdata_fifo_src_data;                                                   // chaos_code_z_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_019:in_0_data
	wire          chaos_code_z_s1_agent_rdata_fifo_src_ready;                                                  // avalon_st_adapter_019:in_0_ready -> chaos_code_z_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_019_out_0_valid;                                                           // avalon_st_adapter_019:out_0_valid -> chaos_code_z_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_019_out_0_data;                                                            // avalon_st_adapter_019:out_0_data -> chaos_code_z_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_019_out_0_ready;                                                           // chaos_code_z_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_019:out_0_ready
	wire    [0:0] avalon_st_adapter_019_out_0_error;                                                           // avalon_st_adapter_019:out_0_error -> chaos_code_z_s1_agent:rdata_fifo_sink_error
	wire          chaos_code_w_s1_agent_rdata_fifo_src_valid;                                                  // chaos_code_w_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_020:in_0_valid
	wire   [33:0] chaos_code_w_s1_agent_rdata_fifo_src_data;                                                   // chaos_code_w_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_020:in_0_data
	wire          chaos_code_w_s1_agent_rdata_fifo_src_ready;                                                  // avalon_st_adapter_020:in_0_ready -> chaos_code_w_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_020_out_0_valid;                                                           // avalon_st_adapter_020:out_0_valid -> chaos_code_w_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_020_out_0_data;                                                            // avalon_st_adapter_020:out_0_data -> chaos_code_w_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_020_out_0_ready;                                                           // chaos_code_w_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_020:out_0_ready
	wire    [0:0] avalon_st_adapter_020_out_0_error;                                                           // avalon_st_adapter_020:out_0_error -> chaos_code_w_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) pixel_buffer_dma_avalon_pixel_dma_master_translator (
		.clk                    (altpll_c0_clk),                                                                               //                       clk.clk
		.reset                  (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),                                          //                     reset.reset
		.uav_address            (pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (pixel_buffer_dma_avalon_pixel_dma_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (pixel_buffer_dma_avalon_pixel_dma_master_waitrequest),                                        //                          .waitrequest
		.av_read                (pixel_buffer_dma_avalon_pixel_dma_master_read),                                               //                          .read
		.av_readdata            (pixel_buffer_dma_avalon_pixel_dma_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (pixel_buffer_dma_avalon_pixel_dma_master_readdatavalid),                                      //                          .readdatavalid
		.av_lock                (pixel_buffer_dma_avalon_pixel_dma_master_lock),                                               //                          .lock
		.av_burstcount          (1'b1),                                                                                        //               (terminated)
		.av_byteenable          (4'b1111),                                                                                     //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                        //               (terminated)
		.av_begintransfer       (1'b0),                                                                                        //               (terminated)
		.av_chipselect          (1'b0),                                                                                        //               (terminated)
		.av_write               (1'b0),                                                                                        //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                                        //               (terminated)
		.av_debugaccess         (1'b0),                                                                                        //               (terminated)
		.uav_clken              (),                                                                                            //               (terminated)
		.av_clken               (1'b1),                                                                                        //               (terminated)
		.uav_response           (2'b00),                                                                                       //               (terminated)
		.av_response            (),                                                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                                                             //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (29),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_gen2_data_master_translator (
		.clk                    (altpll_c0_clk),                                                             //                       clk.clk
		.reset                  (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),                        //                     reset.reset
		.uav_address            (nios2_gen2_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_gen2_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_gen2_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_gen2_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_gen2_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_gen2_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_gen2_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_gen2_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_gen2_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_gen2_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_gen2_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_gen2_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_gen2_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (nios2_gen2_data_master_byteenable),                                         //                          .byteenable
		.av_read                (nios2_gen2_data_master_read),                                               //                          .read
		.av_readdata            (nios2_gen2_data_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (nios2_gen2_data_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (nios2_gen2_data_master_write),                                              //                          .write
		.av_writedata           (nios2_gen2_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (nios2_gen2_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                      //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                      //               (terminated)
		.av_begintransfer       (1'b0),                                                                      //               (terminated)
		.av_chipselect          (1'b0),                                                                      //               (terminated)
		.av_lock                (1'b0),                                                                      //               (terminated)
		.uav_clken              (),                                                                          //               (terminated)
		.av_clken               (1'b1),                                                                      //               (terminated)
		.uav_response           (2'b00),                                                                     //               (terminated)
		.av_response            (),                                                                          //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                      //               (terminated)
		.av_writeresponsevalid  ()                                                                           //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (29),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_gen2_instruction_master_translator (
		.clk                    (altpll_c0_clk),                                                                    //                       clk.clk
		.reset                  (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),                               //                     reset.reset
		.uav_address            (nios2_gen2_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_gen2_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_gen2_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_gen2_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_gen2_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_gen2_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_gen2_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_gen2_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_gen2_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_gen2_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_gen2_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_gen2_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_gen2_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (nios2_gen2_instruction_master_read),                                               //                          .read
		.av_readdata            (nios2_gen2_instruction_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (nios2_gen2_instruction_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                             //               (terminated)
		.av_byteenable          (4'b1111),                                                                          //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                             //               (terminated)
		.av_begintransfer       (1'b0),                                                                             //               (terminated)
		.av_chipselect          (1'b0),                                                                             //               (terminated)
		.av_write               (1'b0),                                                                             //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                             //               (terminated)
		.av_lock                (1'b0),                                                                             //               (terminated)
		.av_debugaccess         (1'b0),                                                                             //               (terminated)
		.uav_clken              (),                                                                                 //               (terminated)
		.av_clken               (1'b1),                                                                             //               (terminated)
		.uav_response           (2'b00),                                                                            //               (terminated)
		.av_response            (),                                                                                 //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                             //               (terminated)
		.av_writeresponsevalid  ()                                                                                  //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (20),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pixel_buffer_avalon_sram_slave_translator (
		.clk                    (altpll_c0_clk),                                         //                      clk.clk
		.reset                  (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (pixel_buffer_avalon_sram_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (pixel_buffer_avalon_sram_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (pixel_buffer_avalon_sram_slave_agent_m0_read),          //                         .read
		.uav_write              (pixel_buffer_avalon_sram_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (pixel_buffer_avalon_sram_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (pixel_buffer_avalon_sram_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (pixel_buffer_avalon_sram_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (pixel_buffer_avalon_sram_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (pixel_buffer_avalon_sram_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (pixel_buffer_avalon_sram_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (pixel_buffer_avalon_sram_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (pixel_buffer_avalon_sram_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (pixel_buffer_avalon_sram_slave_write),                  //                         .write
		.av_read                (pixel_buffer_avalon_sram_slave_read),                   //                         .read
		.av_readdata            (pixel_buffer_avalon_sram_slave_readdata),               //                         .readdata
		.av_writedata           (pixel_buffer_avalon_sram_slave_writedata),              //                         .writedata
		.av_byteenable          (pixel_buffer_avalon_sram_slave_byteenable),             //                         .byteenable
		.av_readdatavalid       (pixel_buffer_avalon_sram_slave_readdatavalid),          //                         .readdatavalid
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_chipselect          (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pixel_buffer_dma_avalon_control_slave_translator (
		.clk                    (altpll_c0_clk),                                                //                      clk.clk
		.reset                  (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),           //                    reset.reset
		.uav_address            (pixel_buffer_dma_avalon_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (pixel_buffer_dma_avalon_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (pixel_buffer_dma_avalon_control_slave_agent_m0_read),          //                         .read
		.uav_write              (pixel_buffer_dma_avalon_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (pixel_buffer_dma_avalon_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (pixel_buffer_dma_avalon_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (pixel_buffer_dma_avalon_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (pixel_buffer_dma_avalon_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (pixel_buffer_dma_avalon_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (pixel_buffer_dma_avalon_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (pixel_buffer_dma_avalon_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (pixel_buffer_dma_avalon_control_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (pixel_buffer_dma_avalon_control_slave_write),                  //                         .write
		.av_read                (pixel_buffer_dma_avalon_control_slave_read),                   //                         .read
		.av_readdata            (pixel_buffer_dma_avalon_control_slave_readdata),               //                         .readdata
		.av_writedata           (pixel_buffer_dma_avalon_control_slave_writedata),              //                         .writedata
		.av_byteenable          (pixel_buffer_dma_avalon_control_slave_byteenable),             //                         .byteenable
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_waitrequest         (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_chipselect          (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_avalon_jtag_slave_translator (
		.clk                    (altpll_c0_clk),                                      //                      clk.clk
		.reset                  (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (jtag_uart_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (jtag_uart_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (jtag_uart_avalon_jtag_slave_write),                  //                         .write
		.av_read                (jtag_uart_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (jtag_uart_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (jtag_uart_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (jtag_uart_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (jtag_uart_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sd_card_avalon_sdcard_slave_translator (
		.clk                    (altpll_c0_clk),                                      //                      clk.clk
		.reset                  (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sd_card_avalon_sdcard_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sd_card_avalon_sdcard_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sd_card_avalon_sdcard_slave_agent_m0_read),          //                         .read
		.uav_write              (sd_card_avalon_sdcard_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (sd_card_avalon_sdcard_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sd_card_avalon_sdcard_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sd_card_avalon_sdcard_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sd_card_avalon_sdcard_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sd_card_avalon_sdcard_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sd_card_avalon_sdcard_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sd_card_avalon_sdcard_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (sd_card_avalon_sdcard_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (sd_card_avalon_sdcard_slave_write),                  //                         .write
		.av_read                (sd_card_avalon_sdcard_slave_read),                   //                         .read
		.av_readdata            (sd_card_avalon_sdcard_slave_readdata),               //                         .readdata
		.av_writedata           (sd_card_avalon_sdcard_slave_writedata),              //                         .writedata
		.av_byteenable          (sd_card_avalon_sdcard_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (sd_card_avalon_sdcard_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (sd_card_avalon_sdcard_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_control_slave_translator (
		.clk                    (altpll_c0_clk),                                      //                      clk.clk
		.reset                  (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sysid_control_slave_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_control_slave_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (sysid_control_slave_agent_m0_read),                  //                         .read
		.uav_write              (sysid_control_slave_agent_m0_write),                 //                         .write
		.uav_waitrequest        (sysid_control_slave_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (sysid_control_slave_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (sysid_control_slave_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (sysid_control_slave_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (sysid_control_slave_agent_m0_writedata),             //                         .writedata
		.uav_lock               (sysid_control_slave_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (sysid_control_slave_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (sysid_control_slave_address),                        //      avalon_anti_slave_0.address
		.av_readdata            (sysid_control_slave_readdata),                       //                         .readdata
		.av_write               (),                                                   //              (terminated)
		.av_read                (),                                                   //              (terminated)
		.av_writedata           (),                                                   //              (terminated)
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_chipselect          (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios2_gen2_debug_mem_slave_translator (
		.clk                    (altpll_c0_clk),                                      //                      clk.clk
		.reset                  (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (nios2_gen2_debug_mem_slave_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount         (nios2_gen2_debug_mem_slave_agent_m0_burstcount),     //                         .burstcount
		.uav_read               (nios2_gen2_debug_mem_slave_agent_m0_read),           //                         .read
		.uav_write              (nios2_gen2_debug_mem_slave_agent_m0_write),          //                         .write
		.uav_waitrequest        (nios2_gen2_debug_mem_slave_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid      (nios2_gen2_debug_mem_slave_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable         (nios2_gen2_debug_mem_slave_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata           (nios2_gen2_debug_mem_slave_agent_m0_readdata),       //                         .readdata
		.uav_writedata          (nios2_gen2_debug_mem_slave_agent_m0_writedata),      //                         .writedata
		.uav_lock               (nios2_gen2_debug_mem_slave_agent_m0_lock),           //                         .lock
		.uav_debugaccess        (nios2_gen2_debug_mem_slave_agent_m0_debugaccess),    //                         .debugaccess
		.av_address             (nios2_gen2_debug_mem_slave_address),                 //      avalon_anti_slave_0.address
		.av_write               (nios2_gen2_debug_mem_slave_write),                   //                         .write
		.av_read                (nios2_gen2_debug_mem_slave_read),                    //                         .read
		.av_readdata            (nios2_gen2_debug_mem_slave_readdata),                //                         .readdata
		.av_writedata           (nios2_gen2_debug_mem_slave_writedata),               //                         .writedata
		.av_byteenable          (nios2_gen2_debug_mem_slave_byteenable),              //                         .byteenable
		.av_waitrequest         (nios2_gen2_debug_mem_slave_waitrequest),             //                         .waitrequest
		.av_debugaccess         (nios2_gen2_debug_mem_slave_debugaccess),             //                         .debugaccess
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_chipselect          (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) altpll_pll_slave_translator (
		.clk                    (clk_0_clk_clk),                                            //                      clk.clk
		.reset                  (altpll_inclk_interface_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (altpll_pll_slave_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (altpll_pll_slave_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (altpll_pll_slave_agent_m0_read),                           //                         .read
		.uav_write              (altpll_pll_slave_agent_m0_write),                          //                         .write
		.uav_waitrequest        (altpll_pll_slave_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (altpll_pll_slave_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (altpll_pll_slave_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (altpll_pll_slave_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (altpll_pll_slave_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (altpll_pll_slave_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (altpll_pll_slave_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (altpll_pll_slave_address),                                 //      avalon_anti_slave_0.address
		.av_write               (altpll_pll_slave_write),                                   //                         .write
		.av_read                (altpll_pll_slave_read),                                    //                         .read
		.av_readdata            (altpll_pll_slave_readdata),                                //                         .readdata
		.av_writedata           (altpll_pll_slave_writedata),                               //                         .writedata
		.av_begintransfer       (),                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                         //              (terminated)
		.av_burstcount          (),                                                         //              (terminated)
		.av_byteenable          (),                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                     //              (terminated)
		.av_waitrequest         (1'b0),                                                     //              (terminated)
		.av_writebyteenable     (),                                                         //              (terminated)
		.av_lock                (),                                                         //              (terminated)
		.av_chipselect          (),                                                         //              (terminated)
		.av_clken               (),                                                         //              (terminated)
		.uav_clken              (1'b0),                                                     //              (terminated)
		.av_debugaccess         (),                                                         //              (terminated)
		.av_outputenable        (),                                                         //              (terminated)
		.uav_response           (),                                                         //              (terminated)
		.av_response            (2'b00),                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_s1_translator (
		.clk                    (altpll_c0_clk),                                      //                      clk.clk
		.reset                  (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sdram_s1_agent_m0_address),                          // avalon_universal_slave_0.address
		.uav_burstcount         (sdram_s1_agent_m0_burstcount),                       //                         .burstcount
		.uav_read               (sdram_s1_agent_m0_read),                             //                         .read
		.uav_write              (sdram_s1_agent_m0_write),                            //                         .write
		.uav_waitrequest        (sdram_s1_agent_m0_waitrequest),                      //                         .waitrequest
		.uav_readdatavalid      (sdram_s1_agent_m0_readdatavalid),                    //                         .readdatavalid
		.uav_byteenable         (sdram_s1_agent_m0_byteenable),                       //                         .byteenable
		.uav_readdata           (sdram_s1_agent_m0_readdata),                         //                         .readdata
		.uav_writedata          (sdram_s1_agent_m0_writedata),                        //                         .writedata
		.uav_lock               (sdram_s1_agent_m0_lock),                             //                         .lock
		.uav_debugaccess        (sdram_s1_agent_m0_debugaccess),                      //                         .debugaccess
		.av_address             (sdram_s1_address),                                   //      avalon_anti_slave_0.address
		.av_write               (sdram_s1_write),                                     //                         .write
		.av_read                (sdram_s1_read),                                      //                         .read
		.av_readdata            (sdram_s1_readdata),                                  //                         .readdata
		.av_writedata           (sdram_s1_writedata),                                 //                         .writedata
		.av_byteenable          (sdram_s1_byteenable),                                //                         .byteenable
		.av_readdatavalid       (sdram_s1_readdatavalid),                             //                         .readdatavalid
		.av_waitrequest         (sdram_s1_waitrequest),                               //                         .waitrequest
		.av_chipselect          (sdram_s1_chipselect),                                //                         .chipselect
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer_s1_translator (
		.clk                    (altpll_c0_clk),                                      //                      clk.clk
		.reset                  (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timer_s1_agent_m0_address),                          // avalon_universal_slave_0.address
		.uav_burstcount         (timer_s1_agent_m0_burstcount),                       //                         .burstcount
		.uav_read               (timer_s1_agent_m0_read),                             //                         .read
		.uav_write              (timer_s1_agent_m0_write),                            //                         .write
		.uav_waitrequest        (timer_s1_agent_m0_waitrequest),                      //                         .waitrequest
		.uav_readdatavalid      (timer_s1_agent_m0_readdatavalid),                    //                         .readdatavalid
		.uav_byteenable         (timer_s1_agent_m0_byteenable),                       //                         .byteenable
		.uav_readdata           (timer_s1_agent_m0_readdata),                         //                         .readdata
		.uav_writedata          (timer_s1_agent_m0_writedata),                        //                         .writedata
		.uav_lock               (timer_s1_agent_m0_lock),                             //                         .lock
		.uav_debugaccess        (timer_s1_agent_m0_debugaccess),                      //                         .debugaccess
		.av_address             (timer_s1_address),                                   //      avalon_anti_slave_0.address
		.av_write               (timer_s1_write),                                     //                         .write
		.av_readdata            (timer_s1_readdata),                                  //                         .readdata
		.av_writedata           (timer_s1_writedata),                                 //                         .writedata
		.av_chipselect          (timer_s1_chipselect),                                //                         .chipselect
		.av_read                (),                                                   //              (terminated)
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) wifi_uart_s1_translator (
		.clk                    (altpll_c0_clk),                                      //                      clk.clk
		.reset                  (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (wifi_uart_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (wifi_uart_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (wifi_uart_s1_agent_m0_read),                         //                         .read
		.uav_write              (wifi_uart_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (wifi_uart_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (wifi_uart_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (wifi_uart_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (wifi_uart_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (wifi_uart_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (wifi_uart_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (wifi_uart_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (wifi_uart_s1_address),                               //      avalon_anti_slave_0.address
		.av_write               (wifi_uart_s1_write),                                 //                         .write
		.av_read                (wifi_uart_s1_read),                                  //                         .read
		.av_readdata            (wifi_uart_s1_readdata),                              //                         .readdata
		.av_writedata           (wifi_uart_s1_writedata),                             //                         .writedata
		.av_begintransfer       (wifi_uart_s1_begintransfer),                         //                         .begintransfer
		.av_chipselect          (wifi_uart_s1_chipselect),                            //                         .chipselect
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pio_wifi_reset_s1_translator (
		.clk                    (altpll_c0_clk),                                      //                      clk.clk
		.reset                  (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pio_wifi_reset_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (pio_wifi_reset_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (pio_wifi_reset_s1_agent_m0_read),                    //                         .read
		.uav_write              (pio_wifi_reset_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest        (pio_wifi_reset_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (pio_wifi_reset_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (pio_wifi_reset_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (pio_wifi_reset_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (pio_wifi_reset_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock               (pio_wifi_reset_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (pio_wifi_reset_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (pio_wifi_reset_s1_address),                          //      avalon_anti_slave_0.address
		.av_write               (pio_wifi_reset_s1_write),                            //                         .write
		.av_readdata            (pio_wifi_reset_s1_readdata),                         //                         .readdata
		.av_writedata           (pio_wifi_reset_s1_writedata),                        //                         .writedata
		.av_chipselect          (pio_wifi_reset_s1_chipselect),                       //                         .chipselect
		.av_read                (),                                                   //              (terminated)
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pio_led_s1_translator (
		.clk                    (altpll_c0_clk),                                      //                      clk.clk
		.reset                  (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pio_led_s1_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (pio_led_s1_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (pio_led_s1_agent_m0_read),                           //                         .read
		.uav_write              (pio_led_s1_agent_m0_write),                          //                         .write
		.uav_waitrequest        (pio_led_s1_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (pio_led_s1_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (pio_led_s1_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (pio_led_s1_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (pio_led_s1_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (pio_led_s1_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (pio_led_s1_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (pio_led_s1_address),                                 //      avalon_anti_slave_0.address
		.av_write               (pio_led_s1_write),                                   //                         .write
		.av_readdata            (pio_led_s1_readdata),                                //                         .readdata
		.av_writedata           (pio_led_s1_writedata),                               //                         .writedata
		.av_chipselect          (pio_led_s1_chipselect),                              //                         .chipselect
		.av_read                (),                                                   //              (terminated)
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pio_key_s1_translator (
		.clk                    (altpll_c0_clk),                                      //                      clk.clk
		.reset                  (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pio_key_s1_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (pio_key_s1_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (pio_key_s1_agent_m0_read),                           //                         .read
		.uav_write              (pio_key_s1_agent_m0_write),                          //                         .write
		.uav_waitrequest        (pio_key_s1_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (pio_key_s1_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (pio_key_s1_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (pio_key_s1_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (pio_key_s1_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (pio_key_s1_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (pio_key_s1_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (pio_key_s1_address),                                 //      avalon_anti_slave_0.address
		.av_write               (pio_key_s1_write),                                   //                         .write
		.av_readdata            (pio_key_s1_readdata),                                //                         .readdata
		.av_writedata           (pio_key_s1_writedata),                               //                         .writedata
		.av_chipselect          (pio_key_s1_chipselect),                              //                         .chipselect
		.av_read                (),                                                   //              (terminated)
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) chaos_code_step_s1_translator (
		.clk                    (altpll_c0_clk),                                      //                      clk.clk
		.reset                  (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (chaos_code_step_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (chaos_code_step_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (chaos_code_step_s1_agent_m0_read),                   //                         .read
		.uav_write              (chaos_code_step_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (chaos_code_step_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (chaos_code_step_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (chaos_code_step_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (chaos_code_step_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (chaos_code_step_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (chaos_code_step_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (chaos_code_step_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (chaos_code_step_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (chaos_code_step_s1_write),                           //                         .write
		.av_readdata            (chaos_code_step_s1_readdata),                        //                         .readdata
		.av_writedata           (chaos_code_step_s1_writedata),                       //                         .writedata
		.av_chipselect          (chaos_code_step_s1_chipselect),                      //                         .chipselect
		.av_read                (),                                                   //              (terminated)
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) chaos_code_reset_s1_translator (
		.clk                    (altpll_c0_clk),                                      //                      clk.clk
		.reset                  (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (chaos_code_reset_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (chaos_code_reset_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (chaos_code_reset_s1_agent_m0_read),                  //                         .read
		.uav_write              (chaos_code_reset_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (chaos_code_reset_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (chaos_code_reset_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (chaos_code_reset_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (chaos_code_reset_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (chaos_code_reset_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (chaos_code_reset_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (chaos_code_reset_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (chaos_code_reset_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (chaos_code_reset_s1_write),                          //                         .write
		.av_readdata            (chaos_code_reset_s1_readdata),                       //                         .readdata
		.av_writedata           (chaos_code_reset_s1_writedata),                      //                         .writedata
		.av_chipselect          (chaos_code_reset_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                                   //              (terminated)
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) chaos_code_shift_s1_translator (
		.clk                    (altpll_c0_clk),                                      //                      clk.clk
		.reset                  (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (chaos_code_shift_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (chaos_code_shift_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (chaos_code_shift_s1_agent_m0_read),                  //                         .read
		.uav_write              (chaos_code_shift_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (chaos_code_shift_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (chaos_code_shift_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (chaos_code_shift_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (chaos_code_shift_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (chaos_code_shift_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (chaos_code_shift_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (chaos_code_shift_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (chaos_code_shift_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (chaos_code_shift_s1_write),                          //                         .write
		.av_readdata            (chaos_code_shift_s1_readdata),                       //                         .readdata
		.av_writedata           (chaos_code_shift_s1_writedata),                      //                         .writedata
		.av_chipselect          (chaos_code_shift_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                                   //              (terminated)
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) chaos_code_done_s1_translator (
		.clk                    (altpll_c0_clk),                                      //                      clk.clk
		.reset                  (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (chaos_code_done_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (chaos_code_done_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (chaos_code_done_s1_agent_m0_read),                   //                         .read
		.uav_write              (chaos_code_done_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (chaos_code_done_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (chaos_code_done_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (chaos_code_done_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (chaos_code_done_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (chaos_code_done_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (chaos_code_done_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (chaos_code_done_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (chaos_code_done_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (chaos_code_done_s1_write),                           //                         .write
		.av_readdata            (chaos_code_done_s1_readdata),                        //                         .readdata
		.av_writedata           (chaos_code_done_s1_writedata),                       //                         .writedata
		.av_chipselect          (chaos_code_done_s1_chipselect),                      //                         .chipselect
		.av_read                (),                                                   //              (terminated)
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) chaos_code_x_s1_translator (
		.clk                    (altpll_c0_clk),                                      //                      clk.clk
		.reset                  (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (chaos_code_x_s1_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (chaos_code_x_s1_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (chaos_code_x_s1_agent_m0_read),                      //                         .read
		.uav_write              (chaos_code_x_s1_agent_m0_write),                     //                         .write
		.uav_waitrequest        (chaos_code_x_s1_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (chaos_code_x_s1_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (chaos_code_x_s1_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (chaos_code_x_s1_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (chaos_code_x_s1_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (chaos_code_x_s1_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (chaos_code_x_s1_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (chaos_code_x_s1_address),                            //      avalon_anti_slave_0.address
		.av_write               (chaos_code_x_s1_write),                              //                         .write
		.av_readdata            (chaos_code_x_s1_readdata),                           //                         .readdata
		.av_writedata           (chaos_code_x_s1_writedata),                          //                         .writedata
		.av_chipselect          (chaos_code_x_s1_chipselect),                         //                         .chipselect
		.av_read                (),                                                   //              (terminated)
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) chaos_code_y_s1_translator (
		.clk                    (altpll_c0_clk),                                      //                      clk.clk
		.reset                  (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (chaos_code_y_s1_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (chaos_code_y_s1_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (chaos_code_y_s1_agent_m0_read),                      //                         .read
		.uav_write              (chaos_code_y_s1_agent_m0_write),                     //                         .write
		.uav_waitrequest        (chaos_code_y_s1_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (chaos_code_y_s1_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (chaos_code_y_s1_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (chaos_code_y_s1_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (chaos_code_y_s1_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (chaos_code_y_s1_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (chaos_code_y_s1_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (chaos_code_y_s1_address),                            //      avalon_anti_slave_0.address
		.av_write               (chaos_code_y_s1_write),                              //                         .write
		.av_readdata            (chaos_code_y_s1_readdata),                           //                         .readdata
		.av_writedata           (chaos_code_y_s1_writedata),                          //                         .writedata
		.av_chipselect          (chaos_code_y_s1_chipselect),                         //                         .chipselect
		.av_read                (),                                                   //              (terminated)
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) chaos_code_z_s1_translator (
		.clk                    (altpll_c0_clk),                                      //                      clk.clk
		.reset                  (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (chaos_code_z_s1_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (chaos_code_z_s1_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (chaos_code_z_s1_agent_m0_read),                      //                         .read
		.uav_write              (chaos_code_z_s1_agent_m0_write),                     //                         .write
		.uav_waitrequest        (chaos_code_z_s1_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (chaos_code_z_s1_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (chaos_code_z_s1_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (chaos_code_z_s1_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (chaos_code_z_s1_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (chaos_code_z_s1_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (chaos_code_z_s1_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (chaos_code_z_s1_address),                            //      avalon_anti_slave_0.address
		.av_write               (chaos_code_z_s1_write),                              //                         .write
		.av_readdata            (chaos_code_z_s1_readdata),                           //                         .readdata
		.av_writedata           (chaos_code_z_s1_writedata),                          //                         .writedata
		.av_chipselect          (chaos_code_z_s1_chipselect),                         //                         .chipselect
		.av_read                (),                                                   //              (terminated)
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) chaos_code_w_s1_translator (
		.clk                    (altpll_c0_clk),                                      //                      clk.clk
		.reset                  (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (chaos_code_w_s1_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (chaos_code_w_s1_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (chaos_code_w_s1_agent_m0_read),                      //                         .read
		.uav_write              (chaos_code_w_s1_agent_m0_write),                     //                         .write
		.uav_waitrequest        (chaos_code_w_s1_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (chaos_code_w_s1_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (chaos_code_w_s1_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (chaos_code_w_s1_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (chaos_code_w_s1_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (chaos_code_w_s1_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (chaos_code_w_s1_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (chaos_code_w_s1_address),                            //      avalon_anti_slave_0.address
		.av_write               (chaos_code_w_s1_write),                              //                         .write
		.av_readdata            (chaos_code_w_s1_readdata),                           //                         .readdata
		.av_writedata           (chaos_code_w_s1_writedata),                          //                         .writedata
		.av_chipselect          (chaos_code_w_s1_chipselect),                         //                         .chipselect
		.av_read                (),                                                   //              (terminated)
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (21),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pixel_buffer_dma_avalon_pixel_dma_master_agent (
		.clk                   (altpll_c0_clk),                                                                               //       clk.clk
		.reset                 (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),                                          // clk_reset.reset
		.av_address            (pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (pixel_buffer_dma_avalon_pixel_dma_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (pixel_buffer_dma_avalon_pixel_dma_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (pixel_buffer_dma_avalon_pixel_dma_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (pixel_buffer_dma_avalon_pixel_dma_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (pixel_buffer_dma_avalon_pixel_dma_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (pixel_buffer_dma_avalon_pixel_dma_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                                           //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                                            //          .data
		.rp_channel            (rsp_mux_src_channel),                                                                         //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                                   //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                                     //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                                           //          .ready
		.av_response           (),                                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (21),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_gen2_data_master_agent (
		.clk                   (altpll_c0_clk),                                                             //       clk.clk
		.reset                 (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.av_address            (nios2_gen2_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_gen2_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_gen2_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_gen2_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_gen2_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_gen2_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_gen2_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_gen2_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_gen2_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_gen2_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_gen2_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_gen2_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_gen2_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_gen2_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_gen2_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_gen2_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (nios2_gen2_data_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (nios2_gen2_data_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (nios2_gen2_data_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (nios2_gen2_data_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (nios2_gen2_data_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (nios2_gen2_data_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                          // (terminated)
		.av_writeresponsevalid ()                                                                           // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (21),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_gen2_instruction_master_agent (
		.clk                   (altpll_c0_clk),                                                                    //       clk.clk
		.reset                 (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),                               // clk_reset.reset
		.av_address            (nios2_gen2_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_gen2_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_gen2_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_gen2_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_gen2_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_gen2_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_gen2_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_gen2_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_gen2_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_gen2_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_gen2_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_gen2_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_gen2_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_gen2_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_gen2_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_gen2_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (nios2_gen2_instruction_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (nios2_gen2_instruction_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (nios2_gen2_instruction_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (nios2_gen2_instruction_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (nios2_gen2_instruction_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (nios2_gen2_instruction_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                                 // (terminated)
		.av_writeresponsevalid ()                                                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (93),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pixel_buffer_avalon_sram_slave_agent (
		.clk                     (altpll_c0_clk),                                                      //             clk.clk
		.reset                   (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),                 //       clk_reset.reset
		.m0_address              (pixel_buffer_avalon_sram_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pixel_buffer_avalon_sram_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pixel_buffer_avalon_sram_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pixel_buffer_avalon_sram_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pixel_buffer_avalon_sram_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (pixel_buffer_avalon_sram_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pixel_buffer_avalon_sram_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pixel_buffer_avalon_sram_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (pixel_buffer_avalon_sram_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pixel_buffer_avalon_sram_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (pixel_buffer_avalon_sram_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (pixel_buffer_avalon_sram_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pixel_buffer_avalon_sram_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (pixel_buffer_avalon_sram_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (pixel_buffer_avalon_sram_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (pixel_buffer_avalon_sram_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pixel_buffer_avalon_sram_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pixel_buffer_avalon_sram_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pixel_buffer_avalon_sram_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pixel_buffer_avalon_sram_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pixel_buffer_avalon_sram_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pixel_buffer_avalon_sram_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pixel_buffer_avalon_sram_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pixel_buffer_avalon_sram_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pixel_buffer_avalon_sram_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pixel_buffer_avalon_sram_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pixel_buffer_avalon_sram_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pixel_buffer_avalon_sram_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pixel_buffer_avalon_sram_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pixel_buffer_avalon_sram_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pixel_buffer_avalon_sram_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pixel_buffer_avalon_sram_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                      //                .error
		.rdata_fifo_src_ready    (pixel_buffer_avalon_sram_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pixel_buffer_avalon_sram_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pixel_buffer_avalon_sram_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pixel_buffer_avalon_sram_slave_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                                   //       clk.clk
		.reset             (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (pixel_buffer_avalon_sram_slave_agent_rf_source_data),             //        in.data
		.in_valid          (pixel_buffer_avalon_sram_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (pixel_buffer_avalon_sram_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pixel_buffer_avalon_sram_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pixel_buffer_avalon_sram_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pixel_buffer_avalon_sram_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pixel_buffer_avalon_sram_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pixel_buffer_avalon_sram_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pixel_buffer_avalon_sram_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pixel_buffer_avalon_sram_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pixel_buffer_avalon_sram_slave_agent_rdata_fifo (
		.clk               (altpll_c0_clk),                                             //       clk.clk
		.reset             (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (pixel_buffer_avalon_sram_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (pixel_buffer_avalon_sram_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (pixel_buffer_avalon_sram_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (pixel_buffer_avalon_sram_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (pixel_buffer_avalon_sram_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (pixel_buffer_avalon_sram_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                      // (terminated)
		.out_startofpacket (),                                                          // (terminated)
		.out_endofpacket   (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pixel_buffer_dma_avalon_control_slave_agent (
		.clk                     (altpll_c0_clk),                                                          //             clk.clk
		.reset                   (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),                     //       clk_reset.reset
		.m0_address              (pixel_buffer_dma_avalon_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pixel_buffer_dma_avalon_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pixel_buffer_dma_avalon_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pixel_buffer_dma_avalon_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pixel_buffer_dma_avalon_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (pixel_buffer_dma_avalon_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pixel_buffer_dma_avalon_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pixel_buffer_dma_avalon_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (pixel_buffer_dma_avalon_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pixel_buffer_dma_avalon_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (pixel_buffer_dma_avalon_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (pixel_buffer_dma_avalon_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pixel_buffer_dma_avalon_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (pixel_buffer_dma_avalon_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (pixel_buffer_dma_avalon_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (pixel_buffer_dma_avalon_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                                  //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                                  //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                                   //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                            //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                                //                .channel
		.rf_sink_ready           (pixel_buffer_dma_avalon_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pixel_buffer_dma_avalon_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pixel_buffer_dma_avalon_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pixel_buffer_dma_avalon_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pixel_buffer_dma_avalon_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pixel_buffer_dma_avalon_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pixel_buffer_dma_avalon_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pixel_buffer_dma_avalon_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pixel_buffer_dma_avalon_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pixel_buffer_dma_avalon_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                                      //                .error
		.rdata_fifo_src_ready    (pixel_buffer_dma_avalon_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pixel_buffer_dma_avalon_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pixel_buffer_dma_avalon_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pixel_buffer_dma_avalon_control_slave_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                                          //       clk.clk
		.reset             (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_data           (pixel_buffer_dma_avalon_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (pixel_buffer_dma_avalon_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (pixel_buffer_dma_avalon_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pixel_buffer_dma_avalon_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pixel_buffer_dma_avalon_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pixel_buffer_dma_avalon_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pixel_buffer_dma_avalon_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pixel_buffer_dma_avalon_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pixel_buffer_dma_avalon_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pixel_buffer_dma_avalon_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                  // (terminated)
		.csr_read          (1'b0),                                                                   // (terminated)
		.csr_write         (1'b0),                                                                   // (terminated)
		.csr_readdata      (),                                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated)
		.almost_full_data  (),                                                                       // (terminated)
		.almost_empty_data (),                                                                       // (terminated)
		.in_empty          (1'b0),                                                                   // (terminated)
		.out_empty         (),                                                                       // (terminated)
		.in_error          (1'b0),                                                                   // (terminated)
		.out_error         (),                                                                       // (terminated)
		.in_channel        (1'b0),                                                                   // (terminated)
		.out_channel       ()                                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_avalon_jtag_slave_agent (
		.clk                     (altpll_c0_clk),                                                //             clk.clk
		.reset                   (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (jtag_uart_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                        //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                        //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                         //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                                //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                  //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                      //                .channel
		.rf_sink_ready           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                                //       clk.clk
		.reset             (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sd_card_avalon_sdcard_slave_agent (
		.clk                     (altpll_c0_clk),                                                //             clk.clk
		.reset                   (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (sd_card_avalon_sdcard_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sd_card_avalon_sdcard_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sd_card_avalon_sdcard_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sd_card_avalon_sdcard_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sd_card_avalon_sdcard_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sd_card_avalon_sdcard_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sd_card_avalon_sdcard_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sd_card_avalon_sdcard_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sd_card_avalon_sdcard_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sd_card_avalon_sdcard_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sd_card_avalon_sdcard_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sd_card_avalon_sdcard_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sd_card_avalon_sdcard_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sd_card_avalon_sdcard_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sd_card_avalon_sdcard_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sd_card_avalon_sdcard_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                        //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                        //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                         //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                                //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                                  //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                      //                .channel
		.rf_sink_ready           (sd_card_avalon_sdcard_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sd_card_avalon_sdcard_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sd_card_avalon_sdcard_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sd_card_avalon_sdcard_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sd_card_avalon_sdcard_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sd_card_avalon_sdcard_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sd_card_avalon_sdcard_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sd_card_avalon_sdcard_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sd_card_avalon_sdcard_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sd_card_avalon_sdcard_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (sd_card_avalon_sdcard_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sd_card_avalon_sdcard_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sd_card_avalon_sdcard_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sd_card_avalon_sdcard_slave_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                                //       clk.clk
		.reset             (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (sd_card_avalon_sdcard_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sd_card_avalon_sdcard_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sd_card_avalon_sdcard_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sd_card_avalon_sdcard_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sd_card_avalon_sdcard_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sd_card_avalon_sdcard_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sd_card_avalon_sdcard_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sd_card_avalon_sdcard_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sd_card_avalon_sdcard_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sd_card_avalon_sdcard_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_control_slave_agent (
		.clk                     (altpll_c0_clk),                                        //             clk.clk
		.reset                   (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (sysid_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sysid_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sysid_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sysid_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sysid_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sysid_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sysid_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sysid_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sysid_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sysid_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sysid_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sysid_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sysid_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sysid_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sysid_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sysid_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                              //                .channel
		.rf_sink_ready           (sysid_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sysid_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sysid_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sysid_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sysid_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sysid_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sysid_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sysid_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sysid_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sysid_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (sysid_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sysid_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_control_slave_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                        //       clk.clk
		.reset             (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (sysid_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios2_gen2_debug_mem_slave_agent (
		.clk                     (altpll_c0_clk),                                               //             clk.clk
		.reset                   (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (nios2_gen2_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios2_gen2_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios2_gen2_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios2_gen2_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios2_gen2_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios2_gen2_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios2_gen2_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios2_gen2_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios2_gen2_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios2_gen2_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (nios2_gen2_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios2_gen2_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios2_gen2_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (nios2_gen2_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (nios2_gen2_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios2_gen2_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                       //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                       //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                        //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                               //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                                 //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                                     //                .channel
		.rf_sink_ready           (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios2_gen2_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios2_gen2_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios2_gen2_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios2_gen2_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios2_gen2_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (nios2_gen2_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios2_gen2_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios2_gen2_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_gen2_debug_mem_slave_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                               //       clk.clk
		.reset             (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (nios2_gen2_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (nios2_gen2_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (nios2_gen2_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios2_gen2_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios2_gen2_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) altpll_pll_slave_agent (
		.clk                     (clk_0_clk_clk),                                            //             clk.clk
		.reset                   (altpll_inclk_interface_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (altpll_pll_slave_agent_m0_address),                        //              m0.address
		.m0_burstcount           (altpll_pll_slave_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (altpll_pll_slave_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (altpll_pll_slave_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (altpll_pll_slave_agent_m0_lock),                           //                .lock
		.m0_readdata             (altpll_pll_slave_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (altpll_pll_slave_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (altpll_pll_slave_agent_m0_read),                           //                .read
		.m0_waitrequest          (altpll_pll_slave_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (altpll_pll_slave_agent_m0_writedata),                      //                .writedata
		.m0_write                (altpll_pll_slave_agent_m0_write),                          //                .write
		.rp_endofpacket          (altpll_pll_slave_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (altpll_pll_slave_agent_rp_ready),                          //                .ready
		.rp_valid                (altpll_pll_slave_agent_rp_valid),                          //                .valid
		.rp_data                 (altpll_pll_slave_agent_rp_data),                           //                .data
		.rp_startofpacket        (altpll_pll_slave_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                                    //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                                    //                .valid
		.cp_data                 (cmd_mux_006_src_data),                                     //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                            //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                              //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                                  //                .channel
		.rf_sink_ready           (altpll_pll_slave_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (altpll_pll_slave_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (altpll_pll_slave_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (altpll_pll_slave_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (altpll_pll_slave_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (altpll_pll_slave_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (altpll_pll_slave_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (altpll_pll_slave_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (altpll_pll_slave_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (altpll_pll_slave_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                        //                .error
		.rdata_fifo_src_ready    (altpll_pll_slave_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (altpll_pll_slave_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (altpll_pll_slave_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) altpll_pll_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                            //       clk.clk
		.reset             (altpll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (altpll_pll_slave_agent_rf_source_data),                    //        in.data
		.in_valid          (altpll_pll_slave_agent_rf_source_valid),                   //          .valid
		.in_ready          (altpll_pll_slave_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (altpll_pll_slave_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (altpll_pll_slave_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (altpll_pll_slave_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (altpll_pll_slave_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (altpll_pll_slave_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (altpll_pll_slave_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (altpll_pll_slave_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) altpll_pll_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                            //       clk.clk
		.reset             (altpll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (altpll_pll_slave_agent_rdata_fifo_src_data),               //        in.data
		.in_valid          (altpll_pll_slave_agent_rdata_fifo_src_valid),              //          .valid
		.in_ready          (altpll_pll_slave_agent_rdata_fifo_src_ready),              //          .ready
		.out_data          (altpll_pll_slave_agent_rdata_fifo_out_data),               //       out.data
		.out_valid         (altpll_pll_slave_agent_rdata_fifo_out_valid),              //          .valid
		.out_ready         (altpll_pll_slave_agent_rdata_fifo_out_ready),              //          .ready
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                     // (terminated)
		.out_startofpacket (),                                                         // (terminated)
		.out_endofpacket   (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sdram_s1_agent (
		.clk                     (altpll_c0_clk),                                      //             clk.clk
		.reset                   (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sdram_s1_agent_m0_address),                          //              m0.address
		.m0_burstcount           (sdram_s1_agent_m0_burstcount),                       //                .burstcount
		.m0_byteenable           (sdram_s1_agent_m0_byteenable),                       //                .byteenable
		.m0_debugaccess          (sdram_s1_agent_m0_debugaccess),                      //                .debugaccess
		.m0_lock                 (sdram_s1_agent_m0_lock),                             //                .lock
		.m0_readdata             (sdram_s1_agent_m0_readdata),                         //                .readdata
		.m0_readdatavalid        (sdram_s1_agent_m0_readdatavalid),                    //                .readdatavalid
		.m0_read                 (sdram_s1_agent_m0_read),                             //                .read
		.m0_waitrequest          (sdram_s1_agent_m0_waitrequest),                      //                .waitrequest
		.m0_writedata            (sdram_s1_agent_m0_writedata),                        //                .writedata
		.m0_write                (sdram_s1_agent_m0_write),                            //                .write
		.rp_endofpacket          (sdram_s1_agent_rp_endofpacket),                      //              rp.endofpacket
		.rp_ready                (sdram_s1_agent_rp_ready),                            //                .ready
		.rp_valid                (sdram_s1_agent_rp_valid),                            //                .valid
		.rp_data                 (sdram_s1_agent_rp_data),                             //                .data
		.rp_startofpacket        (sdram_s1_agent_rp_startofpacket),                    //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_007_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                            //                .channel
		.rf_sink_ready           (sdram_s1_agent_rsp_fifo_out_ready),                  //         rf_sink.ready
		.rf_sink_valid           (sdram_s1_agent_rsp_fifo_out_valid),                  //                .valid
		.rf_sink_startofpacket   (sdram_s1_agent_rsp_fifo_out_startofpacket),          //                .startofpacket
		.rf_sink_endofpacket     (sdram_s1_agent_rsp_fifo_out_endofpacket),            //                .endofpacket
		.rf_sink_data            (sdram_s1_agent_rsp_fifo_out_data),                   //                .data
		.rf_source_ready         (sdram_s1_agent_rf_source_ready),                     //       rf_source.ready
		.rf_source_valid         (sdram_s1_agent_rf_source_valid),                     //                .valid
		.rf_source_startofpacket (sdram_s1_agent_rf_source_startofpacket),             //                .startofpacket
		.rf_source_endofpacket   (sdram_s1_agent_rf_source_endofpacket),               //                .endofpacket
		.rf_source_data          (sdram_s1_agent_rf_source_data),                      //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (sdram_s1_agent_rdata_fifo_src_ready),                //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_s1_agent_rdata_fifo_src_valid),                //                .valid
		.rdata_fifo_src_data     (sdram_s1_agent_rdata_fifo_src_data),                 //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                      //       clk.clk
		.reset             (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_s1_agent_rf_source_data),                      //        in.data
		.in_valid          (sdram_s1_agent_rf_source_valid),                     //          .valid
		.in_ready          (sdram_s1_agent_rf_source_ready),                     //          .ready
		.in_startofpacket  (sdram_s1_agent_rf_source_startofpacket),             //          .startofpacket
		.in_endofpacket    (sdram_s1_agent_rf_source_endofpacket),               //          .endofpacket
		.out_data          (sdram_s1_agent_rsp_fifo_out_data),                   //       out.data
		.out_valid         (sdram_s1_agent_rsp_fifo_out_valid),                  //          .valid
		.out_ready         (sdram_s1_agent_rsp_fifo_out_ready),                  //          .ready
		.out_startofpacket (sdram_s1_agent_rsp_fifo_out_startofpacket),          //          .startofpacket
		.out_endofpacket   (sdram_s1_agent_rsp_fifo_out_endofpacket),            //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timer_s1_agent (
		.clk                     (altpll_c0_clk),                                      //             clk.clk
		.reset                   (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (timer_s1_agent_m0_address),                          //              m0.address
		.m0_burstcount           (timer_s1_agent_m0_burstcount),                       //                .burstcount
		.m0_byteenable           (timer_s1_agent_m0_byteenable),                       //                .byteenable
		.m0_debugaccess          (timer_s1_agent_m0_debugaccess),                      //                .debugaccess
		.m0_lock                 (timer_s1_agent_m0_lock),                             //                .lock
		.m0_readdata             (timer_s1_agent_m0_readdata),                         //                .readdata
		.m0_readdatavalid        (timer_s1_agent_m0_readdatavalid),                    //                .readdatavalid
		.m0_read                 (timer_s1_agent_m0_read),                             //                .read
		.m0_waitrequest          (timer_s1_agent_m0_waitrequest),                      //                .waitrequest
		.m0_writedata            (timer_s1_agent_m0_writedata),                        //                .writedata
		.m0_write                (timer_s1_agent_m0_write),                            //                .write
		.rp_endofpacket          (timer_s1_agent_rp_endofpacket),                      //              rp.endofpacket
		.rp_ready                (timer_s1_agent_rp_ready),                            //                .ready
		.rp_valid                (timer_s1_agent_rp_valid),                            //                .valid
		.rp_data                 (timer_s1_agent_rp_data),                             //                .data
		.rp_startofpacket        (timer_s1_agent_rp_startofpacket),                    //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_008_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                            //                .channel
		.rf_sink_ready           (timer_s1_agent_rsp_fifo_out_ready),                  //         rf_sink.ready
		.rf_sink_valid           (timer_s1_agent_rsp_fifo_out_valid),                  //                .valid
		.rf_sink_startofpacket   (timer_s1_agent_rsp_fifo_out_startofpacket),          //                .startofpacket
		.rf_sink_endofpacket     (timer_s1_agent_rsp_fifo_out_endofpacket),            //                .endofpacket
		.rf_sink_data            (timer_s1_agent_rsp_fifo_out_data),                   //                .data
		.rf_source_ready         (timer_s1_agent_rf_source_ready),                     //       rf_source.ready
		.rf_source_valid         (timer_s1_agent_rf_source_valid),                     //                .valid
		.rf_source_startofpacket (timer_s1_agent_rf_source_startofpacket),             //                .startofpacket
		.rf_source_endofpacket   (timer_s1_agent_rf_source_endofpacket),               //                .endofpacket
		.rf_source_data          (timer_s1_agent_rf_source_data),                      //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (timer_s1_agent_rdata_fifo_src_ready),                //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer_s1_agent_rdata_fifo_src_valid),                //                .valid
		.rdata_fifo_src_data     (timer_s1_agent_rdata_fifo_src_data),                 //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                      //       clk.clk
		.reset             (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timer_s1_agent_rf_source_data),                      //        in.data
		.in_valid          (timer_s1_agent_rf_source_valid),                     //          .valid
		.in_ready          (timer_s1_agent_rf_source_ready),                     //          .ready
		.in_startofpacket  (timer_s1_agent_rf_source_startofpacket),             //          .startofpacket
		.in_endofpacket    (timer_s1_agent_rf_source_endofpacket),               //          .endofpacket
		.out_data          (timer_s1_agent_rsp_fifo_out_data),                   //       out.data
		.out_valid         (timer_s1_agent_rsp_fifo_out_valid),                  //          .valid
		.out_ready         (timer_s1_agent_rsp_fifo_out_ready),                  //          .ready
		.out_startofpacket (timer_s1_agent_rsp_fifo_out_startofpacket),          //          .startofpacket
		.out_endofpacket   (timer_s1_agent_rsp_fifo_out_endofpacket),            //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) wifi_uart_s1_agent (
		.clk                     (altpll_c0_clk),                                      //             clk.clk
		.reset                   (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (wifi_uart_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (wifi_uart_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (wifi_uart_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (wifi_uart_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (wifi_uart_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (wifi_uart_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (wifi_uart_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (wifi_uart_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (wifi_uart_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (wifi_uart_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (wifi_uart_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (wifi_uart_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (wifi_uart_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (wifi_uart_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (wifi_uart_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (wifi_uart_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_009_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                            //                .channel
		.rf_sink_ready           (wifi_uart_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (wifi_uart_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (wifi_uart_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (wifi_uart_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (wifi_uart_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (wifi_uart_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (wifi_uart_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (wifi_uart_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (wifi_uart_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (wifi_uart_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (wifi_uart_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (wifi_uart_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (wifi_uart_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) wifi_uart_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                      //       clk.clk
		.reset             (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (wifi_uart_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (wifi_uart_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (wifi_uart_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (wifi_uart_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (wifi_uart_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (wifi_uart_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (wifi_uart_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (wifi_uart_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (wifi_uart_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (wifi_uart_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pio_wifi_reset_s1_agent (
		.clk                     (altpll_c0_clk),                                      //             clk.clk
		.reset                   (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pio_wifi_reset_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pio_wifi_reset_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pio_wifi_reset_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pio_wifi_reset_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pio_wifi_reset_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (pio_wifi_reset_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pio_wifi_reset_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pio_wifi_reset_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (pio_wifi_reset_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pio_wifi_reset_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (pio_wifi_reset_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (pio_wifi_reset_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pio_wifi_reset_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (pio_wifi_reset_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (pio_wifi_reset_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (pio_wifi_reset_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_010_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                            //                .channel
		.rf_sink_ready           (pio_wifi_reset_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pio_wifi_reset_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pio_wifi_reset_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pio_wifi_reset_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pio_wifi_reset_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pio_wifi_reset_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pio_wifi_reset_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pio_wifi_reset_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pio_wifi_reset_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pio_wifi_reset_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (pio_wifi_reset_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio_wifi_reset_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pio_wifi_reset_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_wifi_reset_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                      //       clk.clk
		.reset             (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pio_wifi_reset_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pio_wifi_reset_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pio_wifi_reset_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pio_wifi_reset_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pio_wifi_reset_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pio_wifi_reset_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pio_wifi_reset_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pio_wifi_reset_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pio_wifi_reset_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pio_wifi_reset_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pio_led_s1_agent (
		.clk                     (altpll_c0_clk),                                      //             clk.clk
		.reset                   (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pio_led_s1_agent_m0_address),                        //              m0.address
		.m0_burstcount           (pio_led_s1_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (pio_led_s1_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (pio_led_s1_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (pio_led_s1_agent_m0_lock),                           //                .lock
		.m0_readdata             (pio_led_s1_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (pio_led_s1_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (pio_led_s1_agent_m0_read),                           //                .read
		.m0_waitrequest          (pio_led_s1_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (pio_led_s1_agent_m0_writedata),                      //                .writedata
		.m0_write                (pio_led_s1_agent_m0_write),                          //                .write
		.rp_endofpacket          (pio_led_s1_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (pio_led_s1_agent_rp_ready),                          //                .ready
		.rp_valid                (pio_led_s1_agent_rp_valid),                          //                .valid
		.rp_data                 (pio_led_s1_agent_rp_data),                           //                .data
		.rp_startofpacket        (pio_led_s1_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_011_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                            //                .channel
		.rf_sink_ready           (pio_led_s1_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (pio_led_s1_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (pio_led_s1_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (pio_led_s1_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (pio_led_s1_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (pio_led_s1_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (pio_led_s1_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (pio_led_s1_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (pio_led_s1_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (pio_led_s1_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (pio_led_s1_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio_led_s1_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (pio_led_s1_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_led_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                      //       clk.clk
		.reset             (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pio_led_s1_agent_rf_source_data),                    //        in.data
		.in_valid          (pio_led_s1_agent_rf_source_valid),                   //          .valid
		.in_ready          (pio_led_s1_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (pio_led_s1_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (pio_led_s1_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (pio_led_s1_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (pio_led_s1_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (pio_led_s1_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (pio_led_s1_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (pio_led_s1_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pio_key_s1_agent (
		.clk                     (altpll_c0_clk),                                      //             clk.clk
		.reset                   (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pio_key_s1_agent_m0_address),                        //              m0.address
		.m0_burstcount           (pio_key_s1_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (pio_key_s1_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (pio_key_s1_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (pio_key_s1_agent_m0_lock),                           //                .lock
		.m0_readdata             (pio_key_s1_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (pio_key_s1_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (pio_key_s1_agent_m0_read),                           //                .read
		.m0_waitrequest          (pio_key_s1_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (pio_key_s1_agent_m0_writedata),                      //                .writedata
		.m0_write                (pio_key_s1_agent_m0_write),                          //                .write
		.rp_endofpacket          (pio_key_s1_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (pio_key_s1_agent_rp_ready),                          //                .ready
		.rp_valid                (pio_key_s1_agent_rp_valid),                          //                .valid
		.rp_data                 (pio_key_s1_agent_rp_data),                           //                .data
		.rp_startofpacket        (pio_key_s1_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (cmd_mux_012_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_012_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_012_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_012_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_012_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_012_src_channel),                            //                .channel
		.rf_sink_ready           (pio_key_s1_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (pio_key_s1_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (pio_key_s1_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (pio_key_s1_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (pio_key_s1_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (pio_key_s1_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (pio_key_s1_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (pio_key_s1_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (pio_key_s1_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (pio_key_s1_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (pio_key_s1_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio_key_s1_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (pio_key_s1_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_key_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                      //       clk.clk
		.reset             (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pio_key_s1_agent_rf_source_data),                    //        in.data
		.in_valid          (pio_key_s1_agent_rf_source_valid),                   //          .valid
		.in_ready          (pio_key_s1_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (pio_key_s1_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (pio_key_s1_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (pio_key_s1_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (pio_key_s1_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (pio_key_s1_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (pio_key_s1_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (pio_key_s1_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) chaos_code_step_s1_agent (
		.clk                     (altpll_c0_clk),                                       //             clk.clk
		.reset                   (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (chaos_code_step_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (chaos_code_step_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (chaos_code_step_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (chaos_code_step_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (chaos_code_step_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (chaos_code_step_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (chaos_code_step_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (chaos_code_step_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (chaos_code_step_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (chaos_code_step_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (chaos_code_step_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (chaos_code_step_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (chaos_code_step_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (chaos_code_step_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (chaos_code_step_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (chaos_code_step_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_013_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_013_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_013_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_013_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_013_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_013_src_channel),                             //                .channel
		.rf_sink_ready           (chaos_code_step_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (chaos_code_step_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (chaos_code_step_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (chaos_code_step_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (chaos_code_step_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (chaos_code_step_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (chaos_code_step_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (chaos_code_step_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (chaos_code_step_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (chaos_code_step_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (chaos_code_step_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (chaos_code_step_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (chaos_code_step_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) chaos_code_step_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                       //       clk.clk
		.reset             (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (chaos_code_step_s1_agent_rf_source_data),             //        in.data
		.in_valid          (chaos_code_step_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (chaos_code_step_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (chaos_code_step_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (chaos_code_step_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (chaos_code_step_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (chaos_code_step_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (chaos_code_step_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (chaos_code_step_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (chaos_code_step_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) chaos_code_reset_s1_agent (
		.clk                     (altpll_c0_clk),                                        //             clk.clk
		.reset                   (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (chaos_code_reset_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (chaos_code_reset_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (chaos_code_reset_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (chaos_code_reset_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (chaos_code_reset_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (chaos_code_reset_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (chaos_code_reset_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (chaos_code_reset_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (chaos_code_reset_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (chaos_code_reset_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (chaos_code_reset_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (chaos_code_reset_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (chaos_code_reset_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (chaos_code_reset_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (chaos_code_reset_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (chaos_code_reset_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_014_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_014_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_014_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_014_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_014_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_014_src_channel),                              //                .channel
		.rf_sink_ready           (chaos_code_reset_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (chaos_code_reset_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (chaos_code_reset_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (chaos_code_reset_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (chaos_code_reset_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (chaos_code_reset_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (chaos_code_reset_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (chaos_code_reset_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (chaos_code_reset_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (chaos_code_reset_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (chaos_code_reset_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (chaos_code_reset_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (chaos_code_reset_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) chaos_code_reset_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                        //       clk.clk
		.reset             (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (chaos_code_reset_s1_agent_rf_source_data),             //        in.data
		.in_valid          (chaos_code_reset_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (chaos_code_reset_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (chaos_code_reset_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (chaos_code_reset_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (chaos_code_reset_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (chaos_code_reset_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (chaos_code_reset_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (chaos_code_reset_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (chaos_code_reset_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) chaos_code_shift_s1_agent (
		.clk                     (altpll_c0_clk),                                        //             clk.clk
		.reset                   (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (chaos_code_shift_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (chaos_code_shift_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (chaos_code_shift_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (chaos_code_shift_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (chaos_code_shift_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (chaos_code_shift_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (chaos_code_shift_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (chaos_code_shift_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (chaos_code_shift_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (chaos_code_shift_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (chaos_code_shift_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (chaos_code_shift_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (chaos_code_shift_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (chaos_code_shift_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (chaos_code_shift_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (chaos_code_shift_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_015_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_015_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_015_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_015_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_015_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_015_src_channel),                              //                .channel
		.rf_sink_ready           (chaos_code_shift_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (chaos_code_shift_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (chaos_code_shift_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (chaos_code_shift_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (chaos_code_shift_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (chaos_code_shift_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (chaos_code_shift_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (chaos_code_shift_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (chaos_code_shift_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (chaos_code_shift_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (chaos_code_shift_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (chaos_code_shift_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (chaos_code_shift_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) chaos_code_shift_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                        //       clk.clk
		.reset             (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (chaos_code_shift_s1_agent_rf_source_data),             //        in.data
		.in_valid          (chaos_code_shift_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (chaos_code_shift_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (chaos_code_shift_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (chaos_code_shift_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (chaos_code_shift_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (chaos_code_shift_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (chaos_code_shift_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (chaos_code_shift_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (chaos_code_shift_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) chaos_code_done_s1_agent (
		.clk                     (altpll_c0_clk),                                       //             clk.clk
		.reset                   (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (chaos_code_done_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (chaos_code_done_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (chaos_code_done_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (chaos_code_done_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (chaos_code_done_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (chaos_code_done_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (chaos_code_done_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (chaos_code_done_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (chaos_code_done_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (chaos_code_done_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (chaos_code_done_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (chaos_code_done_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (chaos_code_done_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (chaos_code_done_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (chaos_code_done_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (chaos_code_done_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_016_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_016_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_016_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_016_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_016_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_016_src_channel),                             //                .channel
		.rf_sink_ready           (chaos_code_done_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (chaos_code_done_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (chaos_code_done_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (chaos_code_done_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (chaos_code_done_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (chaos_code_done_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (chaos_code_done_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (chaos_code_done_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (chaos_code_done_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (chaos_code_done_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_016_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_016_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_016_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_016_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (chaos_code_done_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (chaos_code_done_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (chaos_code_done_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) chaos_code_done_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                       //       clk.clk
		.reset             (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (chaos_code_done_s1_agent_rf_source_data),             //        in.data
		.in_valid          (chaos_code_done_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (chaos_code_done_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (chaos_code_done_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (chaos_code_done_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (chaos_code_done_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (chaos_code_done_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (chaos_code_done_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (chaos_code_done_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (chaos_code_done_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) chaos_code_x_s1_agent (
		.clk                     (altpll_c0_clk),                                      //             clk.clk
		.reset                   (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (chaos_code_x_s1_agent_m0_address),                   //              m0.address
		.m0_burstcount           (chaos_code_x_s1_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (chaos_code_x_s1_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (chaos_code_x_s1_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (chaos_code_x_s1_agent_m0_lock),                      //                .lock
		.m0_readdata             (chaos_code_x_s1_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (chaos_code_x_s1_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (chaos_code_x_s1_agent_m0_read),                      //                .read
		.m0_waitrequest          (chaos_code_x_s1_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (chaos_code_x_s1_agent_m0_writedata),                 //                .writedata
		.m0_write                (chaos_code_x_s1_agent_m0_write),                     //                .write
		.rp_endofpacket          (chaos_code_x_s1_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (chaos_code_x_s1_agent_rp_ready),                     //                .ready
		.rp_valid                (chaos_code_x_s1_agent_rp_valid),                     //                .valid
		.rp_data                 (chaos_code_x_s1_agent_rp_data),                      //                .data
		.rp_startofpacket        (chaos_code_x_s1_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_017_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_017_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_017_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_017_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_017_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_017_src_channel),                            //                .channel
		.rf_sink_ready           (chaos_code_x_s1_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (chaos_code_x_s1_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (chaos_code_x_s1_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (chaos_code_x_s1_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (chaos_code_x_s1_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (chaos_code_x_s1_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (chaos_code_x_s1_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (chaos_code_x_s1_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (chaos_code_x_s1_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (chaos_code_x_s1_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_017_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_017_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_017_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_017_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (chaos_code_x_s1_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (chaos_code_x_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (chaos_code_x_s1_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) chaos_code_x_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                      //       clk.clk
		.reset             (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (chaos_code_x_s1_agent_rf_source_data),               //        in.data
		.in_valid          (chaos_code_x_s1_agent_rf_source_valid),              //          .valid
		.in_ready          (chaos_code_x_s1_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (chaos_code_x_s1_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (chaos_code_x_s1_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (chaos_code_x_s1_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (chaos_code_x_s1_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (chaos_code_x_s1_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (chaos_code_x_s1_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (chaos_code_x_s1_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) chaos_code_y_s1_agent (
		.clk                     (altpll_c0_clk),                                      //             clk.clk
		.reset                   (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (chaos_code_y_s1_agent_m0_address),                   //              m0.address
		.m0_burstcount           (chaos_code_y_s1_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (chaos_code_y_s1_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (chaos_code_y_s1_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (chaos_code_y_s1_agent_m0_lock),                      //                .lock
		.m0_readdata             (chaos_code_y_s1_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (chaos_code_y_s1_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (chaos_code_y_s1_agent_m0_read),                      //                .read
		.m0_waitrequest          (chaos_code_y_s1_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (chaos_code_y_s1_agent_m0_writedata),                 //                .writedata
		.m0_write                (chaos_code_y_s1_agent_m0_write),                     //                .write
		.rp_endofpacket          (chaos_code_y_s1_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (chaos_code_y_s1_agent_rp_ready),                     //                .ready
		.rp_valid                (chaos_code_y_s1_agent_rp_valid),                     //                .valid
		.rp_data                 (chaos_code_y_s1_agent_rp_data),                      //                .data
		.rp_startofpacket        (chaos_code_y_s1_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_018_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_018_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_018_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_018_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_018_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_018_src_channel),                            //                .channel
		.rf_sink_ready           (chaos_code_y_s1_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (chaos_code_y_s1_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (chaos_code_y_s1_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (chaos_code_y_s1_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (chaos_code_y_s1_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (chaos_code_y_s1_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (chaos_code_y_s1_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (chaos_code_y_s1_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (chaos_code_y_s1_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (chaos_code_y_s1_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_018_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_018_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_018_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_018_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (chaos_code_y_s1_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (chaos_code_y_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (chaos_code_y_s1_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) chaos_code_y_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                      //       clk.clk
		.reset             (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (chaos_code_y_s1_agent_rf_source_data),               //        in.data
		.in_valid          (chaos_code_y_s1_agent_rf_source_valid),              //          .valid
		.in_ready          (chaos_code_y_s1_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (chaos_code_y_s1_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (chaos_code_y_s1_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (chaos_code_y_s1_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (chaos_code_y_s1_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (chaos_code_y_s1_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (chaos_code_y_s1_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (chaos_code_y_s1_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) chaos_code_z_s1_agent (
		.clk                     (altpll_c0_clk),                                      //             clk.clk
		.reset                   (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (chaos_code_z_s1_agent_m0_address),                   //              m0.address
		.m0_burstcount           (chaos_code_z_s1_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (chaos_code_z_s1_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (chaos_code_z_s1_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (chaos_code_z_s1_agent_m0_lock),                      //                .lock
		.m0_readdata             (chaos_code_z_s1_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (chaos_code_z_s1_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (chaos_code_z_s1_agent_m0_read),                      //                .read
		.m0_waitrequest          (chaos_code_z_s1_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (chaos_code_z_s1_agent_m0_writedata),                 //                .writedata
		.m0_write                (chaos_code_z_s1_agent_m0_write),                     //                .write
		.rp_endofpacket          (chaos_code_z_s1_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (chaos_code_z_s1_agent_rp_ready),                     //                .ready
		.rp_valid                (chaos_code_z_s1_agent_rp_valid),                     //                .valid
		.rp_data                 (chaos_code_z_s1_agent_rp_data),                      //                .data
		.rp_startofpacket        (chaos_code_z_s1_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_019_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_019_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_019_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_019_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_019_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_019_src_channel),                            //                .channel
		.rf_sink_ready           (chaos_code_z_s1_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (chaos_code_z_s1_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (chaos_code_z_s1_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (chaos_code_z_s1_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (chaos_code_z_s1_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (chaos_code_z_s1_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (chaos_code_z_s1_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (chaos_code_z_s1_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (chaos_code_z_s1_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (chaos_code_z_s1_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_019_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_019_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_019_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_019_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (chaos_code_z_s1_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (chaos_code_z_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (chaos_code_z_s1_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) chaos_code_z_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                      //       clk.clk
		.reset             (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (chaos_code_z_s1_agent_rf_source_data),               //        in.data
		.in_valid          (chaos_code_z_s1_agent_rf_source_valid),              //          .valid
		.in_ready          (chaos_code_z_s1_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (chaos_code_z_s1_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (chaos_code_z_s1_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (chaos_code_z_s1_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (chaos_code_z_s1_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (chaos_code_z_s1_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (chaos_code_z_s1_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (chaos_code_z_s1_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) chaos_code_w_s1_agent (
		.clk                     (altpll_c0_clk),                                      //             clk.clk
		.reset                   (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (chaos_code_w_s1_agent_m0_address),                   //              m0.address
		.m0_burstcount           (chaos_code_w_s1_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (chaos_code_w_s1_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (chaos_code_w_s1_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (chaos_code_w_s1_agent_m0_lock),                      //                .lock
		.m0_readdata             (chaos_code_w_s1_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (chaos_code_w_s1_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (chaos_code_w_s1_agent_m0_read),                      //                .read
		.m0_waitrequest          (chaos_code_w_s1_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (chaos_code_w_s1_agent_m0_writedata),                 //                .writedata
		.m0_write                (chaos_code_w_s1_agent_m0_write),                     //                .write
		.rp_endofpacket          (chaos_code_w_s1_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (chaos_code_w_s1_agent_rp_ready),                     //                .ready
		.rp_valid                (chaos_code_w_s1_agent_rp_valid),                     //                .valid
		.rp_data                 (chaos_code_w_s1_agent_rp_data),                      //                .data
		.rp_startofpacket        (chaos_code_w_s1_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_020_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_020_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_020_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_020_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_020_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_020_src_channel),                            //                .channel
		.rf_sink_ready           (chaos_code_w_s1_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (chaos_code_w_s1_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (chaos_code_w_s1_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (chaos_code_w_s1_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (chaos_code_w_s1_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (chaos_code_w_s1_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (chaos_code_w_s1_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (chaos_code_w_s1_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (chaos_code_w_s1_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (chaos_code_w_s1_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_020_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_020_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_020_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_020_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (chaos_code_w_s1_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (chaos_code_w_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (chaos_code_w_s1_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) chaos_code_w_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                      //       clk.clk
		.reset             (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (chaos_code_w_s1_agent_rf_source_data),               //        in.data
		.in_valid          (chaos_code_w_s1_agent_rf_source_valid),              //          .valid
		.in_ready          (chaos_code_w_s1_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (chaos_code_w_s1_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (chaos_code_w_s1_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (chaos_code_w_s1_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (chaos_code_w_s1_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (chaos_code_w_s1_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (chaos_code_w_s1_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (chaos_code_w_s1_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	Qsys_system_mm_interconnect_0_router router (
		.sink_ready         (pixel_buffer_dma_avalon_pixel_dma_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (pixel_buffer_dma_avalon_pixel_dma_master_agent_cp_valid),         //          .valid
		.sink_data          (pixel_buffer_dma_avalon_pixel_dma_master_agent_cp_data),          //          .data
		.sink_startofpacket (pixel_buffer_dma_avalon_pixel_dma_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (pixel_buffer_dma_avalon_pixel_dma_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (altpll_c0_clk),                                                   //       clk.clk
		.reset              (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.src_ready          (router_src_ready),                                                //       src.ready
		.src_valid          (router_src_valid),                                                //          .valid
		.src_data           (router_src_data),                                                 //          .data
		.src_channel        (router_src_channel),                                              //          .channel
		.src_startofpacket  (router_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                           //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (nios2_gen2_data_master_agent_cp_ready),              //      sink.ready
		.sink_valid         (nios2_gen2_data_master_agent_cp_valid),              //          .valid
		.sink_data          (nios2_gen2_data_master_agent_cp_data),               //          .data
		.sink_startofpacket (nios2_gen2_data_master_agent_cp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (nios2_gen2_data_master_agent_cp_endofpacket),        //          .endofpacket
		.clk                (altpll_c0_clk),                                      //       clk.clk
		.reset              (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                               //       src.ready
		.src_valid          (router_001_src_valid),                               //          .valid
		.src_data           (router_001_src_data),                                //          .data
		.src_channel        (router_001_src_channel),                             //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                          //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (nios2_gen2_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_gen2_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_gen2_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_gen2_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_gen2_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (altpll_c0_clk),                                        //       clk.clk
		.reset              (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_002_src_ready),                                 //       src.ready
		.src_valid          (router_002_src_valid),                                 //          .valid
		.src_data           (router_002_src_data),                                  //          .data
		.src_channel        (router_002_src_channel),                               //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                            //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (pixel_buffer_avalon_sram_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (pixel_buffer_avalon_sram_slave_agent_rp_valid),         //          .valid
		.sink_data          (pixel_buffer_avalon_sram_slave_agent_rp_data),          //          .data
		.sink_startofpacket (pixel_buffer_avalon_sram_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (pixel_buffer_avalon_sram_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_c0_clk),                                         //       clk.clk
		.reset              (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_003_src_ready),                                  //       src.ready
		.src_valid          (router_003_src_valid),                                  //          .valid
		.src_data           (router_003_src_data),                                   //          .data
		.src_channel        (router_003_src_channel),                                //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                             //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (pixel_buffer_dma_avalon_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (pixel_buffer_dma_avalon_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (pixel_buffer_dma_avalon_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (pixel_buffer_dma_avalon_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (pixel_buffer_dma_avalon_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_c0_clk),                                                //       clk.clk
		.reset              (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.src_ready          (router_004_src_ready),                                         //       src.ready
		.src_valid          (router_004_src_valid),                                         //          .valid
		.src_data           (router_004_src_data),                                          //          .data
		.src_channel        (router_004_src_channel),                                       //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                    //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_router_004 router_005 (
		.sink_ready         (jtag_uart_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_c0_clk),                                      //       clk.clk
		.reset              (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                               //       src.ready
		.src_valid          (router_005_src_valid),                               //          .valid
		.src_data           (router_005_src_data),                                //          .data
		.src_channel        (router_005_src_channel),                             //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                          //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_router_004 router_006 (
		.sink_ready         (sd_card_avalon_sdcard_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (sd_card_avalon_sdcard_slave_agent_rp_valid),         //          .valid
		.sink_data          (sd_card_avalon_sdcard_slave_agent_rp_data),          //          .data
		.sink_startofpacket (sd_card_avalon_sdcard_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sd_card_avalon_sdcard_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_c0_clk),                                      //       clk.clk
		.reset              (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                               //       src.ready
		.src_valid          (router_006_src_valid),                               //          .valid
		.src_data           (router_006_src_data),                                //          .data
		.src_channel        (router_006_src_channel),                             //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                          //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_router_004 router_007 (
		.sink_ready         (sysid_control_slave_agent_rp_ready),                 //      sink.ready
		.sink_valid         (sysid_control_slave_agent_rp_valid),                 //          .valid
		.sink_data          (sysid_control_slave_agent_rp_data),                  //          .data
		.sink_startofpacket (sysid_control_slave_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (sysid_control_slave_agent_rp_endofpacket),           //          .endofpacket
		.clk                (altpll_c0_clk),                                      //       clk.clk
		.reset              (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                               //       src.ready
		.src_valid          (router_007_src_valid),                               //          .valid
		.src_data           (router_007_src_data),                                //          .data
		.src_channel        (router_007_src_channel),                             //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                          //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_router_008 router_008 (
		.sink_ready         (nios2_gen2_debug_mem_slave_agent_rp_ready),          //      sink.ready
		.sink_valid         (nios2_gen2_debug_mem_slave_agent_rp_valid),          //          .valid
		.sink_data          (nios2_gen2_debug_mem_slave_agent_rp_data),           //          .data
		.sink_startofpacket (nios2_gen2_debug_mem_slave_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (nios2_gen2_debug_mem_slave_agent_rp_endofpacket),    //          .endofpacket
		.clk                (altpll_c0_clk),                                      //       clk.clk
		.reset              (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                               //       src.ready
		.src_valid          (router_008_src_valid),                               //          .valid
		.src_data           (router_008_src_data),                                //          .data
		.src_channel        (router_008_src_channel),                             //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                          //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_router_004 router_009 (
		.sink_ready         (altpll_pll_slave_agent_rp_ready),                          //      sink.ready
		.sink_valid         (altpll_pll_slave_agent_rp_valid),                          //          .valid
		.sink_data          (altpll_pll_slave_agent_rp_data),                           //          .data
		.sink_startofpacket (altpll_pll_slave_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (altpll_pll_slave_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (clk_0_clk_clk),                                            //       clk.clk
		.reset              (altpll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                                     //       src.ready
		.src_valid          (router_009_src_valid),                                     //          .valid
		.src_data           (router_009_src_data),                                      //          .data
		.src_channel        (router_009_src_channel),                                   //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                                //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_router_008 router_010 (
		.sink_ready         (sdram_s1_agent_rp_ready),                            //      sink.ready
		.sink_valid         (sdram_s1_agent_rp_valid),                            //          .valid
		.sink_data          (sdram_s1_agent_rp_data),                             //          .data
		.sink_startofpacket (sdram_s1_agent_rp_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (sdram_s1_agent_rp_endofpacket),                      //          .endofpacket
		.clk                (altpll_c0_clk),                                      //       clk.clk
		.reset              (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                               //       src.ready
		.src_valid          (router_010_src_valid),                               //          .valid
		.src_data           (router_010_src_data),                                //          .data
		.src_channel        (router_010_src_channel),                             //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                          //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_router_004 router_011 (
		.sink_ready         (timer_s1_agent_rp_ready),                            //      sink.ready
		.sink_valid         (timer_s1_agent_rp_valid),                            //          .valid
		.sink_data          (timer_s1_agent_rp_data),                             //          .data
		.sink_startofpacket (timer_s1_agent_rp_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (timer_s1_agent_rp_endofpacket),                      //          .endofpacket
		.clk                (altpll_c0_clk),                                      //       clk.clk
		.reset              (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                               //       src.ready
		.src_valid          (router_011_src_valid),                               //          .valid
		.src_data           (router_011_src_data),                                //          .data
		.src_channel        (router_011_src_channel),                             //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                          //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_router_004 router_012 (
		.sink_ready         (wifi_uart_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (wifi_uart_s1_agent_rp_valid),                        //          .valid
		.sink_data          (wifi_uart_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (wifi_uart_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (wifi_uart_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (altpll_c0_clk),                                      //       clk.clk
		.reset              (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                               //       src.ready
		.src_valid          (router_012_src_valid),                               //          .valid
		.src_data           (router_012_src_data),                                //          .data
		.src_channel        (router_012_src_channel),                             //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                          //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_router_004 router_013 (
		.sink_ready         (pio_wifi_reset_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (pio_wifi_reset_s1_agent_rp_valid),                   //          .valid
		.sink_data          (pio_wifi_reset_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (pio_wifi_reset_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (pio_wifi_reset_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (altpll_c0_clk),                                      //       clk.clk
		.reset              (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                               //       src.ready
		.src_valid          (router_013_src_valid),                               //          .valid
		.src_data           (router_013_src_data),                                //          .data
		.src_channel        (router_013_src_channel),                             //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                          //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_router_004 router_014 (
		.sink_ready         (pio_led_s1_agent_rp_ready),                          //      sink.ready
		.sink_valid         (pio_led_s1_agent_rp_valid),                          //          .valid
		.sink_data          (pio_led_s1_agent_rp_data),                           //          .data
		.sink_startofpacket (pio_led_s1_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (pio_led_s1_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (altpll_c0_clk),                                      //       clk.clk
		.reset              (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                               //       src.ready
		.src_valid          (router_014_src_valid),                               //          .valid
		.src_data           (router_014_src_data),                                //          .data
		.src_channel        (router_014_src_channel),                             //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                          //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_router_004 router_015 (
		.sink_ready         (pio_key_s1_agent_rp_ready),                          //      sink.ready
		.sink_valid         (pio_key_s1_agent_rp_valid),                          //          .valid
		.sink_data          (pio_key_s1_agent_rp_data),                           //          .data
		.sink_startofpacket (pio_key_s1_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (pio_key_s1_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (altpll_c0_clk),                                      //       clk.clk
		.reset              (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                               //       src.ready
		.src_valid          (router_015_src_valid),                               //          .valid
		.src_data           (router_015_src_data),                                //          .data
		.src_channel        (router_015_src_channel),                             //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                          //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_router_004 router_016 (
		.sink_ready         (chaos_code_step_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (chaos_code_step_s1_agent_rp_valid),                  //          .valid
		.sink_data          (chaos_code_step_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (chaos_code_step_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (chaos_code_step_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (altpll_c0_clk),                                      //       clk.clk
		.reset              (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                               //       src.ready
		.src_valid          (router_016_src_valid),                               //          .valid
		.src_data           (router_016_src_data),                                //          .data
		.src_channel        (router_016_src_channel),                             //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                          //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_router_004 router_017 (
		.sink_ready         (chaos_code_reset_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (chaos_code_reset_s1_agent_rp_valid),                 //          .valid
		.sink_data          (chaos_code_reset_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (chaos_code_reset_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (chaos_code_reset_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (altpll_c0_clk),                                      //       clk.clk
		.reset              (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                               //       src.ready
		.src_valid          (router_017_src_valid),                               //          .valid
		.src_data           (router_017_src_data),                                //          .data
		.src_channel        (router_017_src_channel),                             //          .channel
		.src_startofpacket  (router_017_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                          //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_router_004 router_018 (
		.sink_ready         (chaos_code_shift_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (chaos_code_shift_s1_agent_rp_valid),                 //          .valid
		.sink_data          (chaos_code_shift_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (chaos_code_shift_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (chaos_code_shift_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (altpll_c0_clk),                                      //       clk.clk
		.reset              (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                               //       src.ready
		.src_valid          (router_018_src_valid),                               //          .valid
		.src_data           (router_018_src_data),                                //          .data
		.src_channel        (router_018_src_channel),                             //          .channel
		.src_startofpacket  (router_018_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                          //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_router_004 router_019 (
		.sink_ready         (chaos_code_done_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (chaos_code_done_s1_agent_rp_valid),                  //          .valid
		.sink_data          (chaos_code_done_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (chaos_code_done_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (chaos_code_done_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (altpll_c0_clk),                                      //       clk.clk
		.reset              (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_019_src_ready),                               //       src.ready
		.src_valid          (router_019_src_valid),                               //          .valid
		.src_data           (router_019_src_data),                                //          .data
		.src_channel        (router_019_src_channel),                             //          .channel
		.src_startofpacket  (router_019_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                          //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_router_004 router_020 (
		.sink_ready         (chaos_code_x_s1_agent_rp_ready),                     //      sink.ready
		.sink_valid         (chaos_code_x_s1_agent_rp_valid),                     //          .valid
		.sink_data          (chaos_code_x_s1_agent_rp_data),                      //          .data
		.sink_startofpacket (chaos_code_x_s1_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (chaos_code_x_s1_agent_rp_endofpacket),               //          .endofpacket
		.clk                (altpll_c0_clk),                                      //       clk.clk
		.reset              (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_020_src_ready),                               //       src.ready
		.src_valid          (router_020_src_valid),                               //          .valid
		.src_data           (router_020_src_data),                                //          .data
		.src_channel        (router_020_src_channel),                             //          .channel
		.src_startofpacket  (router_020_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                          //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_router_004 router_021 (
		.sink_ready         (chaos_code_y_s1_agent_rp_ready),                     //      sink.ready
		.sink_valid         (chaos_code_y_s1_agent_rp_valid),                     //          .valid
		.sink_data          (chaos_code_y_s1_agent_rp_data),                      //          .data
		.sink_startofpacket (chaos_code_y_s1_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (chaos_code_y_s1_agent_rp_endofpacket),               //          .endofpacket
		.clk                (altpll_c0_clk),                                      //       clk.clk
		.reset              (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_021_src_ready),                               //       src.ready
		.src_valid          (router_021_src_valid),                               //          .valid
		.src_data           (router_021_src_data),                                //          .data
		.src_channel        (router_021_src_channel),                             //          .channel
		.src_startofpacket  (router_021_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)                          //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_router_004 router_022 (
		.sink_ready         (chaos_code_z_s1_agent_rp_ready),                     //      sink.ready
		.sink_valid         (chaos_code_z_s1_agent_rp_valid),                     //          .valid
		.sink_data          (chaos_code_z_s1_agent_rp_data),                      //          .data
		.sink_startofpacket (chaos_code_z_s1_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (chaos_code_z_s1_agent_rp_endofpacket),               //          .endofpacket
		.clk                (altpll_c0_clk),                                      //       clk.clk
		.reset              (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_022_src_ready),                               //       src.ready
		.src_valid          (router_022_src_valid),                               //          .valid
		.src_data           (router_022_src_data),                                //          .data
		.src_channel        (router_022_src_channel),                             //          .channel
		.src_startofpacket  (router_022_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_022_src_endofpacket)                          //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_router_004 router_023 (
		.sink_ready         (chaos_code_w_s1_agent_rp_ready),                     //      sink.ready
		.sink_valid         (chaos_code_w_s1_agent_rp_valid),                     //          .valid
		.sink_data          (chaos_code_w_s1_agent_rp_data),                      //          .data
		.sink_startofpacket (chaos_code_w_s1_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (chaos_code_w_s1_agent_rp_endofpacket),               //          .endofpacket
		.clk                (altpll_c0_clk),                                      //       clk.clk
		.reset              (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_023_src_ready),                               //       src.ready
		.src_valid          (router_023_src_valid),                               //          .valid
		.src_data           (router_023_src_data),                                //          .data
		.src_channel        (router_023_src_channel),                             //          .channel
		.src_startofpacket  (router_023_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_023_src_endofpacket)                          //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (7),
		.PIPELINED                 (0),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (21),
		.VALID_WIDTH               (21),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) nios2_gen2_data_master_limiter (
		.clk                    (altpll_c0_clk),                                        //       clk.clk
		.reset                  (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                 //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                 //          .valid
		.cmd_sink_data          (router_001_src_data),                                  //          .data
		.cmd_sink_channel       (router_001_src_channel),                               //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                         //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                           //          .endofpacket
		.cmd_src_ready          (nios2_gen2_data_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (nios2_gen2_data_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (nios2_gen2_data_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (nios2_gen2_data_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (nios2_gen2_data_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                              //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                 //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                        //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                          //          .endofpacket
		.rsp_src_ready          (nios2_gen2_data_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (nios2_gen2_data_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (nios2_gen2_data_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (nios2_gen2_data_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (nios2_gen2_data_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (nios2_gen2_data_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (nios2_gen2_data_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (7),
		.PIPELINED                 (0),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (21),
		.VALID_WIDTH               (21),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) nios2_gen2_instruction_master_limiter (
		.clk                    (altpll_c0_clk),                                               //       clk.clk
		.reset                  (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.cmd_sink_ready         (router_002_src_ready),                                        //  cmd_sink.ready
		.cmd_sink_valid         (router_002_src_valid),                                        //          .valid
		.cmd_sink_data          (router_002_src_data),                                         //          .data
		.cmd_sink_channel       (router_002_src_channel),                                      //          .channel
		.cmd_sink_startofpacket (router_002_src_startofpacket),                                //          .startofpacket
		.cmd_sink_endofpacket   (router_002_src_endofpacket),                                  //          .endofpacket
		.cmd_src_ready          (nios2_gen2_instruction_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (nios2_gen2_instruction_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (nios2_gen2_instruction_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (nios2_gen2_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (nios2_gen2_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_002_src_ready),                                       //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_002_src_valid),                                       //          .valid
		.rsp_sink_channel       (rsp_mux_002_src_channel),                                     //          .channel
		.rsp_sink_data          (rsp_mux_002_src_data),                                        //          .data
		.rsp_sink_startofpacket (rsp_mux_002_src_startofpacket),                               //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_002_src_endofpacket),                                 //          .endofpacket
		.rsp_src_ready          (nios2_gen2_instruction_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (nios2_gen2_instruction_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (nios2_gen2_instruction_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (nios2_gen2_instruction_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (nios2_gen2_instruction_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (nios2_gen2_instruction_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (nios2_gen2_instruction_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (69),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_BURST_TYPE_H          (66),
		.PKT_BURST_TYPE_L          (65),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (94),
		.ST_CHANNEL_W              (21),
		.OUT_BYTE_CNT_H            (57),
		.OUT_BURSTWRAP_H           (61),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) pixel_buffer_avalon_sram_slave_burst_adapter (
		.clk                   (altpll_c0_clk),                                                      //       cr0.clk
		.reset                 (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),                 // cr0_reset.reset
		.sink0_valid           (pixel_buffer_avalon_sram_slave_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (pixel_buffer_avalon_sram_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (pixel_buffer_avalon_sram_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (pixel_buffer_avalon_sram_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (pixel_buffer_avalon_sram_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (pixel_buffer_avalon_sram_slave_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (pixel_buffer_avalon_sram_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pixel_buffer_avalon_sram_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (pixel_buffer_avalon_sram_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pixel_buffer_avalon_sram_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pixel_buffer_avalon_sram_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pixel_buffer_avalon_sram_slave_burst_adapter_source0_ready)          //          .ready
	);

	Qsys_system_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (altpll_c0_clk),                                      //       clk.clk
		.reset              (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                                   //      sink.ready
		.sink_channel       (router_src_channel),                                 //          .channel
		.sink_data          (router_src_data),                                    //          .data
		.sink_startofpacket (router_src_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                             //          .endofpacket
		.sink_valid         (router_src_valid),                                   //          .valid
		.src0_ready         (cmd_demux_src0_ready),                               //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                               //          .valid
		.src0_data          (cmd_demux_src0_data),                                //          .data
		.src0_channel       (cmd_demux_src0_channel),                             //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                       //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                          //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                 (altpll_c0_clk),                                        //        clk.clk
		.reset               (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),   //  clk_reset.reset
		.sink_ready          (nios2_gen2_data_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel        (nios2_gen2_data_master_limiter_cmd_src_channel),       //           .channel
		.sink_data           (nios2_gen2_data_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket  (nios2_gen2_data_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket    (nios2_gen2_data_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid          (nios2_gen2_data_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready          (cmd_demux_001_src0_ready),                             //       src0.ready
		.src0_valid          (cmd_demux_001_src0_valid),                             //           .valid
		.src0_data           (cmd_demux_001_src0_data),                              //           .data
		.src0_channel        (cmd_demux_001_src0_channel),                           //           .channel
		.src0_startofpacket  (cmd_demux_001_src0_startofpacket),                     //           .startofpacket
		.src0_endofpacket    (cmd_demux_001_src0_endofpacket),                       //           .endofpacket
		.src1_ready          (cmd_demux_001_src1_ready),                             //       src1.ready
		.src1_valid          (cmd_demux_001_src1_valid),                             //           .valid
		.src1_data           (cmd_demux_001_src1_data),                              //           .data
		.src1_channel        (cmd_demux_001_src1_channel),                           //           .channel
		.src1_startofpacket  (cmd_demux_001_src1_startofpacket),                     //           .startofpacket
		.src1_endofpacket    (cmd_demux_001_src1_endofpacket),                       //           .endofpacket
		.src2_ready          (cmd_demux_001_src2_ready),                             //       src2.ready
		.src2_valid          (cmd_demux_001_src2_valid),                             //           .valid
		.src2_data           (cmd_demux_001_src2_data),                              //           .data
		.src2_channel        (cmd_demux_001_src2_channel),                           //           .channel
		.src2_startofpacket  (cmd_demux_001_src2_startofpacket),                     //           .startofpacket
		.src2_endofpacket    (cmd_demux_001_src2_endofpacket),                       //           .endofpacket
		.src3_ready          (cmd_demux_001_src3_ready),                             //       src3.ready
		.src3_valid          (cmd_demux_001_src3_valid),                             //           .valid
		.src3_data           (cmd_demux_001_src3_data),                              //           .data
		.src3_channel        (cmd_demux_001_src3_channel),                           //           .channel
		.src3_startofpacket  (cmd_demux_001_src3_startofpacket),                     //           .startofpacket
		.src3_endofpacket    (cmd_demux_001_src3_endofpacket),                       //           .endofpacket
		.src4_ready          (cmd_demux_001_src4_ready),                             //       src4.ready
		.src4_valid          (cmd_demux_001_src4_valid),                             //           .valid
		.src4_data           (cmd_demux_001_src4_data),                              //           .data
		.src4_channel        (cmd_demux_001_src4_channel),                           //           .channel
		.src4_startofpacket  (cmd_demux_001_src4_startofpacket),                     //           .startofpacket
		.src4_endofpacket    (cmd_demux_001_src4_endofpacket),                       //           .endofpacket
		.src5_ready          (cmd_demux_001_src5_ready),                             //       src5.ready
		.src5_valid          (cmd_demux_001_src5_valid),                             //           .valid
		.src5_data           (cmd_demux_001_src5_data),                              //           .data
		.src5_channel        (cmd_demux_001_src5_channel),                           //           .channel
		.src5_startofpacket  (cmd_demux_001_src5_startofpacket),                     //           .startofpacket
		.src5_endofpacket    (cmd_demux_001_src5_endofpacket),                       //           .endofpacket
		.src6_ready          (cmd_demux_001_src6_ready),                             //       src6.ready
		.src6_valid          (cmd_demux_001_src6_valid),                             //           .valid
		.src6_data           (cmd_demux_001_src6_data),                              //           .data
		.src6_channel        (cmd_demux_001_src6_channel),                           //           .channel
		.src6_startofpacket  (cmd_demux_001_src6_startofpacket),                     //           .startofpacket
		.src6_endofpacket    (cmd_demux_001_src6_endofpacket),                       //           .endofpacket
		.src7_ready          (cmd_demux_001_src7_ready),                             //       src7.ready
		.src7_valid          (cmd_demux_001_src7_valid),                             //           .valid
		.src7_data           (cmd_demux_001_src7_data),                              //           .data
		.src7_channel        (cmd_demux_001_src7_channel),                           //           .channel
		.src7_startofpacket  (cmd_demux_001_src7_startofpacket),                     //           .startofpacket
		.src7_endofpacket    (cmd_demux_001_src7_endofpacket),                       //           .endofpacket
		.src8_ready          (cmd_demux_001_src8_ready),                             //       src8.ready
		.src8_valid          (cmd_demux_001_src8_valid),                             //           .valid
		.src8_data           (cmd_demux_001_src8_data),                              //           .data
		.src8_channel        (cmd_demux_001_src8_channel),                           //           .channel
		.src8_startofpacket  (cmd_demux_001_src8_startofpacket),                     //           .startofpacket
		.src8_endofpacket    (cmd_demux_001_src8_endofpacket),                       //           .endofpacket
		.src9_ready          (cmd_demux_001_src9_ready),                             //       src9.ready
		.src9_valid          (cmd_demux_001_src9_valid),                             //           .valid
		.src9_data           (cmd_demux_001_src9_data),                              //           .data
		.src9_channel        (cmd_demux_001_src9_channel),                           //           .channel
		.src9_startofpacket  (cmd_demux_001_src9_startofpacket),                     //           .startofpacket
		.src9_endofpacket    (cmd_demux_001_src9_endofpacket),                       //           .endofpacket
		.src10_ready         (cmd_demux_001_src10_ready),                            //      src10.ready
		.src10_valid         (cmd_demux_001_src10_valid),                            //           .valid
		.src10_data          (cmd_demux_001_src10_data),                             //           .data
		.src10_channel       (cmd_demux_001_src10_channel),                          //           .channel
		.src10_startofpacket (cmd_demux_001_src10_startofpacket),                    //           .startofpacket
		.src10_endofpacket   (cmd_demux_001_src10_endofpacket),                      //           .endofpacket
		.src11_ready         (cmd_demux_001_src11_ready),                            //      src11.ready
		.src11_valid         (cmd_demux_001_src11_valid),                            //           .valid
		.src11_data          (cmd_demux_001_src11_data),                             //           .data
		.src11_channel       (cmd_demux_001_src11_channel),                          //           .channel
		.src11_startofpacket (cmd_demux_001_src11_startofpacket),                    //           .startofpacket
		.src11_endofpacket   (cmd_demux_001_src11_endofpacket),                      //           .endofpacket
		.src12_ready         (cmd_demux_001_src12_ready),                            //      src12.ready
		.src12_valid         (cmd_demux_001_src12_valid),                            //           .valid
		.src12_data          (cmd_demux_001_src12_data),                             //           .data
		.src12_channel       (cmd_demux_001_src12_channel),                          //           .channel
		.src12_startofpacket (cmd_demux_001_src12_startofpacket),                    //           .startofpacket
		.src12_endofpacket   (cmd_demux_001_src12_endofpacket),                      //           .endofpacket
		.src13_ready         (cmd_demux_001_src13_ready),                            //      src13.ready
		.src13_valid         (cmd_demux_001_src13_valid),                            //           .valid
		.src13_data          (cmd_demux_001_src13_data),                             //           .data
		.src13_channel       (cmd_demux_001_src13_channel),                          //           .channel
		.src13_startofpacket (cmd_demux_001_src13_startofpacket),                    //           .startofpacket
		.src13_endofpacket   (cmd_demux_001_src13_endofpacket),                      //           .endofpacket
		.src14_ready         (cmd_demux_001_src14_ready),                            //      src14.ready
		.src14_valid         (cmd_demux_001_src14_valid),                            //           .valid
		.src14_data          (cmd_demux_001_src14_data),                             //           .data
		.src14_channel       (cmd_demux_001_src14_channel),                          //           .channel
		.src14_startofpacket (cmd_demux_001_src14_startofpacket),                    //           .startofpacket
		.src14_endofpacket   (cmd_demux_001_src14_endofpacket),                      //           .endofpacket
		.src15_ready         (cmd_demux_001_src15_ready),                            //      src15.ready
		.src15_valid         (cmd_demux_001_src15_valid),                            //           .valid
		.src15_data          (cmd_demux_001_src15_data),                             //           .data
		.src15_channel       (cmd_demux_001_src15_channel),                          //           .channel
		.src15_startofpacket (cmd_demux_001_src15_startofpacket),                    //           .startofpacket
		.src15_endofpacket   (cmd_demux_001_src15_endofpacket),                      //           .endofpacket
		.src16_ready         (cmd_demux_001_src16_ready),                            //      src16.ready
		.src16_valid         (cmd_demux_001_src16_valid),                            //           .valid
		.src16_data          (cmd_demux_001_src16_data),                             //           .data
		.src16_channel       (cmd_demux_001_src16_channel),                          //           .channel
		.src16_startofpacket (cmd_demux_001_src16_startofpacket),                    //           .startofpacket
		.src16_endofpacket   (cmd_demux_001_src16_endofpacket),                      //           .endofpacket
		.src17_ready         (cmd_demux_001_src17_ready),                            //      src17.ready
		.src17_valid         (cmd_demux_001_src17_valid),                            //           .valid
		.src17_data          (cmd_demux_001_src17_data),                             //           .data
		.src17_channel       (cmd_demux_001_src17_channel),                          //           .channel
		.src17_startofpacket (cmd_demux_001_src17_startofpacket),                    //           .startofpacket
		.src17_endofpacket   (cmd_demux_001_src17_endofpacket),                      //           .endofpacket
		.src18_ready         (cmd_demux_001_src18_ready),                            //      src18.ready
		.src18_valid         (cmd_demux_001_src18_valid),                            //           .valid
		.src18_data          (cmd_demux_001_src18_data),                             //           .data
		.src18_channel       (cmd_demux_001_src18_channel),                          //           .channel
		.src18_startofpacket (cmd_demux_001_src18_startofpacket),                    //           .startofpacket
		.src18_endofpacket   (cmd_demux_001_src18_endofpacket),                      //           .endofpacket
		.src19_ready         (cmd_demux_001_src19_ready),                            //      src19.ready
		.src19_valid         (cmd_demux_001_src19_valid),                            //           .valid
		.src19_data          (cmd_demux_001_src19_data),                             //           .data
		.src19_channel       (cmd_demux_001_src19_channel),                          //           .channel
		.src19_startofpacket (cmd_demux_001_src19_startofpacket),                    //           .startofpacket
		.src19_endofpacket   (cmd_demux_001_src19_endofpacket),                      //           .endofpacket
		.src20_ready         (cmd_demux_001_src20_ready),                            //      src20.ready
		.src20_valid         (cmd_demux_001_src20_valid),                            //           .valid
		.src20_data          (cmd_demux_001_src20_data),                             //           .data
		.src20_channel       (cmd_demux_001_src20_channel),                          //           .channel
		.src20_startofpacket (cmd_demux_001_src20_startofpacket),                    //           .startofpacket
		.src20_endofpacket   (cmd_demux_001_src20_endofpacket)                       //           .endofpacket
	);

	Qsys_system_mm_interconnect_0_cmd_demux_002 cmd_demux_002 (
		.clk                (altpll_c0_clk),                                               //        clk.clk
		.reset              (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),          //  clk_reset.reset
		.sink_ready         (nios2_gen2_instruction_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (nios2_gen2_instruction_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (nios2_gen2_instruction_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (nios2_gen2_instruction_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (nios2_gen2_instruction_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (nios2_gen2_instruction_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_002_src0_ready),                                    //       src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                                    //           .valid
		.src0_data          (cmd_demux_002_src0_data),                                     //           .data
		.src0_channel       (cmd_demux_002_src0_channel),                                  //           .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                            //           .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket),                              //           .endofpacket
		.src1_ready         (cmd_demux_002_src1_ready),                                    //       src1.ready
		.src1_valid         (cmd_demux_002_src1_valid),                                    //           .valid
		.src1_data          (cmd_demux_002_src1_data),                                     //           .data
		.src1_channel       (cmd_demux_002_src1_channel),                                  //           .channel
		.src1_startofpacket (cmd_demux_002_src1_startofpacket),                            //           .startofpacket
		.src1_endofpacket   (cmd_demux_002_src1_endofpacket)                               //           .endofpacket
	);

	Qsys_system_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (altpll_c0_clk),                                      //       clk.clk
		.reset               (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                  //       src.ready
		.src_valid           (cmd_mux_src_valid),                                  //          .valid
		.src_data            (cmd_mux_src_data),                                   //          .data
		.src_channel         (cmd_mux_src_channel),                                //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                          //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                            //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                               //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                               //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                             //          .channel
		.sink0_data          (cmd_demux_src0_data),                                //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                         //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                           //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                         //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                            //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                      //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_cmd_mux_001 cmd_mux_001 (
		.clk                 (altpll_c0_clk),                                      //       clk.clk
		.reset               (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                              //          .valid
		.src_data            (cmd_mux_001_src_data),                               //          .data
		.src_channel         (cmd_mux_001_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_001_src1_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_001_src1_valid),                           //          .valid
		.sink0_channel       (cmd_demux_001_src1_channel),                         //          .channel
		.sink0_data          (cmd_demux_001_src1_data),                            //          .data
		.sink0_startofpacket (cmd_demux_001_src1_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src1_endofpacket)                      //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_cmd_mux_001 cmd_mux_002 (
		.clk                 (altpll_c0_clk),                                      //       clk.clk
		.reset               (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                              //          .valid
		.src_data            (cmd_mux_002_src_data),                               //          .data
		.src_channel         (cmd_mux_002_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_001_src2_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_001_src2_valid),                           //          .valid
		.sink0_channel       (cmd_demux_001_src2_channel),                         //          .channel
		.sink0_data          (cmd_demux_001_src2_data),                            //          .data
		.sink0_startofpacket (cmd_demux_001_src2_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src2_endofpacket)                      //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_cmd_mux_001 cmd_mux_003 (
		.clk                 (altpll_c0_clk),                                      //       clk.clk
		.reset               (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                              //          .valid
		.src_data            (cmd_mux_003_src_data),                               //          .data
		.src_channel         (cmd_mux_003_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_001_src3_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_001_src3_valid),                           //          .valid
		.sink0_channel       (cmd_demux_001_src3_channel),                         //          .channel
		.sink0_data          (cmd_demux_001_src3_data),                            //          .data
		.sink0_startofpacket (cmd_demux_001_src3_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src3_endofpacket)                      //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_cmd_mux_001 cmd_mux_004 (
		.clk                 (altpll_c0_clk),                                      //       clk.clk
		.reset               (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                              //          .valid
		.src_data            (cmd_mux_004_src_data),                               //          .data
		.src_channel         (cmd_mux_004_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_001_src4_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_001_src4_valid),                           //          .valid
		.sink0_channel       (cmd_demux_001_src4_channel),                         //          .channel
		.sink0_data          (cmd_demux_001_src4_data),                            //          .data
		.sink0_startofpacket (cmd_demux_001_src4_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src4_endofpacket)                      //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_cmd_mux cmd_mux_005 (
		.clk                 (altpll_c0_clk),                                      //       clk.clk
		.reset               (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                              //          .valid
		.src_data            (cmd_mux_005_src_data),                               //          .data
		.src_channel         (cmd_mux_005_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_001_src5_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_001_src5_valid),                           //          .valid
		.sink0_channel       (cmd_demux_001_src5_channel),                         //          .channel
		.sink0_data          (cmd_demux_001_src5_data),                            //          .data
		.sink0_startofpacket (cmd_demux_001_src5_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src5_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_002_src0_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_002_src0_valid),                           //          .valid
		.sink1_channel       (cmd_demux_002_src0_channel),                         //          .channel
		.sink1_data          (cmd_demux_002_src0_data),                            //          .data
		.sink1_startofpacket (cmd_demux_002_src0_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_002_src0_endofpacket)                      //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_cmd_mux_001 cmd_mux_006 (
		.clk                 (clk_0_clk_clk),                                            //       clk.clk
		.reset               (altpll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                                    //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                                    //          .valid
		.src_data            (cmd_mux_006_src_data),                                     //          .data
		.src_channel         (cmd_mux_006_src_channel),                                  //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                            //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                              //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                        //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                        //          .valid
		.sink0_channel       (crosser_out_channel),                                      //          .channel
		.sink0_data          (crosser_out_data),                                         //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                                //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                                   //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (altpll_c0_clk),                                      //       clk.clk
		.reset               (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                              //          .valid
		.src_data            (cmd_mux_007_src_data),                               //          .data
		.src_channel         (cmd_mux_007_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_001_src7_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_001_src7_valid),                           //          .valid
		.sink0_channel       (cmd_demux_001_src7_channel),                         //          .channel
		.sink0_data          (cmd_demux_001_src7_data),                            //          .data
		.sink0_startofpacket (cmd_demux_001_src7_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src7_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_002_src1_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_002_src1_valid),                           //          .valid
		.sink1_channel       (cmd_demux_002_src1_channel),                         //          .channel
		.sink1_data          (cmd_demux_002_src1_data),                            //          .data
		.sink1_startofpacket (cmd_demux_002_src1_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_002_src1_endofpacket)                      //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_cmd_mux_001 cmd_mux_008 (
		.clk                 (altpll_c0_clk),                                      //       clk.clk
		.reset               (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                              //          .valid
		.src_data            (cmd_mux_008_src_data),                               //          .data
		.src_channel         (cmd_mux_008_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_001_src8_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_001_src8_valid),                           //          .valid
		.sink0_channel       (cmd_demux_001_src8_channel),                         //          .channel
		.sink0_data          (cmd_demux_001_src8_data),                            //          .data
		.sink0_startofpacket (cmd_demux_001_src8_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src8_endofpacket)                      //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_cmd_mux_001 cmd_mux_009 (
		.clk                 (altpll_c0_clk),                                      //       clk.clk
		.reset               (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                              //          .valid
		.src_data            (cmd_mux_009_src_data),                               //          .data
		.src_channel         (cmd_mux_009_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_001_src9_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_001_src9_valid),                           //          .valid
		.sink0_channel       (cmd_demux_001_src9_channel),                         //          .channel
		.sink0_data          (cmd_demux_001_src9_data),                            //          .data
		.sink0_startofpacket (cmd_demux_001_src9_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src9_endofpacket)                      //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_cmd_mux_001 cmd_mux_010 (
		.clk                 (altpll_c0_clk),                                      //       clk.clk
		.reset               (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                              //          .valid
		.src_data            (cmd_mux_010_src_data),                               //          .data
		.src_channel         (cmd_mux_010_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_001_src10_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_001_src10_valid),                          //          .valid
		.sink0_channel       (cmd_demux_001_src10_channel),                        //          .channel
		.sink0_data          (cmd_demux_001_src10_data),                           //          .data
		.sink0_startofpacket (cmd_demux_001_src10_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src10_endofpacket)                     //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_cmd_mux_001 cmd_mux_011 (
		.clk                 (altpll_c0_clk),                                      //       clk.clk
		.reset               (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                              //          .valid
		.src_data            (cmd_mux_011_src_data),                               //          .data
		.src_channel         (cmd_mux_011_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_001_src11_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_001_src11_valid),                          //          .valid
		.sink0_channel       (cmd_demux_001_src11_channel),                        //          .channel
		.sink0_data          (cmd_demux_001_src11_data),                           //          .data
		.sink0_startofpacket (cmd_demux_001_src11_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src11_endofpacket)                     //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_cmd_mux_001 cmd_mux_012 (
		.clk                 (altpll_c0_clk),                                      //       clk.clk
		.reset               (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                              //          .valid
		.src_data            (cmd_mux_012_src_data),                               //          .data
		.src_channel         (cmd_mux_012_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_001_src12_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_001_src12_valid),                          //          .valid
		.sink0_channel       (cmd_demux_001_src12_channel),                        //          .channel
		.sink0_data          (cmd_demux_001_src12_data),                           //          .data
		.sink0_startofpacket (cmd_demux_001_src12_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src12_endofpacket)                     //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_cmd_mux_001 cmd_mux_013 (
		.clk                 (altpll_c0_clk),                                      //       clk.clk
		.reset               (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                              //          .valid
		.src_data            (cmd_mux_013_src_data),                               //          .data
		.src_channel         (cmd_mux_013_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_001_src13_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_001_src13_valid),                          //          .valid
		.sink0_channel       (cmd_demux_001_src13_channel),                        //          .channel
		.sink0_data          (cmd_demux_001_src13_data),                           //          .data
		.sink0_startofpacket (cmd_demux_001_src13_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src13_endofpacket)                     //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_cmd_mux_001 cmd_mux_014 (
		.clk                 (altpll_c0_clk),                                      //       clk.clk
		.reset               (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                              //          .valid
		.src_data            (cmd_mux_014_src_data),                               //          .data
		.src_channel         (cmd_mux_014_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_001_src14_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_001_src14_valid),                          //          .valid
		.sink0_channel       (cmd_demux_001_src14_channel),                        //          .channel
		.sink0_data          (cmd_demux_001_src14_data),                           //          .data
		.sink0_startofpacket (cmd_demux_001_src14_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src14_endofpacket)                     //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_cmd_mux_001 cmd_mux_015 (
		.clk                 (altpll_c0_clk),                                      //       clk.clk
		.reset               (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                              //          .valid
		.src_data            (cmd_mux_015_src_data),                               //          .data
		.src_channel         (cmd_mux_015_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_001_src15_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_001_src15_valid),                          //          .valid
		.sink0_channel       (cmd_demux_001_src15_channel),                        //          .channel
		.sink0_data          (cmd_demux_001_src15_data),                           //          .data
		.sink0_startofpacket (cmd_demux_001_src15_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src15_endofpacket)                     //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_cmd_mux_001 cmd_mux_016 (
		.clk                 (altpll_c0_clk),                                      //       clk.clk
		.reset               (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                              //          .valid
		.src_data            (cmd_mux_016_src_data),                               //          .data
		.src_channel         (cmd_mux_016_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_001_src16_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_001_src16_valid),                          //          .valid
		.sink0_channel       (cmd_demux_001_src16_channel),                        //          .channel
		.sink0_data          (cmd_demux_001_src16_data),                           //          .data
		.sink0_startofpacket (cmd_demux_001_src16_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src16_endofpacket)                     //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_cmd_mux_001 cmd_mux_017 (
		.clk                 (altpll_c0_clk),                                      //       clk.clk
		.reset               (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                              //          .valid
		.src_data            (cmd_mux_017_src_data),                               //          .data
		.src_channel         (cmd_mux_017_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_001_src17_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_001_src17_valid),                          //          .valid
		.sink0_channel       (cmd_demux_001_src17_channel),                        //          .channel
		.sink0_data          (cmd_demux_001_src17_data),                           //          .data
		.sink0_startofpacket (cmd_demux_001_src17_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src17_endofpacket)                     //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_cmd_mux_001 cmd_mux_018 (
		.clk                 (altpll_c0_clk),                                      //       clk.clk
		.reset               (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_018_src_valid),                              //          .valid
		.src_data            (cmd_mux_018_src_data),                               //          .data
		.src_channel         (cmd_mux_018_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_001_src18_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_001_src18_valid),                          //          .valid
		.sink0_channel       (cmd_demux_001_src18_channel),                        //          .channel
		.sink0_data          (cmd_demux_001_src18_data),                           //          .data
		.sink0_startofpacket (cmd_demux_001_src18_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src18_endofpacket)                     //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_cmd_mux_001 cmd_mux_019 (
		.clk                 (altpll_c0_clk),                                      //       clk.clk
		.reset               (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_019_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_019_src_valid),                              //          .valid
		.src_data            (cmd_mux_019_src_data),                               //          .data
		.src_channel         (cmd_mux_019_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_019_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_019_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_001_src19_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_001_src19_valid),                          //          .valid
		.sink0_channel       (cmd_demux_001_src19_channel),                        //          .channel
		.sink0_data          (cmd_demux_001_src19_data),                           //          .data
		.sink0_startofpacket (cmd_demux_001_src19_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src19_endofpacket)                     //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_cmd_mux_001 cmd_mux_020 (
		.clk                 (altpll_c0_clk),                                      //       clk.clk
		.reset               (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_020_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_020_src_valid),                              //          .valid
		.src_data            (cmd_mux_020_src_data),                               //          .data
		.src_channel         (cmd_mux_020_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_020_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_020_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_001_src20_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_001_src20_valid),                          //          .valid
		.sink0_channel       (cmd_demux_001_src20_channel),                        //          .channel
		.sink0_data          (cmd_demux_001_src20_data),                           //          .data
		.sink0_startofpacket (cmd_demux_001_src20_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src20_endofpacket)                     //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (altpll_c0_clk),                                                      //       clk.clk
		.reset              (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.sink_ready         (pixel_buffer_avalon_sram_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (pixel_buffer_avalon_sram_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (pixel_buffer_avalon_sram_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (pixel_buffer_avalon_sram_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (pixel_buffer_avalon_sram_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (pixel_buffer_avalon_sram_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                               //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                               //          .valid
		.src0_data          (rsp_demux_src0_data),                                                //          .data
		.src0_channel       (rsp_demux_src0_channel),                                             //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                       //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                                         //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                               //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                               //          .valid
		.src1_data          (rsp_demux_src1_data),                                                //          .data
		.src1_channel       (rsp_demux_src1_channel),                                             //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                                       //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                                          //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_cmd_demux rsp_demux_001 (
		.clk                (altpll_c0_clk),                                      //       clk.clk
		.reset              (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                               //      sink.ready
		.sink_channel       (router_004_src_channel),                             //          .channel
		.sink_data          (router_004_src_data),                                //          .data
		.sink_startofpacket (router_004_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_004_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_001_src0_data),                            //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                      //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_cmd_demux rsp_demux_002 (
		.clk                (altpll_c0_clk),                                      //       clk.clk
		.reset              (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                               //      sink.ready
		.sink_channel       (router_005_src_channel),                             //          .channel
		.sink_data          (router_005_src_data),                                //          .data
		.sink_startofpacket (router_005_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_005_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_002_src0_data),                            //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                      //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_cmd_demux rsp_demux_003 (
		.clk                (altpll_c0_clk),                                      //       clk.clk
		.reset              (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                               //      sink.ready
		.sink_channel       (router_006_src_channel),                             //          .channel
		.sink_data          (router_006_src_data),                                //          .data
		.sink_startofpacket (router_006_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_006_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_003_src0_data),                            //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                      //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_cmd_demux rsp_demux_004 (
		.clk                (altpll_c0_clk),                                      //       clk.clk
		.reset              (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                               //      sink.ready
		.sink_channel       (router_007_src_channel),                             //          .channel
		.sink_data          (router_007_src_data),                                //          .data
		.sink_startofpacket (router_007_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_007_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_004_src0_data),                            //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                      //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_rsp_demux rsp_demux_005 (
		.clk                (altpll_c0_clk),                                      //       clk.clk
		.reset              (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                               //      sink.ready
		.sink_channel       (router_008_src_channel),                             //          .channel
		.sink_data          (router_008_src_data),                                //          .data
		.sink_startofpacket (router_008_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_008_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_005_src0_data),                            //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),                     //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                           //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                           //          .valid
		.src1_data          (rsp_demux_005_src1_data),                            //          .data
		.src1_channel       (rsp_demux_005_src1_channel),                         //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),                   //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket)                      //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_cmd_demux rsp_demux_006 (
		.clk                (clk_0_clk_clk),                                            //       clk.clk
		.reset              (altpll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                                     //      sink.ready
		.sink_channel       (router_009_src_channel),                                   //          .channel
		.sink_data          (router_009_src_data),                                      //          .data
		.sink_startofpacket (router_009_src_startofpacket),                             //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                               //          .endofpacket
		.sink_valid         (router_009_src_valid),                                     //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                                 //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                                 //          .valid
		.src0_data          (rsp_demux_006_src0_data),                                  //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                               //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                         //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                            //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_rsp_demux rsp_demux_007 (
		.clk                (altpll_c0_clk),                                      //       clk.clk
		.reset              (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                               //      sink.ready
		.sink_channel       (router_010_src_channel),                             //          .channel
		.sink_data          (router_010_src_data),                                //          .data
		.sink_startofpacket (router_010_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_010_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_007_src0_data),                            //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),                     //          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),                           //      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),                           //          .valid
		.src1_data          (rsp_demux_007_src1_data),                            //          .data
		.src1_channel       (rsp_demux_007_src1_channel),                         //          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),                   //          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket)                      //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_cmd_demux rsp_demux_008 (
		.clk                (altpll_c0_clk),                                      //       clk.clk
		.reset              (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                               //      sink.ready
		.sink_channel       (router_011_src_channel),                             //          .channel
		.sink_data          (router_011_src_data),                                //          .data
		.sink_startofpacket (router_011_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_011_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_008_src0_data),                            //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)                      //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_cmd_demux rsp_demux_009 (
		.clk                (altpll_c0_clk),                                      //       clk.clk
		.reset              (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                               //      sink.ready
		.sink_channel       (router_012_src_channel),                             //          .channel
		.sink_data          (router_012_src_data),                                //          .data
		.sink_startofpacket (router_012_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_012_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_009_src0_data),                            //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)                      //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_cmd_demux rsp_demux_010 (
		.clk                (altpll_c0_clk),                                      //       clk.clk
		.reset              (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                               //      sink.ready
		.sink_channel       (router_013_src_channel),                             //          .channel
		.sink_data          (router_013_src_data),                                //          .data
		.sink_startofpacket (router_013_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_013_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_010_src0_data),                            //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)                      //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_cmd_demux rsp_demux_011 (
		.clk                (altpll_c0_clk),                                      //       clk.clk
		.reset              (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                               //      sink.ready
		.sink_channel       (router_014_src_channel),                             //          .channel
		.sink_data          (router_014_src_data),                                //          .data
		.sink_startofpacket (router_014_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_014_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_011_src0_data),                            //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)                      //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_cmd_demux rsp_demux_012 (
		.clk                (altpll_c0_clk),                                      //       clk.clk
		.reset              (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                               //      sink.ready
		.sink_channel       (router_015_src_channel),                             //          .channel
		.sink_data          (router_015_src_data),                                //          .data
		.sink_startofpacket (router_015_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_015_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_012_src0_data),                            //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket)                      //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_cmd_demux rsp_demux_013 (
		.clk                (altpll_c0_clk),                                      //       clk.clk
		.reset              (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                               //      sink.ready
		.sink_channel       (router_016_src_channel),                             //          .channel
		.sink_data          (router_016_src_data),                                //          .data
		.sink_startofpacket (router_016_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_016_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_013_src0_data),                            //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket)                      //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_cmd_demux rsp_demux_014 (
		.clk                (altpll_c0_clk),                                      //       clk.clk
		.reset              (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                               //      sink.ready
		.sink_channel       (router_017_src_channel),                             //          .channel
		.sink_data          (router_017_src_data),                                //          .data
		.sink_startofpacket (router_017_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_017_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_014_src0_data),                            //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket)                      //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_cmd_demux rsp_demux_015 (
		.clk                (altpll_c0_clk),                                      //       clk.clk
		.reset              (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                               //      sink.ready
		.sink_channel       (router_018_src_channel),                             //          .channel
		.sink_data          (router_018_src_data),                                //          .data
		.sink_startofpacket (router_018_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_018_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_015_src0_data),                            //          .data
		.src0_channel       (rsp_demux_015_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket)                      //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_cmd_demux rsp_demux_016 (
		.clk                (altpll_c0_clk),                                      //       clk.clk
		.reset              (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                               //      sink.ready
		.sink_channel       (router_019_src_channel),                             //          .channel
		.sink_data          (router_019_src_data),                                //          .data
		.sink_startofpacket (router_019_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_019_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_016_src0_data),                            //          .data
		.src0_channel       (rsp_demux_016_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket)                      //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_cmd_demux rsp_demux_017 (
		.clk                (altpll_c0_clk),                                      //       clk.clk
		.reset              (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                               //      sink.ready
		.sink_channel       (router_020_src_channel),                             //          .channel
		.sink_data          (router_020_src_data),                                //          .data
		.sink_startofpacket (router_020_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_020_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_017_src0_data),                            //          .data
		.src0_channel       (rsp_demux_017_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket)                      //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_cmd_demux rsp_demux_018 (
		.clk                (altpll_c0_clk),                                      //       clk.clk
		.reset              (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_021_src_ready),                               //      sink.ready
		.sink_channel       (router_021_src_channel),                             //          .channel
		.sink_data          (router_021_src_data),                                //          .data
		.sink_startofpacket (router_021_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_021_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_021_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_018_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_018_src0_data),                            //          .data
		.src0_channel       (rsp_demux_018_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket)                      //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_cmd_demux rsp_demux_019 (
		.clk                (altpll_c0_clk),                                      //       clk.clk
		.reset              (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_022_src_ready),                               //      sink.ready
		.sink_channel       (router_022_src_channel),                             //          .channel
		.sink_data          (router_022_src_data),                                //          .data
		.sink_startofpacket (router_022_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_022_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_022_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_019_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_019_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_019_src0_data),                            //          .data
		.src0_channel       (rsp_demux_019_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_019_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_019_src0_endofpacket)                      //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_cmd_demux rsp_demux_020 (
		.clk                (altpll_c0_clk),                                      //       clk.clk
		.reset              (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_023_src_ready),                               //      sink.ready
		.sink_channel       (router_023_src_channel),                             //          .channel
		.sink_data          (router_023_src_data),                                //          .data
		.sink_startofpacket (router_023_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_023_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_023_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_020_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_020_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_020_src0_data),                            //          .data
		.src0_channel       (rsp_demux_020_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_020_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_020_src0_endofpacket)                      //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (altpll_c0_clk),                                      //       clk.clk
		.reset               (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                  //       src.ready
		.src_valid           (rsp_mux_src_valid),                                  //          .valid
		.src_data            (rsp_mux_src_data),                                   //          .data
		.src_channel         (rsp_mux_src_channel),                                //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                          //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                            //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                               //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                               //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                             //          .channel
		.sink0_data          (rsp_demux_src0_data),                                //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                          //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                  (altpll_c0_clk),                                      //       clk.clk
		.reset                (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_001_src_ready),                              //       src.ready
		.src_valid            (rsp_mux_001_src_valid),                              //          .valid
		.src_data             (rsp_mux_001_src_data),                               //          .data
		.src_channel          (rsp_mux_001_src_channel),                            //          .channel
		.src_startofpacket    (rsp_mux_001_src_startofpacket),                      //          .startofpacket
		.src_endofpacket      (rsp_mux_001_src_endofpacket),                        //          .endofpacket
		.sink0_ready          (rsp_demux_src1_ready),                               //     sink0.ready
		.sink0_valid          (rsp_demux_src1_valid),                               //          .valid
		.sink0_channel        (rsp_demux_src1_channel),                             //          .channel
		.sink0_data           (rsp_demux_src1_data),                                //          .data
		.sink0_startofpacket  (rsp_demux_src1_startofpacket),                       //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src1_endofpacket),                         //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                           //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                           //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),                         //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                            //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),                   //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),                     //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                           //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                           //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                         //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                            //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),                   //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),                     //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                           //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                           //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                         //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                            //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),                   //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),                     //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                           //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                           //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                         //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                            //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),                   //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),                     //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                           //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                           //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                         //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                            //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),                   //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),                     //          .endofpacket
		.sink6_ready          (crosser_001_out_ready),                              //     sink6.ready
		.sink6_valid          (crosser_001_out_valid),                              //          .valid
		.sink6_channel        (crosser_001_out_channel),                            //          .channel
		.sink6_data           (crosser_001_out_data),                               //          .data
		.sink6_startofpacket  (crosser_001_out_startofpacket),                      //          .startofpacket
		.sink6_endofpacket    (crosser_001_out_endofpacket),                        //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                           //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                           //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                         //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                            //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),                   //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),                     //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                           //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                           //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                         //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                            //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),                   //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),                     //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                           //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                           //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                         //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                            //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),                   //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),                     //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                           //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                           //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                         //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                            //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),                   //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),                     //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                           //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                           //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),                         //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                            //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),                   //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),                     //          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),                           //    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),                           //          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),                         //          .channel
		.sink12_data          (rsp_demux_012_src0_data),                            //          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),                   //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket),                     //          .endofpacket
		.sink13_ready         (rsp_demux_013_src0_ready),                           //    sink13.ready
		.sink13_valid         (rsp_demux_013_src0_valid),                           //          .valid
		.sink13_channel       (rsp_demux_013_src0_channel),                         //          .channel
		.sink13_data          (rsp_demux_013_src0_data),                            //          .data
		.sink13_startofpacket (rsp_demux_013_src0_startofpacket),                   //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src0_endofpacket),                     //          .endofpacket
		.sink14_ready         (rsp_demux_014_src0_ready),                           //    sink14.ready
		.sink14_valid         (rsp_demux_014_src0_valid),                           //          .valid
		.sink14_channel       (rsp_demux_014_src0_channel),                         //          .channel
		.sink14_data          (rsp_demux_014_src0_data),                            //          .data
		.sink14_startofpacket (rsp_demux_014_src0_startofpacket),                   //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src0_endofpacket),                     //          .endofpacket
		.sink15_ready         (rsp_demux_015_src0_ready),                           //    sink15.ready
		.sink15_valid         (rsp_demux_015_src0_valid),                           //          .valid
		.sink15_channel       (rsp_demux_015_src0_channel),                         //          .channel
		.sink15_data          (rsp_demux_015_src0_data),                            //          .data
		.sink15_startofpacket (rsp_demux_015_src0_startofpacket),                   //          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src0_endofpacket),                     //          .endofpacket
		.sink16_ready         (rsp_demux_016_src0_ready),                           //    sink16.ready
		.sink16_valid         (rsp_demux_016_src0_valid),                           //          .valid
		.sink16_channel       (rsp_demux_016_src0_channel),                         //          .channel
		.sink16_data          (rsp_demux_016_src0_data),                            //          .data
		.sink16_startofpacket (rsp_demux_016_src0_startofpacket),                   //          .startofpacket
		.sink16_endofpacket   (rsp_demux_016_src0_endofpacket),                     //          .endofpacket
		.sink17_ready         (rsp_demux_017_src0_ready),                           //    sink17.ready
		.sink17_valid         (rsp_demux_017_src0_valid),                           //          .valid
		.sink17_channel       (rsp_demux_017_src0_channel),                         //          .channel
		.sink17_data          (rsp_demux_017_src0_data),                            //          .data
		.sink17_startofpacket (rsp_demux_017_src0_startofpacket),                   //          .startofpacket
		.sink17_endofpacket   (rsp_demux_017_src0_endofpacket),                     //          .endofpacket
		.sink18_ready         (rsp_demux_018_src0_ready),                           //    sink18.ready
		.sink18_valid         (rsp_demux_018_src0_valid),                           //          .valid
		.sink18_channel       (rsp_demux_018_src0_channel),                         //          .channel
		.sink18_data          (rsp_demux_018_src0_data),                            //          .data
		.sink18_startofpacket (rsp_demux_018_src0_startofpacket),                   //          .startofpacket
		.sink18_endofpacket   (rsp_demux_018_src0_endofpacket),                     //          .endofpacket
		.sink19_ready         (rsp_demux_019_src0_ready),                           //    sink19.ready
		.sink19_valid         (rsp_demux_019_src0_valid),                           //          .valid
		.sink19_channel       (rsp_demux_019_src0_channel),                         //          .channel
		.sink19_data          (rsp_demux_019_src0_data),                            //          .data
		.sink19_startofpacket (rsp_demux_019_src0_startofpacket),                   //          .startofpacket
		.sink19_endofpacket   (rsp_demux_019_src0_endofpacket),                     //          .endofpacket
		.sink20_ready         (rsp_demux_020_src0_ready),                           //    sink20.ready
		.sink20_valid         (rsp_demux_020_src0_valid),                           //          .valid
		.sink20_channel       (rsp_demux_020_src0_channel),                         //          .channel
		.sink20_data          (rsp_demux_020_src0_data),                            //          .data
		.sink20_startofpacket (rsp_demux_020_src0_startofpacket),                   //          .startofpacket
		.sink20_endofpacket   (rsp_demux_020_src0_endofpacket)                      //          .endofpacket
	);

	Qsys_system_mm_interconnect_0_rsp_mux_002 rsp_mux_002 (
		.clk                 (altpll_c0_clk),                                      //       clk.clk
		.reset               (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                              //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                              //          .valid
		.src_data            (rsp_mux_002_src_data),                               //          .data
		.src_channel         (rsp_mux_002_src_channel),                            //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (rsp_demux_005_src1_ready),                           //     sink0.ready
		.sink0_valid         (rsp_demux_005_src1_valid),                           //          .valid
		.sink0_channel       (rsp_demux_005_src1_channel),                         //          .channel
		.sink0_data          (rsp_demux_005_src1_data),                            //          .data
		.sink0_startofpacket (rsp_demux_005_src1_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (rsp_demux_005_src1_endofpacket),                     //          .endofpacket
		.sink1_ready         (rsp_demux_007_src1_ready),                           //     sink1.ready
		.sink1_valid         (rsp_demux_007_src1_valid),                           //          .valid
		.sink1_channel       (rsp_demux_007_src1_channel),                         //          .channel
		.sink1_data          (rsp_demux_007_src1_data),                            //          .data
		.sink1_startofpacket (rsp_demux_007_src1_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (rsp_demux_007_src1_endofpacket)                      //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (58),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (61),
		.IN_PKT_BURSTWRAP_L            (59),
		.IN_PKT_BURST_SIZE_H           (64),
		.IN_PKT_BURST_SIZE_L           (62),
		.IN_PKT_RESPONSE_STATUS_H      (90),
		.IN_PKT_RESPONSE_STATUS_L      (89),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (66),
		.IN_PKT_BURST_TYPE_L           (65),
		.IN_PKT_ORI_BURST_SIZE_L       (91),
		.IN_PKT_ORI_BURST_SIZE_H       (93),
		.IN_ST_DATA_W                  (94),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (76),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (82),
		.OUT_PKT_BURST_SIZE_L          (80),
		.OUT_PKT_RESPONSE_STATUS_H     (108),
		.OUT_PKT_RESPONSE_STATUS_L     (107),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (84),
		.OUT_PKT_BURST_TYPE_L          (83),
		.OUT_PKT_ORI_BURST_SIZE_L      (109),
		.OUT_PKT_ORI_BURST_SIZE_H      (111),
		.OUT_ST_DATA_W                 (112),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pixel_buffer_avalon_sram_slave_rsp_width_adapter (
		.clk                  (altpll_c0_clk),                                                      //       clk.clk
		.reset                (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_valid             (router_003_src_valid),                                               //      sink.valid
		.in_channel           (router_003_src_channel),                                             //          .channel
		.in_startofpacket     (router_003_src_startofpacket),                                       //          .startofpacket
		.in_endofpacket       (router_003_src_endofpacket),                                         //          .endofpacket
		.in_ready             (router_003_src_ready),                                               //          .ready
		.in_data              (router_003_src_data),                                                //          .data
		.out_endofpacket      (pixel_buffer_avalon_sram_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pixel_buffer_avalon_sram_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (pixel_buffer_avalon_sram_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (pixel_buffer_avalon_sram_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (pixel_buffer_avalon_sram_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pixel_buffer_avalon_sram_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (76),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (79),
		.IN_PKT_BURSTWRAP_L            (77),
		.IN_PKT_BURST_SIZE_H           (82),
		.IN_PKT_BURST_SIZE_L           (80),
		.IN_PKT_RESPONSE_STATUS_H      (108),
		.IN_PKT_RESPONSE_STATUS_L      (107),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (84),
		.IN_PKT_BURST_TYPE_L           (83),
		.IN_PKT_ORI_BURST_SIZE_L       (109),
		.IN_PKT_ORI_BURST_SIZE_H       (111),
		.IN_ST_DATA_W                  (112),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (58),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (64),
		.OUT_PKT_BURST_SIZE_L          (62),
		.OUT_PKT_RESPONSE_STATUS_H     (90),
		.OUT_PKT_RESPONSE_STATUS_L     (89),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (66),
		.OUT_PKT_BURST_TYPE_L          (65),
		.OUT_PKT_ORI_BURST_SIZE_L      (91),
		.OUT_PKT_ORI_BURST_SIZE_H      (93),
		.OUT_ST_DATA_W                 (94),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pixel_buffer_avalon_sram_slave_cmd_width_adapter (
		.clk                  (altpll_c0_clk),                                                      //       clk.clk
		.reset                (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                                  //      sink.valid
		.in_channel           (cmd_mux_src_channel),                                                //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                          //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                            //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                                  //          .ready
		.in_data              (cmd_mux_src_data),                                                   //          .data
		.out_endofpacket      (pixel_buffer_avalon_sram_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pixel_buffer_avalon_sram_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (pixel_buffer_avalon_sram_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (pixel_buffer_avalon_sram_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (pixel_buffer_avalon_sram_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pixel_buffer_avalon_sram_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                              // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (112),
		.BITS_PER_SYMBOL     (112),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (21),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (altpll_c0_clk),                                            //        in_clk.clk
		.in_reset          (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),       //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                            //       out_clk.clk
		.out_reset         (altpll_inclk_interface_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src6_ready),                                 //            in.ready
		.in_valid          (cmd_demux_001_src6_valid),                                 //              .valid
		.in_startofpacket  (cmd_demux_001_src6_startofpacket),                         //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src6_endofpacket),                           //              .endofpacket
		.in_channel        (cmd_demux_001_src6_channel),                               //              .channel
		.in_data           (cmd_demux_001_src6_data),                                  //              .data
		.out_ready         (crosser_out_ready),                                        //           out.ready
		.out_valid         (crosser_out_valid),                                        //              .valid
		.out_startofpacket (crosser_out_startofpacket),                                //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                  //              .endofpacket
		.out_channel       (crosser_out_channel),                                      //              .channel
		.out_data          (crosser_out_data),                                         //              .data
		.in_empty          (1'b0),                                                     //   (terminated)
		.in_error          (1'b0),                                                     //   (terminated)
		.out_empty         (),                                                         //   (terminated)
		.out_error         ()                                                          //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (112),
		.BITS_PER_SYMBOL     (112),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (21),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (clk_0_clk_clk),                                            //        in_clk.clk
		.in_reset          (altpll_inclk_interface_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (altpll_c0_clk),                                            //       out_clk.clk
		.out_reset         (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),       // out_clk_reset.reset
		.in_ready          (rsp_demux_006_src0_ready),                                 //            in.ready
		.in_valid          (rsp_demux_006_src0_valid),                                 //              .valid
		.in_startofpacket  (rsp_demux_006_src0_startofpacket),                         //              .startofpacket
		.in_endofpacket    (rsp_demux_006_src0_endofpacket),                           //              .endofpacket
		.in_channel        (rsp_demux_006_src0_channel),                               //              .channel
		.in_data           (rsp_demux_006_src0_data),                                  //              .data
		.out_ready         (crosser_001_out_ready),                                    //           out.ready
		.out_valid         (crosser_001_out_valid),                                    //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                            //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                              //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                  //              .channel
		.out_data          (crosser_001_out_data),                                     //              .data
		.in_empty          (1'b0),                                                     //   (terminated)
		.in_error          (1'b0),                                                     //   (terminated)
		.out_empty         (),                                                         //   (terminated)
		.out_error         ()                                                          //   (terminated)
	);

	Qsys_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (altpll_c0_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (pixel_buffer_avalon_sram_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (pixel_buffer_avalon_sram_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (pixel_buffer_avalon_sram_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                              //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                             //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                             //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                              //         .error
	);

	Qsys_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (altpll_c0_clk),                                                    // in_clk_0.clk
		.in_rst_0_reset (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),               // in_rst_0.reset
		.in_0_data      (pixel_buffer_dma_avalon_control_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (pixel_buffer_dma_avalon_control_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (pixel_buffer_dma_avalon_control_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                                //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                                //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                                 //         .error
	);

	Qsys_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (altpll_c0_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),     // in_rst_0.reset
		.in_0_data      (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                       //         .error
	);

	Qsys_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (altpll_c0_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),     // in_rst_0.reset
		.in_0_data      (sd_card_avalon_sdcard_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (sd_card_avalon_sdcard_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (sd_card_avalon_sdcard_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                       //         .error
	);

	Qsys_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (altpll_c0_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sysid_control_slave_agent_rdata_fifo_src_data),      //     in_0.data
		.in_0_valid     (sysid_control_slave_agent_rdata_fifo_src_valid),     //         .valid
		.in_0_ready     (sysid_control_slave_agent_rdata_fifo_src_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                   //         .error
	);

	Qsys_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (altpll_c0_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (pixel_buffer_dma_reset_reset_bridge_in_reset_reset),    // in_rst_0.reset
		.in_0_data      (nios2_gen2_debug_mem_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (nios2_gen2_debug_mem_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (nios2_gen2_debug_mem_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                      //         .error
	);

	Qsys_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_0_clk_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (altpll_inclk_interface_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (altpll_pll_slave_agent_rdata_fifo_out_data),               //     in_0.data
		.in_0_valid     (altpll_pll_slave_agent_rdata_fifo_out_valid),              //         .valid
		.in_0_ready     (altpll_pll_slave_agent_rdata_fifo_out_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                        //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                        //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                         //         .error
	);

	Qsys_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (altpll_c0_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sdram_s1_agent_rdata_fifo_src_data),                 //     in_0.data
		.in_0_valid     (sdram_s1_agent_rdata_fifo_src_valid),                //         .valid
		.in_0_ready     (sdram_s1_agent_rdata_fifo_src_ready),                //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                   //         .error
	);

	Qsys_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (altpll_c0_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timer_s1_agent_rdata_fifo_src_data),                 //     in_0.data
		.in_0_valid     (timer_s1_agent_rdata_fifo_src_valid),                //         .valid
		.in_0_ready     (timer_s1_agent_rdata_fifo_src_ready),                //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                   //         .error
	);

	Qsys_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (altpll_c0_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (wifi_uart_s1_agent_rdata_fifo_src_data),             //     in_0.data
		.in_0_valid     (wifi_uart_s1_agent_rdata_fifo_src_valid),            //         .valid
		.in_0_ready     (wifi_uart_s1_agent_rdata_fifo_src_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                   //         .error
	);

	Qsys_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (altpll_c0_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pio_wifi_reset_s1_agent_rdata_fifo_src_data),        //     in_0.data
		.in_0_valid     (pio_wifi_reset_s1_agent_rdata_fifo_src_valid),       //         .valid
		.in_0_ready     (pio_wifi_reset_s1_agent_rdata_fifo_src_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)                   //         .error
	);

	Qsys_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (altpll_c0_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pio_led_s1_agent_rdata_fifo_src_data),               //     in_0.data
		.in_0_valid     (pio_led_s1_agent_rdata_fifo_src_valid),              //         .valid
		.in_0_ready     (pio_led_s1_agent_rdata_fifo_src_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)                   //         .error
	);

	Qsys_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (altpll_c0_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pio_key_s1_agent_rdata_fifo_src_data),               //     in_0.data
		.in_0_valid     (pio_key_s1_agent_rdata_fifo_src_valid),              //         .valid
		.in_0_ready     (pio_key_s1_agent_rdata_fifo_src_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)                   //         .error
	);

	Qsys_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (altpll_c0_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (chaos_code_step_s1_agent_rdata_fifo_src_data),       //     in_0.data
		.in_0_valid     (chaos_code_step_s1_agent_rdata_fifo_src_valid),      //         .valid
		.in_0_ready     (chaos_code_step_s1_agent_rdata_fifo_src_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)                   //         .error
	);

	Qsys_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (altpll_c0_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (chaos_code_reset_s1_agent_rdata_fifo_src_data),      //     in_0.data
		.in_0_valid     (chaos_code_reset_s1_agent_rdata_fifo_src_valid),     //         .valid
		.in_0_ready     (chaos_code_reset_s1_agent_rdata_fifo_src_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)                   //         .error
	);

	Qsys_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (altpll_c0_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (chaos_code_shift_s1_agent_rdata_fifo_src_data),      //     in_0.data
		.in_0_valid     (chaos_code_shift_s1_agent_rdata_fifo_src_valid),     //         .valid
		.in_0_ready     (chaos_code_shift_s1_agent_rdata_fifo_src_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)                   //         .error
	);

	Qsys_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_016 (
		.in_clk_0_clk   (altpll_c0_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (chaos_code_done_s1_agent_rdata_fifo_src_data),       //     in_0.data
		.in_0_valid     (chaos_code_done_s1_agent_rdata_fifo_src_valid),      //         .valid
		.in_0_ready     (chaos_code_done_s1_agent_rdata_fifo_src_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_016_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_016_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_016_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_016_out_0_error)                   //         .error
	);

	Qsys_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_017 (
		.in_clk_0_clk   (altpll_c0_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (chaos_code_x_s1_agent_rdata_fifo_src_data),          //     in_0.data
		.in_0_valid     (chaos_code_x_s1_agent_rdata_fifo_src_valid),         //         .valid
		.in_0_ready     (chaos_code_x_s1_agent_rdata_fifo_src_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_017_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_017_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_017_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_017_out_0_error)                   //         .error
	);

	Qsys_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_018 (
		.in_clk_0_clk   (altpll_c0_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (chaos_code_y_s1_agent_rdata_fifo_src_data),          //     in_0.data
		.in_0_valid     (chaos_code_y_s1_agent_rdata_fifo_src_valid),         //         .valid
		.in_0_ready     (chaos_code_y_s1_agent_rdata_fifo_src_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_018_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_018_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_018_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_018_out_0_error)                   //         .error
	);

	Qsys_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_019 (
		.in_clk_0_clk   (altpll_c0_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (chaos_code_z_s1_agent_rdata_fifo_src_data),          //     in_0.data
		.in_0_valid     (chaos_code_z_s1_agent_rdata_fifo_src_valid),         //         .valid
		.in_0_ready     (chaos_code_z_s1_agent_rdata_fifo_src_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_019_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_019_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_019_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_019_out_0_error)                   //         .error
	);

	Qsys_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_020 (
		.in_clk_0_clk   (altpll_c0_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (pixel_buffer_dma_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (chaos_code_w_s1_agent_rdata_fifo_src_data),          //     in_0.data
		.in_0_valid     (chaos_code_w_s1_agent_rdata_fifo_src_valid),         //         .valid
		.in_0_ready     (chaos_code_w_s1_agent_rdata_fifo_src_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_020_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_020_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_020_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_020_out_0_error)                   //         .error
	);

endmodule
