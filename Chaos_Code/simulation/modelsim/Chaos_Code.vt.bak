// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "03/27/2018 15:40:18"
                                                                                
// Verilog Test Bench template for design : Chaos_Code
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module Chaos_Code_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg CLK;
reg RESET;
reg [31:0] SHIFT;
reg STEP;
// wires                                               
wire [7:0]  CODE_W;
wire [7:0]  CODE_X;
wire [7:0]  CODE_Y;
wire [7:0]  CODE_Z;
wire DONE;

// assign statements (if any)                          
Chaos_Code i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.CODE_W(CODE_W),
	.CODE_X(CODE_X),
	.CODE_Y(CODE_Y),
	.CODE_Z(CODE_Z),
	.DONE(DONE),
	.RESET(RESET),
	.SHIFT(SHIFT),
	.STEP(STEP)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
                                                       
// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
                                                       
@eachvec;                                              
// --> end                                             
end                                                    
endmodule

